
Recorder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d6  00800100  00004a26  00004aba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004a26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006ab  008002d6  008002d6  00004c90  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004c90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004cec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c8  00000000  00000000  00004d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005b80  00000000  00000000  000050f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001076  00000000  00000000  0000ac74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000038d6  00000000  00000000  0000bcea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e8c  00000000  00000000  0000f5c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e29  00000000  00000000  0001044c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007fc9  00000000  00000000  00011275  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005f8  00000000  00000000  0001923e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__ctors_end>
       4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
       8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
       c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      10:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      14:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      18:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      1c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      20:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      24:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      28:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__vector_10>
      2c:	0c 94 35 1a 	jmp	0x346a	; 0x346a <__vector_11>
      30:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      34:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      38:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      3c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      40:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      44:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      48:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      4c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      50:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      54:	0c 94 9c 1d 	jmp	0x3b38	; 0x3b38 <__vector_21>
      58:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      5c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      60:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      64:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      68:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      6c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      70:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__vector_29>
      78:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      7c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      80:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      84:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      88:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      8c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      90:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      94:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      98:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      9c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      a0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      a4:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__vector_41>
      a8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      ac:	a0 18       	sub	r10, r0
      ae:	53 18       	sub	r5, r3
      b0:	c7 17       	cp	r28, r23
      b2:	1b 18       	sub	r1, r11
      b4:	c7 17       	cp	r28, r23
      b6:	c7 17       	cp	r28, r23
      b8:	c7 17       	cp	r28, r23
      ba:	0b 18       	sub	r0, r11
      bc:	c7 17       	cp	r28, r23
      be:	c7 17       	cp	r28, r23
      c0:	c7 17       	cp	r28, r23
      c2:	c7 17       	cp	r28, r23
      c4:	c7 17       	cp	r28, r23
      c6:	c7 17       	cp	r28, r23
      c8:	c7 17       	cp	r28, r23
      ca:	c7 17       	cp	r28, r23
      cc:	c7 17       	cp	r28, r23
      ce:	c7 17       	cp	r28, r23
      d0:	c7 17       	cp	r28, r23
      d2:	c7 17       	cp	r28, r23
      d4:	c7 17       	cp	r28, r23
      d6:	c7 17       	cp	r28, r23
      d8:	c7 17       	cp	r28, r23
      da:	c7 17       	cp	r28, r23
      dc:	c7 17       	cp	r28, r23
      de:	c7 17       	cp	r28, r23
      e0:	c7 17       	cp	r28, r23
      e2:	c7 17       	cp	r28, r23
      e4:	c7 17       	cp	r28, r23
      e6:	c7 17       	cp	r28, r23
      e8:	c7 17       	cp	r28, r23
      ea:	c7 17       	cp	r28, r23
      ec:	c7 17       	cp	r28, r23
      ee:	c7 17       	cp	r28, r23
      f0:	c7 17       	cp	r28, r23
      f2:	c7 17       	cp	r28, r23
      f4:	c7 17       	cp	r28, r23
      f6:	c7 17       	cp	r28, r23
      f8:	c7 17       	cp	r28, r23
      fa:	c7 17       	cp	r28, r23
      fc:	c7 17       	cp	r28, r23
      fe:	c7 17       	cp	r28, r23
     100:	c7 17       	cp	r28, r23
     102:	c7 17       	cp	r28, r23
     104:	c7 17       	cp	r28, r23
     106:	c7 17       	cp	r28, r23
     108:	c7 17       	cp	r28, r23
     10a:	c7 17       	cp	r28, r23
     10c:	c7 17       	cp	r28, r23
     10e:	c7 17       	cp	r28, r23
     110:	bb 18       	sub	r11, r11
     112:	a8 18       	sub	r10, r8
     114:	00 18       	sub	r0, r0
     116:	e8 17       	cp	r30, r24
     118:	d7 17       	cp	r29, r23

0000011a <__trampolines_end>:
     11a:	00 01       	movw	r0, r0
     11c:	00 00       	nop
     11e:	c7 01       	movw	r24, r14
     120:	12 00       	.word	0x0012	; ????
     122:	02 00       	.word	0x0002	; ????
     124:	00 84       	ldd	r0, Z+8	; 0x08
     126:	01 43       	sbci	r16, 0x31	; 49
     128:	00 03       	mulsu	r16, r16
     12a:	00 00       	nop
     12c:	80 01       	movw	r16, r0
     12e:	04 01       	movw	r0, r8
     130:	03 09       	sbc	r16, r3
     132:	04 6a       	ori	r16, 0xA4	; 164
     134:	01 14       	cp	r0, r1
     136:	02 03       	mulsu	r16, r18
     138:	09 04       	cpc	r0, r9
     13a:	52 01       	movw	r10, r4
     13c:	16 03       	mulsu	r17, r22
     13e:	03 09       	sbc	r16, r3
     140:	04 44       	sbci	r16, 0x44	; 68
     142:	01 0c       	add	r0, r1

00000144 <string3>:
     144:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

00000152 <string2>:
     152:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
     162:	69 00 61 00 6c 00 00 00                             i.a.l...

0000016a <string1>:
     16a:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
     17a:	6d 00 65 00 00 00                                   m.e...

00000180 <string0>:
     180:	04 03 09 04                                         ....

00000184 <config1_descriptor>:
     184:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     194:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     1a4:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1b4:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1c4:	40 00 00                                            @..

000001c7 <device_descriptor>:
     1c7:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1d7:	03 01                                               ..

000001d9 <endpoint_config_table>:
     1d9:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000001e4 <__ctors_end>:
     1e4:	11 24       	eor	r1, r1
     1e6:	1f be       	out	0x3f, r1	; 63
     1e8:	cf ef       	ldi	r28, 0xFF	; 255
     1ea:	da e0       	ldi	r29, 0x0A	; 10
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	cd bf       	out	0x3d, r28	; 61

000001f0 <__do_copy_data>:
     1f0:	12 e0       	ldi	r17, 0x02	; 2
     1f2:	a0 e0       	ldi	r26, 0x00	; 0
     1f4:	b1 e0       	ldi	r27, 0x01	; 1
     1f6:	e6 e2       	ldi	r30, 0x26	; 38
     1f8:	fa e4       	ldi	r31, 0x4A	; 74
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <__do_copy_data+0x10>
     1fc:	05 90       	lpm	r0, Z+
     1fe:	0d 92       	st	X+, r0
     200:	a6 3d       	cpi	r26, 0xD6	; 214
     202:	b1 07       	cpc	r27, r17
     204:	d9 f7       	brne	.-10     	; 0x1fc <__do_copy_data+0xc>

00000206 <__do_clear_bss>:
     206:	29 e0       	ldi	r18, 0x09	; 9
     208:	a6 ed       	ldi	r26, 0xD6	; 214
     20a:	b2 e0       	ldi	r27, 0x02	; 2
     20c:	01 c0       	rjmp	.+2      	; 0x210 <.do_clear_bss_start>

0000020e <.do_clear_bss_loop>:
     20e:	1d 92       	st	X+, r1

00000210 <.do_clear_bss_start>:
     210:	a1 38       	cpi	r26, 0x81	; 129
     212:	b2 07       	cpc	r27, r18
     214:	e1 f7       	brne	.-8      	; 0x20e <.do_clear_bss_loop>
     216:	0e 94 0b 1c 	call	0x3816	; 0x3816 <main>
     21a:	0c 94 11 25 	jmp	0x4a22	; 0x4a22 <_exit>

0000021e <__bad_interrupt>:
     21e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000222 <adc_init>:

/************************************************************************/
/* PUBLIC/USER FUNCTIONS                                                */
/************************************************************************/
void adc_init() {
	ADMUX = 0x60;	// Left adjust result, AREF = AVCC
     222:	80 e6       	ldi	r24, 0x60	; 96
     224:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRB = 0x03;	// Select Timer0 CMPA as trigger	
     228:	83 e0       	ldi	r24, 0x03	; 3
     22a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     22e:	08 95       	ret

00000230 <adc_start>:
}

void adc_start() {
	ADCSRA = 0xAE;	// /64 prescaler (250 kHz clock), enable interrupts, ADC enable
     230:	8e ea       	ldi	r24, 0xAE	; 174
     232:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     236:	08 95       	ret

00000238 <adc_stop>:
}

void adc_stop() {
	ADCSRA = 0x00;
     238:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     23c:	08 95       	ret

0000023e <__vector_29>:
/**
 * ISR: ADC conversion complete
 * 
 * Interrupt service routine which executes on completion of ADC conversion.
 */
ISR(ADC_vect) {
     23e:	1f 92       	push	r1
     240:	0f 92       	push	r0
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	0f 92       	push	r0
     246:	11 24       	eor	r1, r1
     248:	2f 93       	push	r18
     24a:	3f 93       	push	r19
     24c:	4f 93       	push	r20
     24e:	5f 93       	push	r21
     250:	6f 93       	push	r22
     252:	7f 93       	push	r23
     254:	8f 93       	push	r24
     256:	9f 93       	push	r25
     258:	af 93       	push	r26
     25a:	bf 93       	push	r27
     25c:	ef 93       	push	r30
     25e:	ff 93       	push	r31
	uint8_t result = ADCH;	//Read result
     260:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	buffer_queue(result);	//Store result into buffer
     264:	0e 94 67 01 	call	0x2ce	; 0x2ce <buffer_queue>
     268:	ff 91       	pop	r31
     26a:	ef 91       	pop	r30
     26c:	bf 91       	pop	r27
     26e:	af 91       	pop	r26
     270:	9f 91       	pop	r25
     272:	8f 91       	pop	r24
     274:	7f 91       	pop	r23
     276:	6f 91       	pop	r22
     278:	5f 91       	pop	r21
     27a:	4f 91       	pop	r20
     27c:	3f 91       	pop	r19
     27e:	2f 91       	pop	r18
     280:	0f 90       	pop	r0
     282:	0f be       	out	0x3f, r0	; 63
     284:	0f 90       	pop	r0
     286:	1f 90       	pop	r1
     288:	18 95       	reti

0000028a <buffer_init>:
 *    pFuncPageFull - Pointer to function to execute on "page full"
 *    pFuncPageEmpty - Pointer to function to execute on "page empty"
 */
void buffer_init(void (*pFuncPageFull)(void), void (*pFuncPageEmpty)(void)) {
	// Reset read/write pointers
	pHead = pPage0;
     28a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <pPage0>
     28e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <pPage0+0x1>
     292:	30 93 fe 02 	sts	0x02FE, r19	; 0x8002fe <pHead+0x1>
     296:	20 93 fd 02 	sts	0x02FD, r18	; 0x8002fd <pHead>
	pTail = pPage0;
     29a:	30 93 00 07 	sts	0x0700, r19	; 0x800700 <pTail+0x1>
     29e:	20 93 ff 06 	sts	0x06FF, r18	; 0x8006ff <pTail>
	
	// Assign user supplier callback functions
	callbackPageFull = pFuncPageFull;
     2a2:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <callbackPageFull+0x1>
     2a6:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <callbackPageFull>
	callbackPageEmpty = pFuncPageEmpty;
     2aa:	70 93 fc 02 	sts	0x02FC, r23	; 0x8002fc <callbackPageEmpty+0x1>
     2ae:	60 93 fb 02 	sts	0x02FB, r22	; 0x8002fb <callbackPageEmpty>
     2b2:	08 95       	ret

000002b4 <buffer_reset>:
 * 
 * Resets the read/write pointers of the buffer to the top of Page 0.
 */
void buffer_reset() {
	// Reset pointers to top of buffer
	pHead = pPage0;
     2b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pPage0>
     2b8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pPage0+0x1>
     2bc:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <pHead+0x1>
     2c0:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <pHead>
	pTail = pPage0;
     2c4:	90 93 00 07 	sts	0x0700, r25	; 0x800700 <pTail+0x1>
     2c8:	80 93 ff 06 	sts	0x06FF, r24	; 0x8006ff <pTail>
     2cc:	08 95       	ret

000002ce <buffer_queue>:
 *
 * Parameters:
 *    word - sample (unsigned 8-bit integer) to add to queue (buffer)
 */
void buffer_queue(uint8_t word) {
	*(pHead++) = word;
     2ce:	e0 91 fd 02 	lds	r30, 0x02FD	; 0x8002fd <pHead>
     2d2:	f0 91 fe 02 	lds	r31, 0x02FE	; 0x8002fe <pHead+0x1>
     2d6:	9f 01       	movw	r18, r30
     2d8:	2f 5f       	subi	r18, 0xFF	; 255
     2da:	3f 4f       	sbci	r19, 0xFF	; 255
     2dc:	30 93 fe 02 	sts	0x02FE, r19	; 0x8002fe <pHead+0x1>
     2e0:	20 93 fd 02 	sts	0x02FD, r18	; 0x8002fd <pHead>
     2e4:	80 83       	st	Z, r24
	
	if (pHead == pPage1) {
     2e6:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <pHead>
     2ea:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <pHead+0x1>
     2ee:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <pPage1>
     2f2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pPage1+0x1>
     2f6:	82 17       	cp	r24, r18
     2f8:	93 07       	cpc	r25, r19
     2fa:	81 f0       	breq	.+32     	; 0x31c <buffer_queue+0x4e>
		callbackPageFull();
	} else if (pHead == pEnd) {
     2fc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     300:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     304:	82 17       	cp	r24, r18
     306:	93 07       	cpc	r25, r19
     308:	09 f0       	breq	.+2      	; 0x30c <buffer_queue+0x3e>
     30a:	08 95       	ret
		pHead = pPage0;
     30c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pPage0>
     310:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pPage0+0x1>
     314:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <pHead+0x1>
     318:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <pHead>
		callbackPageFull();
     31c:	e0 91 f9 02 	lds	r30, 0x02F9	; 0x8002f9 <callbackPageFull>
     320:	f0 91 fa 02 	lds	r31, 0x02FA	; 0x8002fa <callbackPageFull+0x1>
     324:	09 94       	ijmp

00000326 <buffer_dequeue>:
 * where necessary). A "page empty" callback is generated when the 
 * read pointer overflows to a new page.
 *
 * Returns: The sample read from the buffer (unsigned 8-bit integer)
 */
uint8_t buffer_dequeue() {
     326:	cf 93       	push	r28
	uint8_t word = *(pTail++);
     328:	e0 91 ff 06 	lds	r30, 0x06FF	; 0x8006ff <pTail>
     32c:	f0 91 00 07 	lds	r31, 0x0700	; 0x800700 <pTail+0x1>
     330:	cf 01       	movw	r24, r30
     332:	01 96       	adiw	r24, 0x01	; 1
     334:	90 93 00 07 	sts	0x0700, r25	; 0x800700 <pTail+0x1>
     338:	80 93 ff 06 	sts	0x06FF, r24	; 0x8006ff <pTail>
     33c:	c0 81       	ld	r28, Z
		
	if (pTail == pPage1) {
     33e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <pPage1>
     342:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pPage1+0x1>
     346:	82 17       	cp	r24, r18
     348:	93 07       	cpc	r25, r19
     34a:	91 f0       	breq	.+36     	; 0x370 <buffer_dequeue+0x4a>
		callbackPageEmpty();
	} else if (pTail == pEnd) {
     34c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     350:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     354:	82 17       	cp	r24, r18
     356:	93 07       	cpc	r25, r19
     358:	19 f0       	breq	.+6      	; 0x360 <buffer_dequeue+0x3a>
		pTail = pPage0;
		callbackPageEmpty();
	}
	
	return word;
}
     35a:	8c 2f       	mov	r24, r28
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret
	uint8_t word = *(pTail++);
		
	if (pTail == pPage1) {
		callbackPageEmpty();
	} else if (pTail == pEnd) {
		pTail = pPage0;
     360:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pPage0>
     364:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pPage0+0x1>
     368:	90 93 00 07 	sts	0x0700, r25	; 0x800700 <pTail+0x1>
     36c:	80 93 ff 06 	sts	0x06FF, r24	; 0x8006ff <pTail>
		callbackPageEmpty();
     370:	e0 91 fb 02 	lds	r30, 0x02FB	; 0x8002fb <callbackPageEmpty>
     374:	f0 91 fc 02 	lds	r31, 0x02FC	; 0x8002fc <callbackPageEmpty+0x1>
     378:	09 95       	icall
	}
	
	return word;
}
     37a:	8c 2f       	mov	r24, r28
     37c:	cf 91       	pop	r28
     37e:	08 95       	ret

00000380 <buffer_readPage>:
 */
uint8_t* buffer_readPage() {
	uint8_t* page;
	
	// Advance tail to next page boundary
	if (pTail > pPage0) {
     380:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pPage0>
     384:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pPage0+0x1>
     388:	20 91 ff 06 	lds	r18, 0x06FF	; 0x8006ff <pTail>
     38c:	30 91 00 07 	lds	r19, 0x0700	; 0x800700 <pTail+0x1>
     390:	82 17       	cp	r24, r18
     392:	93 07       	cpc	r25, r19
     394:	48 f0       	brcs	.+18     	; 0x3a8 <buffer_readPage+0x28>
		page = pPage1;
		pTail = pPage0;
	} else {
		page = pPage0;
		pTail = pPage1;
     396:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <pPage1>
     39a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pPage1+0x1>
     39e:	30 93 00 07 	sts	0x0700, r19	; 0x800700 <pTail+0x1>
     3a2:	20 93 ff 06 	sts	0x06FF, r18	; 0x8006ff <pTail>
	}
	
	return page;
}
     3a6:	08 95       	ret
uint8_t* buffer_readPage() {
	uint8_t* page;
	
	// Advance tail to next page boundary
	if (pTail > pPage0) {
		page = pPage1;
     3a8:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <pPage1>
     3ac:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <pPage1+0x1>
		pTail = pPage0;
     3b0:	90 93 00 07 	sts	0x0700, r25	; 0x800700 <pTail+0x1>
     3b4:	80 93 ff 06 	sts	0x06FF, r24	; 0x8006ff <pTail>
uint8_t* buffer_readPage() {
	uint8_t* page;
	
	// Advance tail to next page boundary
	if (pTail > pPage0) {
		page = pPage1;
     3b8:	83 2f       	mov	r24, r19
     3ba:	92 2f       	mov	r25, r18
     3bc:	08 95       	ret

000003be <buffer_writePage>:
 */
uint8_t* buffer_writePage() {
	uint8_t* page;
	
	// Advance head to next page boundary
	if (pHead > pPage0) {
     3be:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pPage0>
     3c2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pPage0+0x1>
     3c6:	20 91 fd 02 	lds	r18, 0x02FD	; 0x8002fd <pHead>
     3ca:	30 91 fe 02 	lds	r19, 0x02FE	; 0x8002fe <pHead+0x1>
     3ce:	82 17       	cp	r24, r18
     3d0:	93 07       	cpc	r25, r19
     3d2:	48 f0       	brcs	.+18     	; 0x3e6 <buffer_writePage+0x28>
		page = pPage1;
		pHead = pPage0;
		} else {
		page = pPage0;
		pHead = pPage1;
     3d4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <pPage1>
     3d8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pPage1+0x1>
     3dc:	30 93 fe 02 	sts	0x02FE, r19	; 0x8002fe <pHead+0x1>
     3e0:	20 93 fd 02 	sts	0x02FD, r18	; 0x8002fd <pHead>
	}
	
	return page;
     3e4:	08 95       	ret
uint8_t* buffer_writePage() {
	uint8_t* page;
	
	// Advance head to next page boundary
	if (pHead > pPage0) {
		page = pPage1;
     3e6:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <pPage1>
     3ea:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <pPage1+0x1>
		pHead = pPage0;
     3ee:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <pHead+0x1>
     3f2:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <pHead>
uint8_t* buffer_writePage() {
	uint8_t* page;
	
	// Advance head to next page boundary
	if (pHead > pPage0) {
		page = pPage1;
     3f6:	83 2f       	mov	r24, r19
     3f8:	92 2f       	mov	r25, r18
     3fa:	08 95       	ret

000003fc <get_ldnumber>:
	pb->buf[i++] = (BYTE)c;
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
     3fc:	dc 01       	movw	r26, r24
     3fe:	ed 91       	ld	r30, X+
     400:	fc 91       	ld	r31, X
     402:	11 97       	sbiw	r26, 0x01	; 1
     404:	30 97       	sbiw	r30, 0x00	; 0
     406:	19 f1       	breq	.+70     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
     408:	60 81       	ld	r22, Z
     40a:	61 32       	cpi	r22, 0x21	; 33
     40c:	68 f0       	brcs	.+26     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
     40e:	6a 33       	cpi	r22, 0x3A	; 58
     410:	f1 f0       	breq	.+60     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
     412:	af 01       	movw	r20, r30
     414:	4f 5f       	subi	r20, 0xFF	; 255
     416:	5f 4f       	sbci	r21, 0xFF	; 255
     418:	fa 01       	movw	r30, r20
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
     41c:	9a 33       	cpi	r25, 0x3A	; 58
     41e:	39 f0       	breq	.+14     	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
     420:	9f 01       	movw	r18, r30
     422:	91 91       	ld	r25, Z+
     424:	91 32       	cpi	r25, 0x21	; 33
     426:	d0 f7       	brcc	.-12     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	08 95       	ret
     42e:	24 17       	cp	r18, r20
     430:	35 07       	cpc	r19, r21
     432:	69 f4       	brne	.+26     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
     434:	80 ed       	ldi	r24, 0xD0	; 208
     436:	86 0f       	add	r24, r22
     438:	82 30       	cpi	r24, 0x02	; 2
     43a:	48 f4       	brcc	.+18     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
     43c:	26 2f       	mov	r18, r22
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	c9 01       	movw	r24, r18
     442:	c0 97       	sbiw	r24, 0x30	; 48
     444:	fa 01       	movw	r30, r20
     446:	31 96       	adiw	r30, 0x01	; 1
     448:	ed 93       	st	X+, r30
     44a:	fc 93       	st	X, r31
     44c:	08 95       	ret
     44e:	8f ef       	ldi	r24, 0xFF	; 255
     450:	9f ef       	ldi	r25, 0xFF	; 255
     452:	08 95       	ret

00000454 <validate>:
     454:	00 97       	sbiw	r24, 0x00	; 0
     456:	49 f0       	breq	.+18     	; 0x46a <validate+0x16>
     458:	dc 01       	movw	r26, r24
     45a:	ed 91       	ld	r30, X+
     45c:	fc 91       	ld	r31, X
     45e:	11 97       	sbiw	r26, 0x01	; 1
     460:	30 97       	sbiw	r30, 0x00	; 0
     462:	19 f0       	breq	.+6      	; 0x46a <validate+0x16>
     464:	20 81       	ld	r18, Z
     466:	21 11       	cpse	r18, r1
     468:	02 c0       	rjmp	.+4      	; 0x46e <validate+0x1a>
     46a:	89 e0       	ldi	r24, 0x09	; 9
     46c:	08 95       	ret
     46e:	26 81       	ldd	r18, Z+6	; 0x06
     470:	37 81       	ldd	r19, Z+7	; 0x07
     472:	12 96       	adiw	r26, 0x02	; 2
     474:	8d 91       	ld	r24, X+
     476:	9c 91       	ld	r25, X
     478:	13 97       	sbiw	r26, 0x03	; 3
     47a:	28 17       	cp	r18, r24
     47c:	39 07       	cpc	r19, r25
     47e:	a9 f7       	brne	.-22     	; 0x46a <validate+0x16>
     480:	81 81       	ldd	r24, Z+1	; 0x01
     482:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <disk_status>
     486:	80 fd       	sbrc	r24, 0
     488:	f0 cf       	rjmp	.-32     	; 0x46a <validate+0x16>
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	08 95       	ret

0000048e <sync_window.part.2>:
     48e:	8f 92       	push	r8
     490:	9f 92       	push	r9
     492:	af 92       	push	r10
     494:	bf 92       	push	r11
     496:	cf 92       	push	r12
     498:	df 92       	push	r13
     49a:	ef 92       	push	r14
     49c:	ff 92       	push	r15
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	ec 01       	movw	r28, r24
     4a8:	ca a4       	ldd	r12, Y+42	; 0x2a
     4aa:	db a4       	ldd	r13, Y+43	; 0x2b
     4ac:	ec a4       	ldd	r14, Y+44	; 0x2c
     4ae:	fd a4       	ldd	r15, Y+45	; 0x2d
     4b0:	5c 01       	movw	r10, r24
     4b2:	0e e2       	ldi	r16, 0x2E	; 46
     4b4:	a0 0e       	add	r10, r16
     4b6:	b1 1c       	adc	r11, r1
     4b8:	01 e0       	ldi	r16, 0x01	; 1
     4ba:	10 e0       	ldi	r17, 0x00	; 0
     4bc:	a7 01       	movw	r20, r14
     4be:	96 01       	movw	r18, r12
     4c0:	b5 01       	movw	r22, r10
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <disk_write>
     4c8:	81 11       	cpse	r24, r1
     4ca:	40 c0       	rjmp	.+128    	; 0x54c <sync_window.part.2+0xbe>
     4cc:	1c 82       	std	Y+4, r1	; 0x04
     4ce:	8e 89       	ldd	r24, Y+22	; 0x16
     4d0:	9f 89       	ldd	r25, Y+23	; 0x17
     4d2:	a8 8d       	ldd	r26, Y+24	; 0x18
     4d4:	b9 8d       	ldd	r27, Y+25	; 0x19
     4d6:	4e 8d       	ldd	r20, Y+30	; 0x1e
     4d8:	5f 8d       	ldd	r21, Y+31	; 0x1f
     4da:	68 a1       	ldd	r22, Y+32	; 0x20
     4dc:	79 a1       	ldd	r23, Y+33	; 0x21
     4de:	97 01       	movw	r18, r14
     4e0:	86 01       	movw	r16, r12
     4e2:	04 1b       	sub	r16, r20
     4e4:	15 0b       	sbc	r17, r21
     4e6:	26 0b       	sbc	r18, r22
     4e8:	37 0b       	sbc	r19, r23
     4ea:	08 17       	cp	r16, r24
     4ec:	19 07       	cpc	r17, r25
     4ee:	2a 07       	cpc	r18, r26
     4f0:	3b 07       	cpc	r19, r27
     4f2:	f0 f4       	brcc	.+60     	; 0x530 <sync_window.part.2+0xa2>
     4f4:	8b 80       	ldd	r8, Y+3	; 0x03
     4f6:	91 2c       	mov	r9, r1
     4f8:	12 e0       	ldi	r17, 0x02	; 2
     4fa:	81 16       	cp	r8, r17
     4fc:	91 04       	cpc	r9, r1
     4fe:	28 f4       	brcc	.+10     	; 0x50a <sync_window.part.2+0x7c>
     500:	17 c0       	rjmp	.+46     	; 0x530 <sync_window.part.2+0xa2>
     502:	8e 89       	ldd	r24, Y+22	; 0x16
     504:	9f 89       	ldd	r25, Y+23	; 0x17
     506:	a8 8d       	ldd	r26, Y+24	; 0x18
     508:	b9 8d       	ldd	r27, Y+25	; 0x19
     50a:	c8 0e       	add	r12, r24
     50c:	d9 1e       	adc	r13, r25
     50e:	ea 1e       	adc	r14, r26
     510:	fb 1e       	adc	r15, r27
     512:	01 e0       	ldi	r16, 0x01	; 1
     514:	10 e0       	ldi	r17, 0x00	; 0
     516:	a7 01       	movw	r20, r14
     518:	96 01       	movw	r18, r12
     51a:	b5 01       	movw	r22, r10
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <disk_write>
     522:	21 e0       	ldi	r18, 0x01	; 1
     524:	82 1a       	sub	r8, r18
     526:	91 08       	sbc	r9, r1
     528:	31 e0       	ldi	r19, 0x01	; 1
     52a:	83 16       	cp	r8, r19
     52c:	91 04       	cpc	r9, r1
     52e:	49 f7       	brne	.-46     	; 0x502 <sync_window.part.2+0x74>
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	ff 90       	pop	r15
     53c:	ef 90       	pop	r14
     53e:	df 90       	pop	r13
     540:	cf 90       	pop	r12
     542:	bf 90       	pop	r11
     544:	af 90       	pop	r10
     546:	9f 90       	pop	r9
     548:	8f 90       	pop	r8
     54a:	08 95       	ret
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	f1 cf       	rjmp	.-30     	; 0x532 <sync_window.part.2+0xa4>

00000550 <move_window>:
     550:	cf 92       	push	r12
     552:	df 92       	push	r13
     554:	ef 92       	push	r14
     556:	ff 92       	push	r15
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	ec 01       	movw	r28, r24
     562:	6a 01       	movw	r12, r20
     564:	7b 01       	movw	r14, r22
     566:	8a a5       	ldd	r24, Y+42	; 0x2a
     568:	9b a5       	ldd	r25, Y+43	; 0x2b
     56a:	ac a5       	ldd	r26, Y+44	; 0x2c
     56c:	bd a5       	ldd	r27, Y+45	; 0x2d
     56e:	84 17       	cp	r24, r20
     570:	95 07       	cpc	r25, r21
     572:	a6 07       	cpc	r26, r22
     574:	b7 07       	cpc	r27, r23
     576:	49 f1       	breq	.+82     	; 0x5ca <move_window+0x7a>
     578:	8c 81       	ldd	r24, Y+4	; 0x04
     57a:	81 11       	cpse	r24, r1
     57c:	20 c0       	rjmp	.+64     	; 0x5be <move_window+0x6e>
     57e:	01 e0       	ldi	r16, 0x01	; 1
     580:	10 e0       	ldi	r17, 0x00	; 0
     582:	a7 01       	movw	r20, r14
     584:	96 01       	movw	r18, r12
     586:	be 01       	movw	r22, r28
     588:	62 5d       	subi	r22, 0xD2	; 210
     58a:	7f 4f       	sbci	r23, 0xFF	; 255
     58c:	89 81       	ldd	r24, Y+1	; 0x01
     58e:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <disk_read>
     592:	81 11       	cpse	r24, r1
     594:	0e c0       	rjmp	.+28     	; 0x5b2 <move_window+0x62>
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	ca a6       	std	Y+42, r12	; 0x2a
     59a:	db a6       	std	Y+43, r13	; 0x2b
     59c:	ec a6       	std	Y+44, r14	; 0x2c
     59e:	fd a6       	std	Y+45, r15	; 0x2d
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	ef 90       	pop	r14
     5ac:	df 90       	pop	r13
     5ae:	cf 90       	pop	r12
     5b0:	08 95       	ret
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	cc 24       	eor	r12, r12
     5b6:	ca 94       	dec	r12
     5b8:	dc 2c       	mov	r13, r12
     5ba:	76 01       	movw	r14, r12
     5bc:	ed cf       	rjmp	.-38     	; 0x598 <move_window+0x48>
     5be:	ce 01       	movw	r24, r28
     5c0:	0e 94 47 02 	call	0x48e	; 0x48e <sync_window.part.2>
     5c4:	81 11       	cpse	r24, r1
     5c6:	ec cf       	rjmp	.-40     	; 0x5a0 <move_window+0x50>
     5c8:	da cf       	rjmp	.-76     	; 0x57e <move_window+0x2e>
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	e9 cf       	rjmp	.-46     	; 0x5a0 <move_window+0x50>

000005ce <check_fs>:
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	ec 01       	movw	r28, r24
     5d4:	1c 82       	std	Y+4, r1	; 0x04
     5d6:	8f ef       	ldi	r24, 0xFF	; 255
     5d8:	9f ef       	ldi	r25, 0xFF	; 255
     5da:	dc 01       	movw	r26, r24
     5dc:	8a a7       	std	Y+42, r24	; 0x2a
     5de:	9b a7       	std	Y+43, r25	; 0x2b
     5e0:	ac a7       	std	Y+44, r26	; 0x2c
     5e2:	bd a7       	std	Y+45, r27	; 0x2d
     5e4:	ce 01       	movw	r24, r28
     5e6:	0e 94 a8 02 	call	0x550	; 0x550 <move_window>
     5ea:	88 23       	and	r24, r24
     5ec:	21 f0       	breq	.+8      	; 0x5f6 <check_fs+0x28>
     5ee:	83 e0       	ldi	r24, 0x03	; 3
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	08 95       	ret
     5f6:	fe 01       	movw	r30, r28
     5f8:	e4 5d       	subi	r30, 0xD4	; 212
     5fa:	fd 4f       	sbci	r31, 0xFD	; 253
     5fc:	80 81       	ld	r24, Z
     5fe:	91 81       	ldd	r25, Z+1	; 0x01
     600:	85 35       	cpi	r24, 0x55	; 85
     602:	9a 4a       	sbci	r25, 0xAA	; 170
     604:	21 f0       	breq	.+8      	; 0x60e <check_fs+0x40>
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	08 95       	ret
     60e:	e8 5c       	subi	r30, 0xC8	; 200
     610:	f1 40       	sbci	r31, 0x01	; 1
     612:	80 81       	ld	r24, Z
     614:	91 81       	ldd	r25, Z+1	; 0x01
     616:	a2 81       	ldd	r26, Z+2	; 0x02
     618:	b3 81       	ldd	r27, Z+3	; 0x03
     61a:	bb 27       	eor	r27, r27
     61c:	86 34       	cpi	r24, 0x46	; 70
     61e:	91 44       	sbci	r25, 0x41	; 65
     620:	a4 45       	sbci	r26, 0x54	; 84
     622:	b1 05       	cpc	r27, r1
     624:	69 f0       	breq	.+26     	; 0x640 <check_fs+0x72>
     626:	c0 58       	subi	r28, 0x80	; 128
     628:	df 4f       	sbci	r29, 0xFF	; 255
     62a:	48 81       	ld	r20, Y
     62c:	59 81       	ldd	r21, Y+1	; 0x01
     62e:	6a 81       	ldd	r22, Y+2	; 0x02
     630:	7b 81       	ldd	r23, Y+3	; 0x03
     632:	77 27       	eor	r23, r23
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	46 34       	cpi	r20, 0x46	; 70
     638:	51 44       	sbci	r21, 0x41	; 65
     63a:	64 45       	sbci	r22, 0x54	; 84
     63c:	71 05       	cpc	r23, r1
     63e:	c1 f6       	brne	.-80     	; 0x5f0 <check_fs+0x22>
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	d6 cf       	rjmp	.-84     	; 0x5f0 <check_fs+0x22>

00000644 <find_volume>:
     644:	2f 92       	push	r2
     646:	3f 92       	push	r3
     648:	4f 92       	push	r4
     64a:	5f 92       	push	r5
     64c:	6f 92       	push	r6
     64e:	7f 92       	push	r7
     650:	8f 92       	push	r8
     652:	9f 92       	push	r9
     654:	af 92       	push	r10
     656:	bf 92       	push	r11
     658:	cf 92       	push	r12
     65a:	df 92       	push	r13
     65c:	ef 92       	push	r14
     65e:	ff 92       	push	r15
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
     66c:	6d 97       	sbiw	r28, 0x1d	; 29
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	de bf       	out	0x3e, r29	; 62
     674:	0f be       	out	0x3f, r0	; 63
     676:	cd bf       	out	0x3d, r28	; 61
     678:	6c 01       	movw	r12, r24
     67a:	cb 01       	movw	r24, r22
     67c:	b4 2e       	mov	r11, r20
     67e:	d6 01       	movw	r26, r12
     680:	1d 92       	st	X+, r1
     682:	1c 92       	st	X, r1
     684:	0e 94 fe 01 	call	0x3fc	; 0x3fc <get_ldnumber>
     688:	7c 01       	movw	r14, r24
     68a:	97 fd       	sbrc	r25, 7
     68c:	39 c0       	rjmp	.+114    	; 0x700 <find_volume+0xbc>
     68e:	fc 01       	movw	r30, r24
     690:	ee 0f       	add	r30, r30
     692:	ff 1f       	adc	r31, r31
     694:	e8 52       	subi	r30, 0x28	; 40
     696:	fd 4f       	sbci	r31, 0xFD	; 253
     698:	00 81       	ld	r16, Z
     69a:	11 81       	ldd	r17, Z+1	; 0x01
     69c:	01 15       	cp	r16, r1
     69e:	11 05       	cpc	r17, r1
     6a0:	89 f1       	breq	.+98     	; 0x704 <find_volume+0xc0>
     6a2:	f6 01       	movw	r30, r12
     6a4:	11 83       	std	Z+1, r17	; 0x01
     6a6:	00 83       	st	Z, r16
     6a8:	d8 01       	movw	r26, r16
     6aa:	8c 91       	ld	r24, X
     6ac:	88 23       	and	r24, r24
     6ae:	31 f0       	breq	.+12     	; 0x6bc <find_volume+0x78>
     6b0:	11 96       	adiw	r26, 0x01	; 1
     6b2:	8c 91       	ld	r24, X
     6b4:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <disk_status>
     6b8:	80 ff       	sbrs	r24, 0
     6ba:	26 c0       	rjmp	.+76     	; 0x708 <find_volume+0xc4>
     6bc:	f8 01       	movw	r30, r16
     6be:	10 82       	st	Z, r1
     6c0:	e1 82       	std	Z+1, r14	; 0x01
     6c2:	8e 2d       	mov	r24, r14
     6c4:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <disk_initialize>
     6c8:	80 ff       	sbrs	r24, 0
     6ca:	26 c0       	rjmp	.+76     	; 0x718 <find_volume+0xd4>
     6cc:	83 e0       	ldi	r24, 0x03	; 3
     6ce:	6d 96       	adiw	r28, 0x1d	; 29
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	df 90       	pop	r13
     6e8:	cf 90       	pop	r12
     6ea:	bf 90       	pop	r11
     6ec:	af 90       	pop	r10
     6ee:	9f 90       	pop	r9
     6f0:	8f 90       	pop	r8
     6f2:	7f 90       	pop	r7
     6f4:	6f 90       	pop	r6
     6f6:	5f 90       	pop	r5
     6f8:	4f 90       	pop	r4
     6fa:	3f 90       	pop	r3
     6fc:	2f 90       	pop	r2
     6fe:	08 95       	ret
     700:	8b e0       	ldi	r24, 0x0B	; 11
     702:	e5 cf       	rjmp	.-54     	; 0x6ce <find_volume+0x8a>
     704:	8c e0       	ldi	r24, 0x0C	; 12
     706:	e3 cf       	rjmp	.-58     	; 0x6ce <find_volume+0x8a>
     708:	bb 20       	and	r11, r11
     70a:	21 f0       	breq	.+8      	; 0x714 <find_volume+0xd0>
     70c:	82 ff       	sbrs	r24, 2
     70e:	02 c0       	rjmp	.+4      	; 0x714 <find_volume+0xd0>
     710:	8a e0       	ldi	r24, 0x0A	; 10
     712:	dd cf       	rjmp	.-70     	; 0x6ce <find_volume+0x8a>
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	db cf       	rjmp	.-74     	; 0x6ce <find_volume+0x8a>
     718:	bb 20       	and	r11, r11
     71a:	11 f0       	breq	.+4      	; 0x720 <find_volume+0xdc>
     71c:	82 fd       	sbrc	r24, 2
     71e:	f8 cf       	rjmp	.-16     	; 0x710 <find_volume+0xcc>
     720:	40 e0       	ldi	r20, 0x00	; 0
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	ba 01       	movw	r22, r20
     726:	c8 01       	movw	r24, r16
     728:	0e 94 e7 02 	call	0x5ce	; 0x5ce <check_fs>
     72c:	81 30       	cpi	r24, 0x01	; 1
     72e:	31 f0       	breq	.+12     	; 0x73c <find_volume+0xf8>
     730:	83 30       	cpi	r24, 0x03	; 3
     732:	91 f1       	breq	.+100    	; 0x798 <find_volume+0x154>
     734:	88 23       	and	r24, r24
     736:	91 f1       	breq	.+100    	; 0x79c <find_volume+0x158>
     738:	8d e0       	ldi	r24, 0x0D	; 13
     73a:	c9 cf       	rjmp	.-110    	; 0x6ce <find_volume+0x8a>
     73c:	f8 01       	movw	r30, r16
     73e:	e0 51       	subi	r30, 0x10	; 16
     740:	fe 4f       	sbci	r31, 0xFE	; 254
     742:	9e 01       	movw	r18, r28
     744:	2f 5f       	subi	r18, 0xFF	; 255
     746:	3f 4f       	sbci	r19, 0xFF	; 255
     748:	59 01       	movw	r10, r18
     74a:	4e 01       	movw	r8, r28
     74c:	31 e1       	ldi	r19, 0x11	; 17
     74e:	83 0e       	add	r8, r19
     750:	91 1c       	adc	r9, r1
     752:	d5 01       	movw	r26, r10
     754:	80 81       	ld	r24, Z
     756:	88 23       	and	r24, r24
     758:	09 f4       	brne	.+2      	; 0x75c <find_volume+0x118>
     75a:	47 c1       	rjmp	.+654    	; 0x9ea <find_volume+0x3a6>
     75c:	44 81       	ldd	r20, Z+4	; 0x04
     75e:	55 81       	ldd	r21, Z+5	; 0x05
     760:	66 81       	ldd	r22, Z+6	; 0x06
     762:	77 81       	ldd	r23, Z+7	; 0x07
     764:	4d 93       	st	X+, r20
     766:	5d 93       	st	X+, r21
     768:	6d 93       	st	X+, r22
     76a:	7d 93       	st	X+, r23
     76c:	70 96       	adiw	r30, 0x10	; 16
     76e:	8a 16       	cp	r8, r26
     770:	9b 06       	cpc	r9, r27
     772:	81 f7       	brne	.-32     	; 0x754 <find_volume+0x110>
     774:	d5 01       	movw	r26, r10
     776:	cd 90       	ld	r12, X+
     778:	dd 90       	ld	r13, X+
     77a:	ed 90       	ld	r14, X+
     77c:	fd 90       	ld	r15, X+
     77e:	5d 01       	movw	r10, r26
     780:	c1 14       	cp	r12, r1
     782:	d1 04       	cpc	r13, r1
     784:	e1 04       	cpc	r14, r1
     786:	f1 04       	cpc	r15, r1
     788:	09 f0       	breq	.+2      	; 0x78c <find_volume+0x148>
     78a:	33 c1       	rjmp	.+614    	; 0x9f2 <find_volume+0x3ae>
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	a8 14       	cp	r10, r8
     790:	b9 04       	cpc	r11, r9
     792:	81 f7       	brne	.-32     	; 0x774 <find_volume+0x130>
     794:	83 30       	cpi	r24, 0x03	; 3
     796:	81 f6       	brne	.-96     	; 0x738 <find_volume+0xf4>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	99 cf       	rjmp	.-206    	; 0x6ce <find_volume+0x8a>
     79c:	c1 2c       	mov	r12, r1
     79e:	d1 2c       	mov	r13, r1
     7a0:	76 01       	movw	r14, r12
     7a2:	f8 01       	movw	r30, r16
     7a4:	81 ad       	ldd	r24, Z+57	; 0x39
     7a6:	92 ad       	ldd	r25, Z+58	; 0x3a
     7a8:	81 15       	cp	r24, r1
     7aa:	92 40       	sbci	r25, 0x02	; 2
     7ac:	29 f6       	brne	.-118    	; 0x738 <find_volume+0xf4>
     7ae:	f8 01       	movw	r30, r16
     7b0:	ec 5b       	subi	r30, 0xBC	; 188
     7b2:	ff 4f       	sbci	r31, 0xFF	; 255
     7b4:	40 80       	ld	r4, Z
     7b6:	51 80       	ldd	r5, Z+1	; 0x01
     7b8:	61 2c       	mov	r6, r1
     7ba:	71 2c       	mov	r7, r1
     7bc:	41 14       	cp	r4, r1
     7be:	51 04       	cpc	r5, r1
     7c0:	61 04       	cpc	r6, r1
     7c2:	71 04       	cpc	r7, r1
     7c4:	29 f4       	brne	.+10     	; 0x7d0 <find_volume+0x18c>
     7c6:	3e 96       	adiw	r30, 0x0e	; 14
     7c8:	40 80       	ld	r4, Z
     7ca:	51 80       	ldd	r5, Z+1	; 0x01
     7cc:	62 80       	ldd	r6, Z+2	; 0x02
     7ce:	73 80       	ldd	r7, Z+3	; 0x03
     7d0:	d8 01       	movw	r26, r16
     7d2:	56 96       	adiw	r26, 0x16	; 22
     7d4:	4d 92       	st	X+, r4
     7d6:	5d 92       	st	X+, r5
     7d8:	6d 92       	st	X+, r6
     7da:	7c 92       	st	X, r7
     7dc:	59 97       	sbiw	r26, 0x19	; 25
     7de:	de 96       	adiw	r26, 0x3e	; 62
     7e0:	ac 91       	ld	r26, X
     7e2:	f8 01       	movw	r30, r16
     7e4:	a3 83       	std	Z+3, r26	; 0x03
     7e6:	8f ef       	ldi	r24, 0xFF	; 255
     7e8:	8a 0f       	add	r24, r26
     7ea:	82 30       	cpi	r24, 0x02	; 2
     7ec:	08 f0       	brcs	.+2      	; 0x7f0 <find_volume+0x1ac>
     7ee:	a4 cf       	rjmp	.-184    	; 0x738 <find_volume+0xf4>
     7f0:	f3 ad       	ldd	r31, Z+59	; 0x3b
     7f2:	fd 8b       	std	Y+21, r31	; 0x15
     7f4:	2f 2f       	mov	r18, r31
     7f6:	f8 01       	movw	r30, r16
     7f8:	22 83       	std	Z+2, r18	; 0x02
     7fa:	22 23       	and	r18, r18
     7fc:	09 f4       	brne	.+2      	; 0x800 <find_volume+0x1bc>
     7fe:	9c cf       	rjmp	.-200    	; 0x738 <find_volume+0xf4>
     800:	82 2f       	mov	r24, r18
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	9c 01       	movw	r18, r24
     806:	21 50       	subi	r18, 0x01	; 1
     808:	31 09       	sbc	r19, r1
     80a:	82 23       	and	r24, r18
     80c:	93 23       	and	r25, r19
     80e:	89 2b       	or	r24, r25
     810:	09 f0       	breq	.+2      	; 0x814 <find_volume+0x1d0>
     812:	92 cf       	rjmp	.-220    	; 0x738 <find_volume+0xf4>
     814:	ff 96       	adiw	r30, 0x3f	; 63
     816:	20 80       	ld	r2, Z
     818:	31 80       	ldd	r3, Z+1	; 0x01
     81a:	f8 01       	movw	r30, r16
     81c:	31 86       	std	Z+9, r3	; 0x09
     81e:	20 86       	std	Z+8, r2	; 0x08
     820:	c1 01       	movw	r24, r2
     822:	8f 70       	andi	r24, 0x0F	; 15
     824:	99 27       	eor	r25, r25
     826:	89 2b       	or	r24, r25
     828:	09 f0       	breq	.+2      	; 0x82c <find_volume+0x1e8>
     82a:	86 cf       	rjmp	.-244    	; 0x738 <find_volume+0xf4>
     82c:	ef 5b       	subi	r30, 0xBF	; 191
     82e:	ff 4f       	sbci	r31, 0xFF	; 255
     830:	80 80       	ld	r8, Z
     832:	91 80       	ldd	r9, Z+1	; 0x01
     834:	a1 2c       	mov	r10, r1
     836:	b1 2c       	mov	r11, r1
     838:	81 14       	cp	r8, r1
     83a:	91 04       	cpc	r9, r1
     83c:	a1 04       	cpc	r10, r1
     83e:	b1 04       	cpc	r11, r1
     840:	29 f4       	brne	.+10     	; 0x84c <find_volume+0x208>
     842:	3d 96       	adiw	r30, 0x0d	; 13
     844:	80 80       	ld	r8, Z
     846:	91 80       	ldd	r9, Z+1	; 0x01
     848:	a2 80       	ldd	r10, Z+2	; 0x02
     84a:	b3 80       	ldd	r11, Z+3	; 0x03
     84c:	f8 01       	movw	r30, r16
     84e:	04 ac       	ldd	r0, Z+60	; 0x3c
     850:	f5 ad       	ldd	r31, Z+61	; 0x3d
     852:	e0 2d       	mov	r30, r0
     854:	30 97       	sbiw	r30, 0x00	; 0
     856:	09 f4       	brne	.+2      	; 0x85a <find_volume+0x216>
     858:	6f cf       	rjmp	.-290    	; 0x738 <find_volume+0xf4>
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	a3 01       	movw	r20, r6
     85e:	92 01       	movw	r18, r4
     860:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__muluhisi3>
     864:	6a 8f       	std	Y+26, r22	; 0x1a
     866:	7b 8f       	std	Y+27, r23	; 0x1b
     868:	8c 8f       	std	Y+28, r24	; 0x1c
     86a:	9d 8f       	std	Y+29, r25	; 0x1d
     86c:	9f 01       	movw	r18, r30
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	2e 8b       	std	Y+22, r18	; 0x16
     874:	3f 8b       	std	Y+23, r19	; 0x17
     876:	48 8f       	std	Y+24, r20	; 0x18
     878:	59 8f       	std	Y+25, r21	; 0x19
     87a:	c1 01       	movw	r24, r2
     87c:	92 95       	swap	r25
     87e:	82 95       	swap	r24
     880:	8f 70       	andi	r24, 0x0F	; 15
     882:	89 27       	eor	r24, r25
     884:	9f 70       	andi	r25, 0x0F	; 15
     886:	89 27       	eor	r24, r25
     888:	28 0f       	add	r18, r24
     88a:	39 1f       	adc	r19, r25
     88c:	41 1d       	adc	r20, r1
     88e:	51 1d       	adc	r21, r1
     890:	da 01       	movw	r26, r20
     892:	c9 01       	movw	r24, r18
     894:	2a 8d       	ldd	r18, Y+26	; 0x1a
     896:	3b 8d       	ldd	r19, Y+27	; 0x1b
     898:	4c 8d       	ldd	r20, Y+28	; 0x1c
     89a:	5d 8d       	ldd	r21, Y+29	; 0x1d
     89c:	28 0f       	add	r18, r24
     89e:	39 1f       	adc	r19, r25
     8a0:	4a 1f       	adc	r20, r26
     8a2:	5b 1f       	adc	r21, r27
     8a4:	29 8b       	std	Y+17, r18	; 0x11
     8a6:	3a 8b       	std	Y+18, r19	; 0x12
     8a8:	4b 8b       	std	Y+19, r20	; 0x13
     8aa:	5c 8b       	std	Y+20, r21	; 0x14
     8ac:	82 16       	cp	r8, r18
     8ae:	93 06       	cpc	r9, r19
     8b0:	a4 06       	cpc	r10, r20
     8b2:	b5 06       	cpc	r11, r21
     8b4:	08 f4       	brcc	.+2      	; 0x8b8 <find_volume+0x274>
     8b6:	40 cf       	rjmp	.-384    	; 0x738 <find_volume+0xf4>
     8b8:	c5 01       	movw	r24, r10
     8ba:	b4 01       	movw	r22, r8
     8bc:	62 1b       	sub	r22, r18
     8be:	73 0b       	sbc	r23, r19
     8c0:	84 0b       	sbc	r24, r20
     8c2:	95 0b       	sbc	r25, r21
     8c4:	ed 89       	ldd	r30, Y+21	; 0x15
     8c6:	2e 2f       	mov	r18, r30
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	40 e0       	ldi	r20, 0x00	; 0
     8cc:	50 e0       	ldi	r21, 0x00	; 0
     8ce:	0e 94 c1 21 	call	0x4382	; 0x4382 <__udivmodsi4>
     8d2:	21 15       	cp	r18, r1
     8d4:	31 05       	cpc	r19, r1
     8d6:	41 05       	cpc	r20, r1
     8d8:	51 05       	cpc	r21, r1
     8da:	09 f4       	brne	.+2      	; 0x8de <find_volume+0x29a>
     8dc:	2d cf       	rjmp	.-422    	; 0x738 <find_volume+0xf4>
     8de:	26 3f       	cpi	r18, 0xF6	; 246
     8e0:	ff e0       	ldi	r31, 0x0F	; 15
     8e2:	3f 07       	cpc	r19, r31
     8e4:	41 05       	cpc	r20, r1
     8e6:	51 05       	cpc	r21, r1
     8e8:	08 f4       	brcc	.+2      	; 0x8ec <find_volume+0x2a8>
     8ea:	30 c1       	rjmp	.+608    	; 0xb4c <__stack+0x4d>
     8ec:	26 3f       	cpi	r18, 0xF6	; 246
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
     8f0:	38 07       	cpc	r19, r24
     8f2:	41 05       	cpc	r20, r1
     8f4:	51 05       	cpc	r21, r1
     8f6:	08 f4       	brcc	.+2      	; 0x8fa <find_volume+0x2b6>
     8f8:	c7 c0       	rjmp	.+398    	; 0xa88 <find_volume+0x444>
     8fa:	49 01       	movw	r8, r18
     8fc:	5a 01       	movw	r10, r20
     8fe:	b2 e0       	ldi	r27, 0x02	; 2
     900:	8b 0e       	add	r8, r27
     902:	91 1c       	adc	r9, r1
     904:	a1 1c       	adc	r10, r1
     906:	b1 1c       	adc	r11, r1
     908:	f8 01       	movw	r30, r16
     90a:	82 8a       	std	Z+18, r8	; 0x12
     90c:	93 8a       	std	Z+19, r9	; 0x13
     90e:	a4 8a       	std	Z+20, r10	; 0x14
     910:	b5 8a       	std	Z+21, r11	; 0x15
     912:	c2 8e       	std	Z+26, r12	; 0x1a
     914:	d3 8e       	std	Z+27, r13	; 0x1b
     916:	e4 8e       	std	Z+28, r14	; 0x1c
     918:	f5 8e       	std	Z+29, r15	; 0x1d
     91a:	8e 89       	ldd	r24, Y+22	; 0x16
     91c:	9f 89       	ldd	r25, Y+23	; 0x17
     91e:	a8 8d       	ldd	r26, Y+24	; 0x18
     920:	b9 8d       	ldd	r27, Y+25	; 0x19
     922:	8c 0d       	add	r24, r12
     924:	9d 1d       	adc	r25, r13
     926:	ae 1d       	adc	r26, r14
     928:	bf 1d       	adc	r27, r15
     92a:	86 8f       	std	Z+30, r24	; 0x1e
     92c:	97 8f       	std	Z+31, r25	; 0x1f
     92e:	a0 a3       	std	Z+32, r26	; 0x20
     930:	b1 a3       	std	Z+33, r27	; 0x21
     932:	89 89       	ldd	r24, Y+17	; 0x11
     934:	9a 89       	ldd	r25, Y+18	; 0x12
     936:	ab 89       	ldd	r26, Y+19	; 0x13
     938:	bc 89       	ldd	r27, Y+20	; 0x14
     93a:	8c 0d       	add	r24, r12
     93c:	9d 1d       	adc	r25, r13
     93e:	ae 1d       	adc	r26, r14
     940:	bf 1d       	adc	r27, r15
     942:	86 a3       	std	Z+38, r24	; 0x26
     944:	97 a3       	std	Z+39, r25	; 0x27
     946:	a0 a7       	std	Z+40, r26	; 0x28
     948:	b1 a7       	std	Z+41, r27	; 0x29
     94a:	23 28       	or	r2, r3
     94c:	09 f0       	breq	.+2      	; 0x950 <find_volume+0x30c>
     94e:	f4 ce       	rjmp	.-536    	; 0x738 <find_volume+0xf4>
     950:	f8 01       	movw	r30, r16
     952:	e6 5a       	subi	r30, 0xA6	; 166
     954:	ff 4f       	sbci	r31, 0xFF	; 255
     956:	80 81       	ld	r24, Z
     958:	91 81       	ldd	r25, Z+1	; 0x01
     95a:	a2 81       	ldd	r26, Z+2	; 0x02
     95c:	b3 81       	ldd	r27, Z+3	; 0x03
     95e:	f8 01       	movw	r30, r16
     960:	82 a3       	std	Z+34, r24	; 0x22
     962:	93 a3       	std	Z+35, r25	; 0x23
     964:	a4 a3       	std	Z+36, r26	; 0x24
     966:	b5 a3       	std	Z+37, r27	; 0x25
     968:	88 0c       	add	r8, r8
     96a:	99 1c       	adc	r9, r9
     96c:	aa 1c       	adc	r10, r10
     96e:	bb 1c       	adc	r11, r11
     970:	88 0c       	add	r8, r8
     972:	99 1c       	adc	r9, r9
     974:	aa 1c       	adc	r10, r10
     976:	bb 1c       	adc	r11, r11
     978:	ff ef       	ldi	r31, 0xFF	; 255
     97a:	8f 0e       	add	r8, r31
     97c:	f1 e0       	ldi	r31, 0x01	; 1
     97e:	9f 1e       	adc	r9, r31
     980:	a1 1c       	adc	r10, r1
     982:	b1 1c       	adc	r11, r1
     984:	79 e0       	ldi	r23, 0x09	; 9
     986:	b6 94       	lsr	r11
     988:	a7 94       	ror	r10
     98a:	97 94       	ror	r9
     98c:	87 94       	ror	r8
     98e:	7a 95       	dec	r23
     990:	d1 f7       	brne	.-12     	; 0x986 <find_volume+0x342>
     992:	48 14       	cp	r4, r8
     994:	59 04       	cpc	r5, r9
     996:	6a 04       	cpc	r6, r10
     998:	7b 04       	cpc	r7, r11
     99a:	08 f4       	brcc	.+2      	; 0x99e <find_volume+0x35a>
     99c:	cd ce       	rjmp	.-614    	; 0x738 <find_volume+0xf4>
     99e:	8f ef       	ldi	r24, 0xFF	; 255
     9a0:	9f ef       	ldi	r25, 0xFF	; 255
     9a2:	dc 01       	movw	r26, r24
     9a4:	f8 01       	movw	r30, r16
     9a6:	86 87       	std	Z+14, r24	; 0x0e
     9a8:	97 87       	std	Z+15, r25	; 0x0f
     9aa:	a0 8b       	std	Z+16, r26	; 0x10
     9ac:	b1 8b       	std	Z+17, r27	; 0x11
     9ae:	82 87       	std	Z+10, r24	; 0x0a
     9b0:	93 87       	std	Z+11, r25	; 0x0b
     9b2:	a4 87       	std	Z+12, r26	; 0x0c
     9b4:	b5 87       	std	Z+13, r27	; 0x0d
     9b6:	80 e8       	ldi	r24, 0x80	; 128
     9b8:	85 83       	std	Z+5, r24	; 0x05
     9ba:	e2 5a       	subi	r30, 0xA2	; 162
     9bc:	ff 4f       	sbci	r31, 0xFF	; 255
     9be:	80 81       	ld	r24, Z
     9c0:	91 81       	ldd	r25, Z+1	; 0x01
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	f1 f0       	breq	.+60     	; 0xa02 <find_volume+0x3be>
     9c6:	83 e0       	ldi	r24, 0x03	; 3
     9c8:	d8 01       	movw	r26, r16
     9ca:	8c 93       	st	X, r24
     9cc:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <__data_end>
     9d0:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <__data_end+0x1>
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <__data_end+0x1>
     9da:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <__data_end>
     9de:	17 96       	adiw	r26, 0x07	; 7
     9e0:	9c 93       	st	X, r25
     9e2:	8e 93       	st	-X, r24
     9e4:	16 97       	sbiw	r26, 0x06	; 6
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	72 ce       	rjmp	.-796    	; 0x6ce <find_volume+0x8a>
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	ba 01       	movw	r22, r20
     9f0:	b9 ce       	rjmp	.-654    	; 0x764 <find_volume+0x120>
     9f2:	b7 01       	movw	r22, r14
     9f4:	a6 01       	movw	r20, r12
     9f6:	c8 01       	movw	r24, r16
     9f8:	0e 94 e7 02 	call	0x5ce	; 0x5ce <check_fs>
     9fc:	81 11       	cpse	r24, r1
     9fe:	c7 ce       	rjmp	.-626    	; 0x78e <find_volume+0x14a>
     a00:	d0 ce       	rjmp	.-608    	; 0x7a2 <find_volume+0x15e>
     a02:	b7 01       	movw	r22, r14
     a04:	a6 01       	movw	r20, r12
     a06:	4f 5f       	subi	r20, 0xFF	; 255
     a08:	5f 4f       	sbci	r21, 0xFF	; 255
     a0a:	6f 4f       	sbci	r22, 0xFF	; 255
     a0c:	7f 4f       	sbci	r23, 0xFF	; 255
     a0e:	c8 01       	movw	r24, r16
     a10:	0e 94 a8 02 	call	0x550	; 0x550 <move_window>
     a14:	81 11       	cpse	r24, r1
     a16:	d7 cf       	rjmp	.-82     	; 0x9c6 <find_volume+0x382>
     a18:	d8 01       	movw	r26, r16
     a1a:	15 96       	adiw	r26, 0x05	; 5
     a1c:	1c 92       	st	X, r1
     a1e:	f8 01       	movw	r30, r16
     a20:	e4 5d       	subi	r30, 0xD4	; 212
     a22:	fd 4f       	sbci	r31, 0xFD	; 253
     a24:	80 81       	ld	r24, Z
     a26:	91 81       	ldd	r25, Z+1	; 0x01
     a28:	85 35       	cpi	r24, 0x55	; 85
     a2a:	9a 4a       	sbci	r25, 0xAA	; 170
     a2c:	61 f6       	brne	.-104    	; 0x9c6 <find_volume+0x382>
     a2e:	f8 01       	movw	r30, r16
     a30:	86 a5       	ldd	r24, Z+46	; 0x2e
     a32:	97 a5       	ldd	r25, Z+47	; 0x2f
     a34:	a0 a9       	ldd	r26, Z+48	; 0x30
     a36:	b1 a9       	ldd	r27, Z+49	; 0x31
     a38:	82 35       	cpi	r24, 0x52	; 82
     a3a:	92 45       	sbci	r25, 0x52	; 82
     a3c:	a1 46       	sbci	r26, 0x61	; 97
     a3e:	b1 44       	sbci	r27, 0x41	; 65
     a40:	11 f6       	brne	.-124    	; 0x9c6 <find_volume+0x382>
     a42:	f8 01       	movw	r30, r16
     a44:	ee 5e       	subi	r30, 0xEE	; 238
     a46:	fd 4f       	sbci	r31, 0xFD	; 253
     a48:	80 81       	ld	r24, Z
     a4a:	91 81       	ldd	r25, Z+1	; 0x01
     a4c:	a2 81       	ldd	r26, Z+2	; 0x02
     a4e:	b3 81       	ldd	r27, Z+3	; 0x03
     a50:	82 37       	cpi	r24, 0x72	; 114
     a52:	92 47       	sbci	r25, 0x72	; 114
     a54:	a1 44       	sbci	r26, 0x41	; 65
     a56:	b1 46       	sbci	r27, 0x61	; 97
     a58:	09 f0       	breq	.+2      	; 0xa5c <find_volume+0x418>
     a5a:	b5 cf       	rjmp	.-150    	; 0x9c6 <find_volume+0x382>
     a5c:	34 96       	adiw	r30, 0x04	; 4
     a5e:	80 81       	ld	r24, Z
     a60:	91 81       	ldd	r25, Z+1	; 0x01
     a62:	a2 81       	ldd	r26, Z+2	; 0x02
     a64:	b3 81       	ldd	r27, Z+3	; 0x03
     a66:	f8 01       	movw	r30, r16
     a68:	86 87       	std	Z+14, r24	; 0x0e
     a6a:	97 87       	std	Z+15, r25	; 0x0f
     a6c:	a0 8b       	std	Z+16, r26	; 0x10
     a6e:	b1 8b       	std	Z+17, r27	; 0x11
     a70:	e6 5e       	subi	r30, 0xE6	; 230
     a72:	fd 4f       	sbci	r31, 0xFD	; 253
     a74:	80 81       	ld	r24, Z
     a76:	91 81       	ldd	r25, Z+1	; 0x01
     a78:	a2 81       	ldd	r26, Z+2	; 0x02
     a7a:	b3 81       	ldd	r27, Z+3	; 0x03
     a7c:	f8 01       	movw	r30, r16
     a7e:	82 87       	std	Z+10, r24	; 0x0a
     a80:	93 87       	std	Z+11, r25	; 0x0b
     a82:	a4 87       	std	Z+12, r26	; 0x0c
     a84:	b5 87       	std	Z+13, r27	; 0x0d
     a86:	9f cf       	rjmp	.-194    	; 0x9c6 <find_volume+0x382>
     a88:	49 01       	movw	r8, r18
     a8a:	5a 01       	movw	r10, r20
     a8c:	82 e0       	ldi	r24, 0x02	; 2
     a8e:	88 0e       	add	r8, r24
     a90:	91 1c       	adc	r9, r1
     a92:	a1 1c       	adc	r10, r1
     a94:	b1 1c       	adc	r11, r1
     a96:	d8 01       	movw	r26, r16
     a98:	52 96       	adiw	r26, 0x12	; 18
     a9a:	8d 92       	st	X+, r8
     a9c:	9d 92       	st	X+, r9
     a9e:	ad 92       	st	X+, r10
     aa0:	bc 92       	st	X, r11
     aa2:	55 97       	sbiw	r26, 0x15	; 21
     aa4:	f8 01       	movw	r30, r16
     aa6:	c2 8e       	std	Z+26, r12	; 0x1a
     aa8:	d3 8e       	std	Z+27, r13	; 0x1b
     aaa:	e4 8e       	std	Z+28, r14	; 0x1c
     aac:	f5 8e       	std	Z+29, r15	; 0x1d
     aae:	8e 89       	ldd	r24, Y+22	; 0x16
     ab0:	9f 89       	ldd	r25, Y+23	; 0x17
     ab2:	a8 8d       	ldd	r26, Y+24	; 0x18
     ab4:	b9 8d       	ldd	r27, Y+25	; 0x19
     ab6:	8c 0d       	add	r24, r12
     ab8:	9d 1d       	adc	r25, r13
     aba:	ae 1d       	adc	r26, r14
     abc:	bf 1d       	adc	r27, r15
     abe:	86 8f       	std	Z+30, r24	; 0x1e
     ac0:	97 8f       	std	Z+31, r25	; 0x1f
     ac2:	a0 a3       	std	Z+32, r26	; 0x20
     ac4:	b1 a3       	std	Z+33, r27	; 0x21
     ac6:	29 89       	ldd	r18, Y+17	; 0x11
     ac8:	3a 89       	ldd	r19, Y+18	; 0x12
     aca:	4b 89       	ldd	r20, Y+19	; 0x13
     acc:	5c 89       	ldd	r21, Y+20	; 0x14
     ace:	c2 0e       	add	r12, r18
     ad0:	d3 1e       	adc	r13, r19
     ad2:	e4 1e       	adc	r14, r20
     ad4:	f5 1e       	adc	r15, r21
     ad6:	c6 a2       	std	Z+38, r12	; 0x26
     ad8:	d7 a2       	std	Z+39, r13	; 0x27
     ada:	e0 a6       	std	Z+40, r14	; 0x28
     adc:	f1 a6       	std	Z+41, r15	; 0x29
     ade:	23 28       	or	r2, r3
     ae0:	09 f4       	brne	.+2      	; 0xae4 <find_volume+0x4a0>
     ae2:	2a ce       	rjmp	.-940    	; 0x738 <find_volume+0xf4>
     ae4:	2a 8d       	ldd	r18, Y+26	; 0x1a
     ae6:	3b 8d       	ldd	r19, Y+27	; 0x1b
     ae8:	4c 8d       	ldd	r20, Y+28	; 0x1c
     aea:	5d 8d       	ldd	r21, Y+29	; 0x1d
     aec:	82 0f       	add	r24, r18
     aee:	93 1f       	adc	r25, r19
     af0:	a4 1f       	adc	r26, r20
     af2:	b5 1f       	adc	r27, r21
     af4:	f8 01       	movw	r30, r16
     af6:	82 a3       	std	Z+34, r24	; 0x22
     af8:	93 a3       	std	Z+35, r25	; 0x23
     afa:	a4 a3       	std	Z+36, r26	; 0x24
     afc:	b5 a3       	std	Z+37, r27	; 0x25
     afe:	88 0c       	add	r8, r8
     b00:	99 1c       	adc	r9, r9
     b02:	aa 1c       	adc	r10, r10
     b04:	bb 1c       	adc	r11, r11
     b06:	ff ef       	ldi	r31, 0xFF	; 255
     b08:	8f 0e       	add	r8, r31
     b0a:	f1 e0       	ldi	r31, 0x01	; 1
     b0c:	9f 1e       	adc	r9, r31
     b0e:	a1 1c       	adc	r10, r1
     b10:	b1 1c       	adc	r11, r1
     b12:	59 e0       	ldi	r21, 0x09	; 9
     b14:	b6 94       	lsr	r11
     b16:	a7 94       	ror	r10
     b18:	97 94       	ror	r9
     b1a:	87 94       	ror	r8
     b1c:	5a 95       	dec	r21
     b1e:	d1 f7       	brne	.-12     	; 0xb14 <__stack+0x15>
     b20:	48 14       	cp	r4, r8
     b22:	59 04       	cpc	r5, r9
     b24:	6a 04       	cpc	r6, r10
     b26:	7b 04       	cpc	r7, r11
     b28:	08 f4       	brcc	.+2      	; 0xb2c <__stack+0x2d>
     b2a:	06 ce       	rjmp	.-1012   	; 0x738 <find_volume+0xf4>
     b2c:	8f ef       	ldi	r24, 0xFF	; 255
     b2e:	9f ef       	ldi	r25, 0xFF	; 255
     b30:	dc 01       	movw	r26, r24
     b32:	f8 01       	movw	r30, r16
     b34:	86 87       	std	Z+14, r24	; 0x0e
     b36:	97 87       	std	Z+15, r25	; 0x0f
     b38:	a0 8b       	std	Z+16, r26	; 0x10
     b3a:	b1 8b       	std	Z+17, r27	; 0x11
     b3c:	82 87       	std	Z+10, r24	; 0x0a
     b3e:	93 87       	std	Z+11, r25	; 0x0b
     b40:	a4 87       	std	Z+12, r26	; 0x0c
     b42:	b5 87       	std	Z+13, r27	; 0x0d
     b44:	80 e8       	ldi	r24, 0x80	; 128
     b46:	85 83       	std	Z+5, r24	; 0x05
     b48:	82 e0       	ldi	r24, 0x02	; 2
     b4a:	3e cf       	rjmp	.-388    	; 0x9c8 <find_volume+0x384>
     b4c:	49 01       	movw	r8, r18
     b4e:	5a 01       	movw	r10, r20
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	88 0e       	add	r8, r24
     b54:	91 1c       	adc	r9, r1
     b56:	a1 1c       	adc	r10, r1
     b58:	b1 1c       	adc	r11, r1
     b5a:	d8 01       	movw	r26, r16
     b5c:	52 96       	adiw	r26, 0x12	; 18
     b5e:	8d 92       	st	X+, r8
     b60:	9d 92       	st	X+, r9
     b62:	ad 92       	st	X+, r10
     b64:	bc 92       	st	X, r11
     b66:	55 97       	sbiw	r26, 0x15	; 21
     b68:	f8 01       	movw	r30, r16
     b6a:	c2 8e       	std	Z+26, r12	; 0x1a
     b6c:	d3 8e       	std	Z+27, r13	; 0x1b
     b6e:	e4 8e       	std	Z+28, r14	; 0x1c
     b70:	f5 8e       	std	Z+29, r15	; 0x1d
     b72:	8e 89       	ldd	r24, Y+22	; 0x16
     b74:	9f 89       	ldd	r25, Y+23	; 0x17
     b76:	a8 8d       	ldd	r26, Y+24	; 0x18
     b78:	b9 8d       	ldd	r27, Y+25	; 0x19
     b7a:	8c 0d       	add	r24, r12
     b7c:	9d 1d       	adc	r25, r13
     b7e:	ae 1d       	adc	r26, r14
     b80:	bf 1d       	adc	r27, r15
     b82:	86 8f       	std	Z+30, r24	; 0x1e
     b84:	97 8f       	std	Z+31, r25	; 0x1f
     b86:	a0 a3       	std	Z+32, r26	; 0x20
     b88:	b1 a3       	std	Z+33, r27	; 0x21
     b8a:	29 89       	ldd	r18, Y+17	; 0x11
     b8c:	3a 89       	ldd	r19, Y+18	; 0x12
     b8e:	4b 89       	ldd	r20, Y+19	; 0x13
     b90:	5c 89       	ldd	r21, Y+20	; 0x14
     b92:	c2 0e       	add	r12, r18
     b94:	d3 1e       	adc	r13, r19
     b96:	e4 1e       	adc	r14, r20
     b98:	f5 1e       	adc	r15, r21
     b9a:	c6 a2       	std	Z+38, r12	; 0x26
     b9c:	d7 a2       	std	Z+39, r13	; 0x27
     b9e:	e0 a6       	std	Z+40, r14	; 0x28
     ba0:	f1 a6       	std	Z+41, r15	; 0x29
     ba2:	23 28       	or	r2, r3
     ba4:	09 f4       	brne	.+2      	; 0xba8 <__stack+0xa9>
     ba6:	c8 cd       	rjmp	.-1136   	; 0x738 <find_volume+0xf4>
     ba8:	2a 8d       	ldd	r18, Y+26	; 0x1a
     baa:	3b 8d       	ldd	r19, Y+27	; 0x1b
     bac:	4c 8d       	ldd	r20, Y+28	; 0x1c
     bae:	5d 8d       	ldd	r21, Y+29	; 0x1d
     bb0:	82 0f       	add	r24, r18
     bb2:	93 1f       	adc	r25, r19
     bb4:	a4 1f       	adc	r26, r20
     bb6:	b5 1f       	adc	r27, r21
     bb8:	f8 01       	movw	r30, r16
     bba:	82 a3       	std	Z+34, r24	; 0x22
     bbc:	93 a3       	std	Z+35, r25	; 0x23
     bbe:	a4 a3       	std	Z+36, r26	; 0x24
     bc0:	b5 a3       	std	Z+37, r27	; 0x25
     bc2:	a3 e0       	ldi	r26, 0x03	; 3
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	a5 01       	movw	r20, r10
     bc8:	94 01       	movw	r18, r8
     bca:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__muluhisi3>
     bce:	dc 01       	movw	r26, r24
     bd0:	cb 01       	movw	r24, r22
     bd2:	b6 95       	lsr	r27
     bd4:	a7 95       	ror	r26
     bd6:	97 95       	ror	r25
     bd8:	87 95       	ror	r24
     bda:	f1 e0       	ldi	r31, 0x01	; 1
     bdc:	8f 22       	and	r8, r31
     bde:	99 24       	eor	r9, r9
     be0:	aa 24       	eor	r10, r10
     be2:	bb 24       	eor	r11, r11
     be4:	2f ef       	ldi	r18, 0xFF	; 255
     be6:	82 0e       	add	r8, r18
     be8:	21 e0       	ldi	r18, 0x01	; 1
     bea:	92 1e       	adc	r9, r18
     bec:	a1 1c       	adc	r10, r1
     bee:	b1 1c       	adc	r11, r1
     bf0:	88 0d       	add	r24, r8
     bf2:	99 1d       	adc	r25, r9
     bf4:	aa 1d       	adc	r26, r10
     bf6:	bb 1d       	adc	r27, r11
     bf8:	39 e0       	ldi	r19, 0x09	; 9
     bfa:	b6 95       	lsr	r27
     bfc:	a7 95       	ror	r26
     bfe:	97 95       	ror	r25
     c00:	87 95       	ror	r24
     c02:	3a 95       	dec	r19
     c04:	d1 f7       	brne	.-12     	; 0xbfa <__stack+0xfb>
     c06:	48 16       	cp	r4, r24
     c08:	59 06       	cpc	r5, r25
     c0a:	6a 06       	cpc	r6, r26
     c0c:	7b 06       	cpc	r7, r27
     c0e:	08 f4       	brcc	.+2      	; 0xc12 <__stack+0x113>
     c10:	93 cd       	rjmp	.-1242   	; 0x738 <find_volume+0xf4>
     c12:	8f ef       	ldi	r24, 0xFF	; 255
     c14:	9f ef       	ldi	r25, 0xFF	; 255
     c16:	dc 01       	movw	r26, r24
     c18:	f8 01       	movw	r30, r16
     c1a:	86 87       	std	Z+14, r24	; 0x0e
     c1c:	97 87       	std	Z+15, r25	; 0x0f
     c1e:	a0 8b       	std	Z+16, r26	; 0x10
     c20:	b1 8b       	std	Z+17, r27	; 0x11
     c22:	82 87       	std	Z+10, r24	; 0x0a
     c24:	93 87       	std	Z+11, r25	; 0x0b
     c26:	a4 87       	std	Z+12, r26	; 0x0c
     c28:	b5 87       	std	Z+13, r27	; 0x0d
     c2a:	80 e8       	ldi	r24, 0x80	; 128
     c2c:	85 83       	std	Z+5, r24	; 0x05
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	cb ce       	rjmp	.-618    	; 0x9c8 <find_volume+0x384>

00000c32 <get_fat.part.4>:
     c32:	af 92       	push	r10
     c34:	bf 92       	push	r11
     c36:	cf 92       	push	r12
     c38:	df 92       	push	r13
     c3a:	ef 92       	push	r14
     c3c:	ff 92       	push	r15
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	ec 01       	movw	r28, r24
     c48:	6a 01       	movw	r12, r20
     c4a:	7b 01       	movw	r14, r22
     c4c:	88 81       	ld	r24, Y
     c4e:	82 30       	cpi	r24, 0x02	; 2
     c50:	09 f4       	brne	.+2      	; 0xc54 <get_fat.part.4+0x22>
     c52:	5a c0       	rjmp	.+180    	; 0xd08 <get_fat.part.4+0xd6>
     c54:	83 30       	cpi	r24, 0x03	; 3
     c56:	61 f1       	breq	.+88     	; 0xcb0 <get_fat.part.4+0x7e>
     c58:	81 30       	cpi	r24, 0x01	; 1
     c5a:	79 f0       	breq	.+30     	; 0xc7a <get_fat.part.4+0x48>
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	df 90       	pop	r13
     c72:	cf 90       	pop	r12
     c74:	bf 90       	pop	r11
     c76:	af 90       	pop	r10
     c78:	08 95       	ret
     c7a:	8a 01       	movw	r16, r20
     c7c:	16 95       	lsr	r17
     c7e:	07 95       	ror	r16
     c80:	0c 0d       	add	r16, r12
     c82:	1d 1d       	adc	r17, r13
     c84:	c8 01       	movw	r24, r16
     c86:	89 2f       	mov	r24, r25
     c88:	99 27       	eor	r25, r25
     c8a:	86 95       	lsr	r24
     c8c:	4e 8d       	ldd	r20, Y+30	; 0x1e
     c8e:	5f 8d       	ldd	r21, Y+31	; 0x1f
     c90:	68 a1       	ldd	r22, Y+32	; 0x20
     c92:	79 a1       	ldd	r23, Y+33	; 0x21
     c94:	48 0f       	add	r20, r24
     c96:	59 1f       	adc	r21, r25
     c98:	61 1d       	adc	r22, r1
     c9a:	71 1d       	adc	r23, r1
     c9c:	ce 01       	movw	r24, r28
     c9e:	0e 94 a8 02 	call	0x550	; 0x550 <move_window>
     ca2:	88 23       	and	r24, r24
     ca4:	09 f4       	brne	.+2      	; 0xca8 <get_fat.part.4+0x76>
     ca6:	52 c0       	rjmp	.+164    	; 0xd4c <get_fat.part.4+0x11a>
     ca8:	6f ef       	ldi	r22, 0xFF	; 255
     caa:	7f ef       	ldi	r23, 0xFF	; 255
     cac:	cb 01       	movw	r24, r22
     cae:	da cf       	rjmp	.-76     	; 0xc64 <get_fat.part.4+0x32>
     cb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cb2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     cb4:	a8 a1       	ldd	r26, Y+32	; 0x20
     cb6:	b9 a1       	ldd	r27, Y+33	; 0x21
     cb8:	27 e0       	ldi	r18, 0x07	; 7
     cba:	76 95       	lsr	r23
     cbc:	67 95       	ror	r22
     cbe:	57 95       	ror	r21
     cc0:	47 95       	ror	r20
     cc2:	2a 95       	dec	r18
     cc4:	d1 f7       	brne	.-12     	; 0xcba <get_fat.part.4+0x88>
     cc6:	48 0f       	add	r20, r24
     cc8:	59 1f       	adc	r21, r25
     cca:	6a 1f       	adc	r22, r26
     ccc:	7b 1f       	adc	r23, r27
     cce:	ce 01       	movw	r24, r28
     cd0:	0e 94 a8 02 	call	0x550	; 0x550 <move_window>
     cd4:	81 11       	cpse	r24, r1
     cd6:	e8 cf       	rjmp	.-48     	; 0xca8 <get_fat.part.4+0x76>
     cd8:	cc 0c       	add	r12, r12
     cda:	dd 1c       	adc	r13, r13
     cdc:	ee 1c       	adc	r14, r14
     cde:	ff 1c       	adc	r15, r15
     ce0:	cc 0c       	add	r12, r12
     ce2:	dd 1c       	adc	r13, r13
     ce4:	ee 1c       	adc	r14, r14
     ce6:	ff 1c       	adc	r15, r15
     ce8:	8c ef       	ldi	r24, 0xFC	; 252
     cea:	c8 22       	and	r12, r24
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	d8 22       	and	r13, r24
     cf0:	ee 24       	eor	r14, r14
     cf2:	ff 24       	eor	r15, r15
     cf4:	cc 0d       	add	r28, r12
     cf6:	dd 1d       	adc	r29, r13
     cf8:	8e a5       	ldd	r24, Y+46	; 0x2e
     cfa:	9f a5       	ldd	r25, Y+47	; 0x2f
     cfc:	a8 a9       	ldd	r26, Y+48	; 0x30
     cfe:	b9 a9       	ldd	r27, Y+49	; 0x31
     d00:	bc 01       	movw	r22, r24
     d02:	cd 01       	movw	r24, r26
     d04:	9f 70       	andi	r25, 0x0F	; 15
     d06:	ae cf       	rjmp	.-164    	; 0xc64 <get_fat.part.4+0x32>
     d08:	77 27       	eor	r23, r23
     d0a:	6f 2d       	mov	r22, r15
     d0c:	5e 2d       	mov	r21, r14
     d0e:	4d 2d       	mov	r20, r13
     d10:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d12:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d14:	a8 a1       	ldd	r26, Y+32	; 0x20
     d16:	b9 a1       	ldd	r27, Y+33	; 0x21
     d18:	48 0f       	add	r20, r24
     d1a:	59 1f       	adc	r21, r25
     d1c:	6a 1f       	adc	r22, r26
     d1e:	7b 1f       	adc	r23, r27
     d20:	ce 01       	movw	r24, r28
     d22:	0e 94 a8 02 	call	0x550	; 0x550 <move_window>
     d26:	81 11       	cpse	r24, r1
     d28:	bf cf       	rjmp	.-130    	; 0xca8 <get_fat.part.4+0x76>
     d2a:	cc 0c       	add	r12, r12
     d2c:	dd 1c       	adc	r13, r13
     d2e:	ee 1c       	adc	r14, r14
     d30:	ff 1c       	adc	r15, r15
     d32:	e8 94       	clt
     d34:	c0 f8       	bld	r12, 0
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	d8 22       	and	r13, r24
     d3a:	ee 24       	eor	r14, r14
     d3c:	ff 24       	eor	r15, r15
     d3e:	cc 0d       	add	r28, r12
     d40:	dd 1d       	adc	r29, r13
     d42:	6e a5       	ldd	r22, Y+46	; 0x2e
     d44:	7f a5       	ldd	r23, Y+47	; 0x2f
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	8c cf       	rjmp	.-232    	; 0xc64 <get_fat.part.4+0x32>
     d4c:	58 01       	movw	r10, r16
     d4e:	8f ef       	ldi	r24, 0xFF	; 255
     d50:	a8 1a       	sub	r10, r24
     d52:	b8 0a       	sbc	r11, r24
     d54:	11 70       	andi	r17, 0x01	; 1
     d56:	fe 01       	movw	r30, r28
     d58:	e0 0f       	add	r30, r16
     d5a:	f1 1f       	adc	r31, r17
     d5c:	16 a5       	ldd	r17, Z+46	; 0x2e
     d5e:	c5 01       	movw	r24, r10
     d60:	89 2f       	mov	r24, r25
     d62:	99 27       	eor	r25, r25
     d64:	86 95       	lsr	r24
     d66:	4e 8d       	ldd	r20, Y+30	; 0x1e
     d68:	5f 8d       	ldd	r21, Y+31	; 0x1f
     d6a:	68 a1       	ldd	r22, Y+32	; 0x20
     d6c:	79 a1       	ldd	r23, Y+33	; 0x21
     d6e:	48 0f       	add	r20, r24
     d70:	59 1f       	adc	r21, r25
     d72:	61 1d       	adc	r22, r1
     d74:	71 1d       	adc	r23, r1
     d76:	ce 01       	movw	r24, r28
     d78:	0e 94 a8 02 	call	0x550	; 0x550 <move_window>
     d7c:	81 11       	cpse	r24, r1
     d7e:	94 cf       	rjmp	.-216    	; 0xca8 <get_fat.part.4+0x76>
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	b8 22       	and	r11, r24
     d84:	ca 0d       	add	r28, r10
     d86:	db 1d       	adc	r29, r11
     d88:	8e a5       	ldd	r24, Y+46	; 0x2e
     d8a:	61 2f       	mov	r22, r17
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	78 2b       	or	r23, r24
     d90:	c0 fe       	sbrs	r12, 0
     d92:	09 c0       	rjmp	.+18     	; 0xda6 <get_fat.part.4+0x174>
     d94:	72 95       	swap	r23
     d96:	62 95       	swap	r22
     d98:	6f 70       	andi	r22, 0x0F	; 15
     d9a:	67 27       	eor	r22, r23
     d9c:	7f 70       	andi	r23, 0x0F	; 15
     d9e:	67 27       	eor	r22, r23
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	5f cf       	rjmp	.-322    	; 0xc64 <get_fat.part.4+0x32>
     da6:	7f 70       	andi	r23, 0x0F	; 15
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	5b cf       	rjmp	.-330    	; 0xc64 <get_fat.part.4+0x32>

00000dae <put_fat.part.5>:
     dae:	4f 92       	push	r4
     db0:	5f 92       	push	r5
     db2:	6f 92       	push	r6
     db4:	7f 92       	push	r7
     db6:	8f 92       	push	r8
     db8:	9f 92       	push	r9
     dba:	af 92       	push	r10
     dbc:	bf 92       	push	r11
     dbe:	cf 92       	push	r12
     dc0:	df 92       	push	r13
     dc2:	ef 92       	push	r14
     dc4:	ff 92       	push	r15
     dc6:	0f 93       	push	r16
     dc8:	1f 93       	push	r17
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	ec 01       	movw	r28, r24
     dd0:	6a 01       	movw	r12, r20
     dd2:	7b 01       	movw	r14, r22
     dd4:	28 01       	movw	r4, r16
     dd6:	39 01       	movw	r6, r18
     dd8:	88 80       	ld	r8, Y
     dda:	32 e0       	ldi	r19, 0x02	; 2
     ddc:	83 16       	cp	r8, r19
     dde:	09 f4       	brne	.+2      	; 0xde2 <put_fat.part.5+0x34>
     de0:	a0 c0       	rjmp	.+320    	; 0xf22 <put_fat.part.5+0x174>
     de2:	83 e0       	ldi	r24, 0x03	; 3
     de4:	88 16       	cp	r8, r24
     de6:	09 f4       	brne	.+2      	; 0xdea <put_fat.part.5+0x3c>
     de8:	60 c0       	rjmp	.+192    	; 0xeaa <put_fat.part.5+0xfc>
     dea:	31 e0       	ldi	r19, 0x01	; 1
     dec:	83 16       	cp	r8, r19
     dee:	a1 f0       	breq	.+40     	; 0xe18 <put_fat.part.5+0x6a>
     df0:	92 e0       	ldi	r25, 0x02	; 2
     df2:	99 2e       	mov	r9, r25
     df4:	89 2d       	mov	r24, r9
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	ff 90       	pop	r15
     e00:	ef 90       	pop	r14
     e02:	df 90       	pop	r13
     e04:	cf 90       	pop	r12
     e06:	bf 90       	pop	r11
     e08:	af 90       	pop	r10
     e0a:	9f 90       	pop	r9
     e0c:	8f 90       	pop	r8
     e0e:	7f 90       	pop	r7
     e10:	6f 90       	pop	r6
     e12:	5f 90       	pop	r5
     e14:	4f 90       	pop	r4
     e16:	08 95       	ret
     e18:	8a 01       	movw	r16, r20
     e1a:	16 95       	lsr	r17
     e1c:	07 95       	ror	r16
     e1e:	04 0f       	add	r16, r20
     e20:	15 1f       	adc	r17, r21
     e22:	c8 01       	movw	r24, r16
     e24:	89 2f       	mov	r24, r25
     e26:	99 27       	eor	r25, r25
     e28:	86 95       	lsr	r24
     e2a:	4e 8d       	ldd	r20, Y+30	; 0x1e
     e2c:	5f 8d       	ldd	r21, Y+31	; 0x1f
     e2e:	68 a1       	ldd	r22, Y+32	; 0x20
     e30:	79 a1       	ldd	r23, Y+33	; 0x21
     e32:	48 0f       	add	r20, r24
     e34:	59 1f       	adc	r21, r25
     e36:	61 1d       	adc	r22, r1
     e38:	71 1d       	adc	r23, r1
     e3a:	ce 01       	movw	r24, r28
     e3c:	0e 94 a8 02 	call	0x550	; 0x550 <move_window>
     e40:	98 2e       	mov	r9, r24
     e42:	81 11       	cpse	r24, r1
     e44:	d7 cf       	rjmp	.-82     	; 0xdf4 <put_fat.part.5+0x46>
     e46:	58 01       	movw	r10, r16
     e48:	8f ef       	ldi	r24, 0xFF	; 255
     e4a:	a8 1a       	sub	r10, r24
     e4c:	b8 0a       	sbc	r11, r24
     e4e:	11 70       	andi	r17, 0x01	; 1
     e50:	fe 01       	movw	r30, r28
     e52:	e0 0f       	add	r30, r16
     e54:	f1 1f       	adc	r31, r17
     e56:	c0 fe       	sbrs	r12, 0
     e58:	8b c0       	rjmp	.+278    	; 0xf70 <put_fat.part.5+0x1c2>
     e5a:	86 a5       	ldd	r24, Z+46	; 0x2e
     e5c:	28 2f       	mov	r18, r24
     e5e:	2f 70       	andi	r18, 0x0F	; 15
     e60:	30 e1       	ldi	r19, 0x10	; 16
     e62:	43 9e       	mul	r4, r19
     e64:	c0 01       	movw	r24, r0
     e66:	11 24       	eor	r1, r1
     e68:	82 2b       	or	r24, r18
     e6a:	86 a7       	std	Z+46, r24	; 0x2e
     e6c:	8c 82       	std	Y+4, r8	; 0x04
     e6e:	4e 8d       	ldd	r20, Y+30	; 0x1e
     e70:	5f 8d       	ldd	r21, Y+31	; 0x1f
     e72:	68 a1       	ldd	r22, Y+32	; 0x20
     e74:	79 a1       	ldd	r23, Y+33	; 0x21
     e76:	c5 01       	movw	r24, r10
     e78:	89 2f       	mov	r24, r25
     e7a:	99 27       	eor	r25, r25
     e7c:	86 95       	lsr	r24
     e7e:	48 0f       	add	r20, r24
     e80:	59 1f       	adc	r21, r25
     e82:	61 1d       	adc	r22, r1
     e84:	71 1d       	adc	r23, r1
     e86:	ce 01       	movw	r24, r28
     e88:	0e 94 a8 02 	call	0x550	; 0x550 <move_window>
     e8c:	81 11       	cpse	r24, r1
     e8e:	83 c0       	rjmp	.+262    	; 0xf96 <put_fat.part.5+0x1e8>
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	b8 22       	and	r11, r24
     e94:	84 e0       	ldi	r24, 0x04	; 4
     e96:	76 94       	lsr	r7
     e98:	67 94       	ror	r6
     e9a:	57 94       	ror	r5
     e9c:	47 94       	ror	r4
     e9e:	8a 95       	dec	r24
     ea0:	d1 f7       	brne	.-12     	; 0xe96 <put_fat.part.5+0xe8>
     ea2:	fe 01       	movw	r30, r28
     ea4:	ea 0d       	add	r30, r10
     ea6:	fb 1d       	adc	r31, r11
     ea8:	83 c0       	rjmp	.+262    	; 0xfb0 <put_fat.part.5+0x202>
     eaa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eac:	9f 8d       	ldd	r25, Y+31	; 0x1f
     eae:	a8 a1       	ldd	r26, Y+32	; 0x20
     eb0:	b9 a1       	ldd	r27, Y+33	; 0x21
     eb2:	37 e0       	ldi	r19, 0x07	; 7
     eb4:	76 95       	lsr	r23
     eb6:	67 95       	ror	r22
     eb8:	57 95       	ror	r21
     eba:	47 95       	ror	r20
     ebc:	3a 95       	dec	r19
     ebe:	d1 f7       	brne	.-12     	; 0xeb4 <put_fat.part.5+0x106>
     ec0:	48 0f       	add	r20, r24
     ec2:	59 1f       	adc	r21, r25
     ec4:	6a 1f       	adc	r22, r26
     ec6:	7b 1f       	adc	r23, r27
     ec8:	ce 01       	movw	r24, r28
     eca:	0e 94 a8 02 	call	0x550	; 0x550 <move_window>
     ece:	98 2e       	mov	r9, r24
     ed0:	81 11       	cpse	r24, r1
     ed2:	90 cf       	rjmp	.-224    	; 0xdf4 <put_fat.part.5+0x46>
     ed4:	cc 0c       	add	r12, r12
     ed6:	dd 1c       	adc	r13, r13
     ed8:	ee 1c       	adc	r14, r14
     eda:	ff 1c       	adc	r15, r15
     edc:	cc 0c       	add	r12, r12
     ede:	dd 1c       	adc	r13, r13
     ee0:	ee 1c       	adc	r14, r14
     ee2:	ff 1c       	adc	r15, r15
     ee4:	8c ef       	ldi	r24, 0xFC	; 252
     ee6:	c8 22       	and	r12, r24
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	d8 22       	and	r13, r24
     eec:	ee 24       	eor	r14, r14
     eee:	ff 24       	eor	r15, r15
     ef0:	3e e2       	ldi	r19, 0x2E	; 46
     ef2:	c3 0e       	add	r12, r19
     ef4:	d1 1c       	adc	r13, r1
     ef6:	fe 01       	movw	r30, r28
     ef8:	ec 0d       	add	r30, r12
     efa:	fd 1d       	adc	r31, r13
     efc:	80 81       	ld	r24, Z
     efe:	91 81       	ldd	r25, Z+1	; 0x01
     f00:	a2 81       	ldd	r26, Z+2	; 0x02
     f02:	b3 81       	ldd	r27, Z+3	; 0x03
     f04:	88 27       	eor	r24, r24
     f06:	99 27       	eor	r25, r25
     f08:	aa 27       	eor	r26, r26
     f0a:	b0 7f       	andi	r27, 0xF0	; 240
     f0c:	48 2a       	or	r4, r24
     f0e:	59 2a       	or	r5, r25
     f10:	6a 2a       	or	r6, r26
     f12:	7b 2a       	or	r7, r27
     f14:	40 82       	st	Z, r4
     f16:	51 82       	std	Z+1, r5	; 0x01
     f18:	62 82       	std	Z+2, r6	; 0x02
     f1a:	73 82       	std	Z+3, r7	; 0x03
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	8c 83       	std	Y+4, r24	; 0x04
     f20:	69 cf       	rjmp	.-302    	; 0xdf4 <put_fat.part.5+0x46>
     f22:	77 27       	eor	r23, r23
     f24:	6f 2d       	mov	r22, r15
     f26:	5e 2d       	mov	r21, r14
     f28:	4d 2d       	mov	r20, r13
     f2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f2c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f2e:	a8 a1       	ldd	r26, Y+32	; 0x20
     f30:	b9 a1       	ldd	r27, Y+33	; 0x21
     f32:	48 0f       	add	r20, r24
     f34:	59 1f       	adc	r21, r25
     f36:	6a 1f       	adc	r22, r26
     f38:	7b 1f       	adc	r23, r27
     f3a:	ce 01       	movw	r24, r28
     f3c:	0e 94 a8 02 	call	0x550	; 0x550 <move_window>
     f40:	98 2e       	mov	r9, r24
     f42:	81 11       	cpse	r24, r1
     f44:	57 cf       	rjmp	.-338    	; 0xdf4 <put_fat.part.5+0x46>
     f46:	cc 0c       	add	r12, r12
     f48:	dd 1c       	adc	r13, r13
     f4a:	ee 1c       	adc	r14, r14
     f4c:	ff 1c       	adc	r15, r15
     f4e:	e8 94       	clt
     f50:	c0 f8       	bld	r12, 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	d8 22       	and	r13, r24
     f56:	ee 24       	eor	r14, r14
     f58:	ff 24       	eor	r15, r15
     f5a:	3e e2       	ldi	r19, 0x2E	; 46
     f5c:	c3 0e       	add	r12, r19
     f5e:	d1 1c       	adc	r13, r1
     f60:	fe 01       	movw	r30, r28
     f62:	ec 0d       	add	r30, r12
     f64:	fd 1d       	adc	r31, r13
     f66:	51 82       	std	Z+1, r5	; 0x01
     f68:	40 82       	st	Z, r4
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	8c 83       	std	Y+4, r24	; 0x04
     f6e:	42 cf       	rjmp	.-380    	; 0xdf4 <put_fat.part.5+0x46>
     f70:	46 a6       	std	Z+46, r4	; 0x2e
     f72:	8c 82       	std	Y+4, r8	; 0x04
     f74:	4e 8d       	ldd	r20, Y+30	; 0x1e
     f76:	5f 8d       	ldd	r21, Y+31	; 0x1f
     f78:	68 a1       	ldd	r22, Y+32	; 0x20
     f7a:	79 a1       	ldd	r23, Y+33	; 0x21
     f7c:	c5 01       	movw	r24, r10
     f7e:	89 2f       	mov	r24, r25
     f80:	99 27       	eor	r25, r25
     f82:	86 95       	lsr	r24
     f84:	48 0f       	add	r20, r24
     f86:	59 1f       	adc	r21, r25
     f88:	61 1d       	adc	r22, r1
     f8a:	71 1d       	adc	r23, r1
     f8c:	ce 01       	movw	r24, r28
     f8e:	0e 94 a8 02 	call	0x550	; 0x550 <move_window>
     f92:	88 23       	and	r24, r24
     f94:	11 f0       	breq	.+4      	; 0xf9a <put_fat.part.5+0x1ec>
     f96:	98 2e       	mov	r9, r24
     f98:	2d cf       	rjmp	.-422    	; 0xdf4 <put_fat.part.5+0x46>
     f9a:	31 e0       	ldi	r19, 0x01	; 1
     f9c:	b3 22       	and	r11, r19
     f9e:	fe 01       	movw	r30, r28
     fa0:	ea 0d       	add	r30, r10
     fa2:	fb 1d       	adc	r31, r11
     fa4:	96 a5       	ldd	r25, Z+46	; 0x2e
     fa6:	90 7f       	andi	r25, 0xF0	; 240
     fa8:	85 2d       	mov	r24, r5
     faa:	8f 70       	andi	r24, 0x0F	; 15
     fac:	49 2e       	mov	r4, r25
     fae:	48 2a       	or	r4, r24
     fb0:	46 a6       	std	Z+46, r4	; 0x2e
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	8c 83       	std	Y+4, r24	; 0x04
     fb6:	1e cf       	rjmp	.-452    	; 0xdf4 <put_fat.part.5+0x46>

00000fb8 <create_chain>:
     fb8:	4f 92       	push	r4
     fba:	5f 92       	push	r5
     fbc:	6f 92       	push	r6
     fbe:	7f 92       	push	r7
     fc0:	8f 92       	push	r8
     fc2:	9f 92       	push	r9
     fc4:	af 92       	push	r10
     fc6:	bf 92       	push	r11
     fc8:	cf 92       	push	r12
     fca:	df 92       	push	r13
     fcc:	ef 92       	push	r14
     fce:	ff 92       	push	r15
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	ec 01       	movw	r28, r24
     fda:	2a 01       	movw	r4, r20
     fdc:	3b 01       	movw	r6, r22
     fde:	41 15       	cp	r20, r1
     fe0:	51 05       	cpc	r21, r1
     fe2:	61 05       	cpc	r22, r1
     fe4:	71 05       	cpc	r23, r1
     fe6:	09 f0       	breq	.+2      	; 0xfea <create_chain+0x32>
     fe8:	6b c0       	rjmp	.+214    	; 0x10c0 <create_chain+0x108>
     fea:	8a 84       	ldd	r8, Y+10	; 0x0a
     fec:	9b 84       	ldd	r9, Y+11	; 0x0b
     fee:	ac 84       	ldd	r10, Y+12	; 0x0c
     ff0:	bd 84       	ldd	r11, Y+13	; 0x0d
     ff2:	8a 89       	ldd	r24, Y+18	; 0x12
     ff4:	9b 89       	ldd	r25, Y+19	; 0x13
     ff6:	ac 89       	ldd	r26, Y+20	; 0x14
     ff8:	bd 89       	ldd	r27, Y+21	; 0x15
     ffa:	81 14       	cp	r8, r1
     ffc:	91 04       	cpc	r9, r1
     ffe:	a1 04       	cpc	r10, r1
    1000:	b1 04       	cpc	r11, r1
    1002:	09 f0       	breq	.+2      	; 0x1006 <create_chain+0x4e>
    1004:	89 c0       	rjmp	.+274    	; 0x1118 <create_chain+0x160>
    1006:	81 2c       	mov	r8, r1
    1008:	91 2c       	mov	r9, r1
    100a:	54 01       	movw	r10, r8
    100c:	83 94       	inc	r8
    100e:	75 01       	movw	r14, r10
    1010:	64 01       	movw	r12, r8
    1012:	31 c0       	rjmp	.+98     	; 0x1076 <create_chain+0xbe>
    1014:	22 e0       	ldi	r18, 0x02	; 2
    1016:	82 16       	cp	r8, r18
    1018:	91 04       	cpc	r9, r1
    101a:	a1 04       	cpc	r10, r1
    101c:	b1 04       	cpc	r11, r1
    101e:	08 f4       	brcc	.+2      	; 0x1022 <create_chain+0x6a>
    1020:	82 c0       	rjmp	.+260    	; 0x1126 <create_chain+0x16e>
    1022:	03 97       	sbiw	r24, 0x03	; 3
    1024:	a1 05       	cpc	r26, r1
    1026:	b1 05       	cpc	r27, r1
    1028:	b0 f1       	brcs	.+108    	; 0x1096 <create_chain+0xde>
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	c8 2e       	mov	r12, r24
    102e:	d1 2c       	mov	r13, r1
    1030:	e1 2c       	mov	r14, r1
    1032:	f1 2c       	mov	r15, r1
    1034:	b7 01       	movw	r22, r14
    1036:	a6 01       	movw	r20, r12
    1038:	ce 01       	movw	r24, r28
    103a:	0e 94 19 06 	call	0xc32	; 0xc32 <get_fat.part.4>
    103e:	61 15       	cp	r22, r1
    1040:	71 05       	cpc	r23, r1
    1042:	81 05       	cpc	r24, r1
    1044:	91 05       	cpc	r25, r1
    1046:	09 f4       	brne	.+2      	; 0x104a <create_chain+0x92>
    1048:	7b c0       	rjmp	.+246    	; 0x1140 <create_chain+0x188>
    104a:	6f 3f       	cpi	r22, 0xFF	; 255
    104c:	2f ef       	ldi	r18, 0xFF	; 255
    104e:	72 07       	cpc	r23, r18
    1050:	82 07       	cpc	r24, r18
    1052:	92 07       	cpc	r25, r18
    1054:	09 f4       	brne	.+2      	; 0x1058 <create_chain+0xa0>
    1056:	6f c0       	rjmp	.+222    	; 0x1136 <create_chain+0x17e>
    1058:	61 30       	cpi	r22, 0x01	; 1
    105a:	71 05       	cpc	r23, r1
    105c:	81 05       	cpc	r24, r1
    105e:	91 05       	cpc	r25, r1
    1060:	d1 f0       	breq	.+52     	; 0x1096 <create_chain+0xde>
    1062:	8c 14       	cp	r8, r12
    1064:	9d 04       	cpc	r9, r13
    1066:	ae 04       	cpc	r10, r14
    1068:	bf 04       	cpc	r11, r15
    106a:	09 f4       	brne	.+2      	; 0x106e <create_chain+0xb6>
    106c:	5c c0       	rjmp	.+184    	; 0x1126 <create_chain+0x16e>
    106e:	8a 89       	ldd	r24, Y+18	; 0x12
    1070:	9b 89       	ldd	r25, Y+19	; 0x13
    1072:	ac 89       	ldd	r26, Y+20	; 0x14
    1074:	bd 89       	ldd	r27, Y+21	; 0x15
    1076:	2f ef       	ldi	r18, 0xFF	; 255
    1078:	c2 1a       	sub	r12, r18
    107a:	d2 0a       	sbc	r13, r18
    107c:	e2 0a       	sbc	r14, r18
    107e:	f2 0a       	sbc	r15, r18
    1080:	c8 16       	cp	r12, r24
    1082:	d9 06       	cpc	r13, r25
    1084:	ea 06       	cpc	r14, r26
    1086:	fb 06       	cpc	r15, r27
    1088:	28 f6       	brcc	.-118    	; 0x1014 <create_chain+0x5c>
    108a:	82 e0       	ldi	r24, 0x02	; 2
    108c:	c8 16       	cp	r12, r24
    108e:	d1 04       	cpc	r13, r1
    1090:	e1 04       	cpc	r14, r1
    1092:	f1 04       	cpc	r15, r1
    1094:	78 f6       	brcc	.-98     	; 0x1034 <create_chain+0x7c>
    1096:	61 e0       	ldi	r22, 0x01	; 1
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	df 90       	pop	r13
    10ac:	cf 90       	pop	r12
    10ae:	bf 90       	pop	r11
    10b0:	af 90       	pop	r10
    10b2:	9f 90       	pop	r9
    10b4:	8f 90       	pop	r8
    10b6:	7f 90       	pop	r7
    10b8:	6f 90       	pop	r6
    10ba:	5f 90       	pop	r5
    10bc:	4f 90       	pop	r4
    10be:	08 95       	ret
    10c0:	42 30       	cpi	r20, 0x02	; 2
    10c2:	51 05       	cpc	r21, r1
    10c4:	61 05       	cpc	r22, r1
    10c6:	71 05       	cpc	r23, r1
    10c8:	30 f3       	brcs	.-52     	; 0x1096 <create_chain+0xde>
    10ca:	8a 89       	ldd	r24, Y+18	; 0x12
    10cc:	9b 89       	ldd	r25, Y+19	; 0x13
    10ce:	ac 89       	ldd	r26, Y+20	; 0x14
    10d0:	bd 89       	ldd	r27, Y+21	; 0x15
    10d2:	48 17       	cp	r20, r24
    10d4:	59 07       	cpc	r21, r25
    10d6:	6a 07       	cpc	r22, r26
    10d8:	7b 07       	cpc	r23, r27
    10da:	e8 f6       	brcc	.-70     	; 0x1096 <create_chain+0xde>
    10dc:	ce 01       	movw	r24, r28
    10de:	0e 94 19 06 	call	0xc32	; 0xc32 <get_fat.part.4>
    10e2:	6b 01       	movw	r12, r22
    10e4:	7c 01       	movw	r14, r24
    10e6:	82 e0       	ldi	r24, 0x02	; 2
    10e8:	c8 16       	cp	r12, r24
    10ea:	d1 04       	cpc	r13, r1
    10ec:	e1 04       	cpc	r14, r1
    10ee:	f1 04       	cpc	r15, r1
    10f0:	90 f2       	brcs	.-92     	; 0x1096 <create_chain+0xde>
    10f2:	2f ef       	ldi	r18, 0xFF	; 255
    10f4:	c2 16       	cp	r12, r18
    10f6:	d2 06       	cpc	r13, r18
    10f8:	e2 06       	cpc	r14, r18
    10fa:	f2 06       	cpc	r15, r18
    10fc:	e1 f0       	breq	.+56     	; 0x1136 <create_chain+0x17e>
    10fe:	8a 89       	ldd	r24, Y+18	; 0x12
    1100:	9b 89       	ldd	r25, Y+19	; 0x13
    1102:	ac 89       	ldd	r26, Y+20	; 0x14
    1104:	bd 89       	ldd	r27, Y+21	; 0x15
    1106:	c8 16       	cp	r12, r24
    1108:	d9 06       	cpc	r13, r25
    110a:	ea 06       	cpc	r14, r26
    110c:	fb 06       	cpc	r15, r27
    110e:	08 f4       	brcc	.+2      	; 0x1112 <create_chain+0x15a>
    1110:	66 c0       	rjmp	.+204    	; 0x11de <create_chain+0x226>
    1112:	53 01       	movw	r10, r6
    1114:	42 01       	movw	r8, r4
    1116:	7b cf       	rjmp	.-266    	; 0x100e <create_chain+0x56>
    1118:	88 16       	cp	r8, r24
    111a:	99 06       	cpc	r9, r25
    111c:	aa 06       	cpc	r10, r26
    111e:	bb 06       	cpc	r11, r27
    1120:	08 f4       	brcc	.+2      	; 0x1124 <create_chain+0x16c>
    1122:	75 cf       	rjmp	.-278    	; 0x100e <create_chain+0x56>
    1124:	70 cf       	rjmp	.-288    	; 0x1006 <create_chain+0x4e>
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	b7 cf       	rjmp	.-146    	; 0x109e <create_chain+0xe6>
    1130:	81 30       	cpi	r24, 0x01	; 1
    1132:	09 f0       	breq	.+2      	; 0x1136 <create_chain+0x17e>
    1134:	b0 cf       	rjmp	.-160    	; 0x1096 <create_chain+0xde>
    1136:	6f ef       	ldi	r22, 0xFF	; 255
    1138:	7f ef       	ldi	r23, 0xFF	; 255
    113a:	8f ef       	ldi	r24, 0xFF	; 255
    113c:	9f ef       	ldi	r25, 0xFF	; 255
    113e:	af cf       	rjmp	.-162    	; 0x109e <create_chain+0xe6>
    1140:	8a 89       	ldd	r24, Y+18	; 0x12
    1142:	9b 89       	ldd	r25, Y+19	; 0x13
    1144:	ac 89       	ldd	r26, Y+20	; 0x14
    1146:	bd 89       	ldd	r27, Y+21	; 0x15
    1148:	c8 16       	cp	r12, r24
    114a:	d9 06       	cpc	r13, r25
    114c:	ea 06       	cpc	r14, r26
    114e:	fb 06       	cpc	r15, r27
    1150:	08 f0       	brcs	.+2      	; 0x1154 <create_chain+0x19c>
    1152:	a1 cf       	rjmp	.-190    	; 0x1096 <create_chain+0xde>
    1154:	0f ef       	ldi	r16, 0xFF	; 255
    1156:	1f ef       	ldi	r17, 0xFF	; 255
    1158:	2f ef       	ldi	r18, 0xFF	; 255
    115a:	3f e0       	ldi	r19, 0x0F	; 15
    115c:	b7 01       	movw	r22, r14
    115e:	a6 01       	movw	r20, r12
    1160:	ce 01       	movw	r24, r28
    1162:	0e 94 d7 06 	call	0xdae	; 0xdae <put_fat.part.5>
    1166:	81 11       	cpse	r24, r1
    1168:	e3 cf       	rjmp	.-58     	; 0x1130 <create_chain+0x178>
    116a:	41 14       	cp	r4, r1
    116c:	51 04       	cpc	r5, r1
    116e:	61 04       	cpc	r6, r1
    1170:	71 04       	cpc	r7, r1
    1172:	d1 f0       	breq	.+52     	; 0x11a8 <create_chain+0x1f0>
    1174:	82 e0       	ldi	r24, 0x02	; 2
    1176:	48 16       	cp	r4, r24
    1178:	51 04       	cpc	r5, r1
    117a:	61 04       	cpc	r6, r1
    117c:	71 04       	cpc	r7, r1
    117e:	08 f4       	brcc	.+2      	; 0x1182 <create_chain+0x1ca>
    1180:	8a cf       	rjmp	.-236    	; 0x1096 <create_chain+0xde>
    1182:	8a 89       	ldd	r24, Y+18	; 0x12
    1184:	9b 89       	ldd	r25, Y+19	; 0x13
    1186:	ac 89       	ldd	r26, Y+20	; 0x14
    1188:	bd 89       	ldd	r27, Y+21	; 0x15
    118a:	48 16       	cp	r4, r24
    118c:	59 06       	cpc	r5, r25
    118e:	6a 06       	cpc	r6, r26
    1190:	7b 06       	cpc	r7, r27
    1192:	08 f0       	brcs	.+2      	; 0x1196 <create_chain+0x1de>
    1194:	80 cf       	rjmp	.-256    	; 0x1096 <create_chain+0xde>
    1196:	97 01       	movw	r18, r14
    1198:	86 01       	movw	r16, r12
    119a:	b3 01       	movw	r22, r6
    119c:	a2 01       	movw	r20, r4
    119e:	ce 01       	movw	r24, r28
    11a0:	0e 94 d7 06 	call	0xdae	; 0xdae <put_fat.part.5>
    11a4:	81 11       	cpse	r24, r1
    11a6:	c4 cf       	rjmp	.-120    	; 0x1130 <create_chain+0x178>
    11a8:	ca 86       	std	Y+10, r12	; 0x0a
    11aa:	db 86       	std	Y+11, r13	; 0x0b
    11ac:	ec 86       	std	Y+12, r14	; 0x0c
    11ae:	fd 86       	std	Y+13, r15	; 0x0d
    11b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    11b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    11b4:	a8 89       	ldd	r26, Y+16	; 0x10
    11b6:	b9 89       	ldd	r27, Y+17	; 0x11
    11b8:	8f 3f       	cpi	r24, 0xFF	; 255
    11ba:	2f ef       	ldi	r18, 0xFF	; 255
    11bc:	92 07       	cpc	r25, r18
    11be:	a2 07       	cpc	r26, r18
    11c0:	b2 07       	cpc	r27, r18
    11c2:	69 f0       	breq	.+26     	; 0x11de <create_chain+0x226>
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	a1 09       	sbc	r26, r1
    11c8:	b1 09       	sbc	r27, r1
    11ca:	8e 87       	std	Y+14, r24	; 0x0e
    11cc:	9f 87       	std	Y+15, r25	; 0x0f
    11ce:	a8 8b       	std	Y+16, r26	; 0x10
    11d0:	b9 8b       	std	Y+17, r27	; 0x11
    11d2:	8d 81       	ldd	r24, Y+5	; 0x05
    11d4:	81 60       	ori	r24, 0x01	; 1
    11d6:	8d 83       	std	Y+5, r24	; 0x05
    11d8:	b6 01       	movw	r22, r12
    11da:	c7 01       	movw	r24, r14
    11dc:	60 cf       	rjmp	.-320    	; 0x109e <create_chain+0xe6>
    11de:	b6 01       	movw	r22, r12
    11e0:	c7 01       	movw	r24, r14
    11e2:	5d cf       	rjmp	.-326    	; 0x109e <create_chain+0xe6>

000011e4 <dir_next>:
    11e4:	2f 92       	push	r2
    11e6:	3f 92       	push	r3
    11e8:	4f 92       	push	r4
    11ea:	5f 92       	push	r5
    11ec:	6f 92       	push	r6
    11ee:	7f 92       	push	r7
    11f0:	8f 92       	push	r8
    11f2:	9f 92       	push	r9
    11f4:	af 92       	push	r10
    11f6:	bf 92       	push	r11
    11f8:	cf 92       	push	r12
    11fa:	df 92       	push	r13
    11fc:	ef 92       	push	r14
    11fe:	ff 92       	push	r15
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	dc 01       	movw	r26, r24
    120a:	14 96       	adiw	r26, 0x04	; 4
    120c:	cd 91       	ld	r28, X+
    120e:	dc 91       	ld	r29, X
    1210:	15 97       	sbiw	r26, 0x05	; 5
    1212:	21 96       	adiw	r28, 0x01	; 1
    1214:	a1 f4       	brne	.+40     	; 0x123e <dir_next+0x5a>
    1216:	84 e0       	ldi	r24, 0x04	; 4
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	df 90       	pop	r13
    1226:	cf 90       	pop	r12
    1228:	bf 90       	pop	r11
    122a:	af 90       	pop	r10
    122c:	9f 90       	pop	r9
    122e:	8f 90       	pop	r8
    1230:	7f 90       	pop	r7
    1232:	6f 90       	pop	r6
    1234:	5f 90       	pop	r5
    1236:	4f 90       	pop	r4
    1238:	3f 90       	pop	r3
    123a:	2f 90       	pop	r2
    123c:	08 95       	ret
    123e:	fc 01       	movw	r30, r24
    1240:	86 84       	ldd	r8, Z+14	; 0x0e
    1242:	97 84       	ldd	r9, Z+15	; 0x0f
    1244:	a0 88       	ldd	r10, Z+16	; 0x10
    1246:	b1 88       	ldd	r11, Z+17	; 0x11
    1248:	81 14       	cp	r8, r1
    124a:	91 04       	cpc	r9, r1
    124c:	a1 04       	cpc	r10, r1
    124e:	b1 04       	cpc	r11, r1
    1250:	11 f3       	breq	.-60     	; 0x1216 <dir_next+0x32>
    1252:	7b 01       	movw	r14, r22
    1254:	8c 01       	movw	r16, r24
    1256:	6e 01       	movw	r12, r28
    1258:	ff e0       	ldi	r31, 0x0F	; 15
    125a:	cf 22       	and	r12, r31
    125c:	dd 24       	eor	r13, r13
    125e:	c1 14       	cp	r12, r1
    1260:	d1 04       	cpc	r13, r1
    1262:	d1 f0       	breq	.+52     	; 0x1298 <dir_next+0xb4>
    1264:	dc 01       	movw	r26, r24
    1266:	ed 91       	ld	r30, X+
    1268:	fc 91       	ld	r31, X
    126a:	d8 01       	movw	r26, r16
    126c:	15 96       	adiw	r26, 0x05	; 5
    126e:	dc 93       	st	X, r29
    1270:	ce 93       	st	-X, r28
    1272:	14 97       	sbiw	r26, 0x04	; 4
    1274:	be 96       	adiw	r30, 0x2e	; 46
    1276:	cc 0c       	add	r12, r12
    1278:	dd 1c       	adc	r13, r13
    127a:	c2 94       	swap	r12
    127c:	d2 94       	swap	r13
    127e:	80 ef       	ldi	r24, 0xF0	; 240
    1280:	d8 22       	and	r13, r24
    1282:	dc 24       	eor	r13, r12
    1284:	c8 22       	and	r12, r24
    1286:	dc 24       	eor	r13, r12
    1288:	ec 0d       	add	r30, r12
    128a:	fd 1d       	adc	r31, r13
    128c:	53 96       	adiw	r26, 0x13	; 19
    128e:	fc 93       	st	X, r31
    1290:	ee 93       	st	-X, r30
    1292:	52 97       	sbiw	r26, 0x12	; 18
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	c0 cf       	rjmp	.-128    	; 0x1218 <dir_next+0x34>
    1298:	bf ef       	ldi	r27, 0xFF	; 255
    129a:	8b 1a       	sub	r8, r27
    129c:	9b 0a       	sbc	r9, r27
    129e:	ab 0a       	sbc	r10, r27
    12a0:	bb 0a       	sbc	r11, r27
    12a2:	fc 01       	movw	r30, r24
    12a4:	86 86       	std	Z+14, r8	; 0x0e
    12a6:	97 86       	std	Z+15, r9	; 0x0f
    12a8:	a0 8a       	std	Z+16, r10	; 0x10
    12aa:	b1 8a       	std	Z+17, r11	; 0x11
    12ac:	42 85       	ldd	r20, Z+10	; 0x0a
    12ae:	53 85       	ldd	r21, Z+11	; 0x0b
    12b0:	64 85       	ldd	r22, Z+12	; 0x0c
    12b2:	75 85       	ldd	r23, Z+13	; 0x0d
    12b4:	41 15       	cp	r20, r1
    12b6:	51 05       	cpc	r21, r1
    12b8:	61 05       	cpc	r22, r1
    12ba:	71 05       	cpc	r23, r1
    12bc:	09 f1       	breq	.+66     	; 0x1300 <dir_next+0x11c>
    12be:	01 90       	ld	r0, Z+
    12c0:	f0 81       	ld	r31, Z
    12c2:	e0 2d       	mov	r30, r0
    12c4:	82 81       	ldd	r24, Z+2	; 0x02
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	9e 01       	movw	r18, r28
    12cc:	32 95       	swap	r19
    12ce:	22 95       	swap	r18
    12d0:	2f 70       	andi	r18, 0x0F	; 15
    12d2:	23 27       	eor	r18, r19
    12d4:	3f 70       	andi	r19, 0x0F	; 15
    12d6:	23 27       	eor	r18, r19
    12d8:	82 23       	and	r24, r18
    12da:	93 23       	and	r25, r19
    12dc:	89 2b       	or	r24, r25
    12de:	29 f6       	brne	.-118    	; 0x126a <dir_next+0x86>
    12e0:	42 30       	cpi	r20, 0x02	; 2
    12e2:	51 05       	cpc	r21, r1
    12e4:	61 05       	cpc	r22, r1
    12e6:	71 05       	cpc	r23, r1
    12e8:	48 f0       	brcs	.+18     	; 0x12fc <dir_next+0x118>
    12ea:	82 89       	ldd	r24, Z+18	; 0x12
    12ec:	93 89       	ldd	r25, Z+19	; 0x13
    12ee:	a4 89       	ldd	r26, Z+20	; 0x14
    12f0:	b5 89       	ldd	r27, Z+21	; 0x15
    12f2:	48 17       	cp	r20, r24
    12f4:	59 07       	cpc	r21, r25
    12f6:	6a 07       	cpc	r22, r26
    12f8:	7b 07       	cpc	r23, r27
    12fa:	60 f0       	brcs	.+24     	; 0x1314 <dir_next+0x130>
    12fc:	82 e0       	ldi	r24, 0x02	; 2
    12fe:	8c cf       	rjmp	.-232    	; 0x1218 <dir_next+0x34>
    1300:	01 90       	ld	r0, Z+
    1302:	f0 81       	ld	r31, Z
    1304:	e0 2d       	mov	r30, r0
    1306:	80 85       	ldd	r24, Z+8	; 0x08
    1308:	91 85       	ldd	r25, Z+9	; 0x09
    130a:	c8 17       	cp	r28, r24
    130c:	d9 07       	cpc	r29, r25
    130e:	08 f0       	brcs	.+2      	; 0x1312 <dir_next+0x12e>
    1310:	82 cf       	rjmp	.-252    	; 0x1216 <dir_next+0x32>
    1312:	ab cf       	rjmp	.-170    	; 0x126a <dir_next+0x86>
    1314:	cf 01       	movw	r24, r30
    1316:	0e 94 19 06 	call	0xc32	; 0xc32 <get_fat.part.4>
    131a:	4b 01       	movw	r8, r22
    131c:	5c 01       	movw	r10, r24
    131e:	62 30       	cpi	r22, 0x02	; 2
    1320:	71 05       	cpc	r23, r1
    1322:	81 05       	cpc	r24, r1
    1324:	91 05       	cpc	r25, r1
    1326:	50 f3       	brcs	.-44     	; 0x12fc <dir_next+0x118>
    1328:	6f 3f       	cpi	r22, 0xFF	; 255
    132a:	7f 4f       	sbci	r23, 0xFF	; 255
    132c:	8f 4f       	sbci	r24, 0xFF	; 255
    132e:	9f 4f       	sbci	r25, 0xFF	; 255
    1330:	09 f4       	brne	.+2      	; 0x1334 <dir_next+0x150>
    1332:	50 c0       	rjmp	.+160    	; 0x13d4 <dir_next+0x1f0>
    1334:	d8 01       	movw	r26, r16
    1336:	ed 91       	ld	r30, X+
    1338:	fc 91       	ld	r31, X
    133a:	42 89       	ldd	r20, Z+18	; 0x12
    133c:	53 89       	ldd	r21, Z+19	; 0x13
    133e:	64 89       	ldd	r22, Z+20	; 0x14
    1340:	75 89       	ldd	r23, Z+21	; 0x15
    1342:	84 16       	cp	r8, r20
    1344:	95 06       	cpc	r9, r21
    1346:	a6 06       	cpc	r10, r22
    1348:	b7 06       	cpc	r11, r23
    134a:	70 f5       	brcc	.+92     	; 0x13a8 <dir_next+0x1c4>
    134c:	24 01       	movw	r4, r8
    134e:	35 01       	movw	r6, r10
    1350:	b2 e0       	ldi	r27, 0x02	; 2
    1352:	4b 1a       	sub	r4, r27
    1354:	51 08       	sbc	r5, r1
    1356:	61 08       	sbc	r6, r1
    1358:	71 08       	sbc	r7, r1
    135a:	d8 01       	movw	r26, r16
    135c:	1a 96       	adiw	r26, 0x0a	; 10
    135e:	8d 92       	st	X+, r8
    1360:	9d 92       	st	X+, r9
    1362:	ad 92       	st	X+, r10
    1364:	bc 92       	st	X, r11
    1366:	1d 97       	sbiw	r26, 0x0d	; 13
    1368:	db 01       	movw	r26, r22
    136a:	ca 01       	movw	r24, r20
    136c:	02 97       	sbiw	r24, 0x02	; 2
    136e:	a1 09       	sbc	r26, r1
    1370:	b1 09       	sbc	r27, r1
    1372:	48 16       	cp	r4, r24
    1374:	59 06       	cpc	r5, r25
    1376:	6a 06       	cpc	r6, r26
    1378:	7b 06       	cpc	r7, r27
    137a:	70 f5       	brcc	.+92     	; 0x13d8 <dir_next+0x1f4>
    137c:	a2 81       	ldd	r26, Z+2	; 0x02
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	a3 01       	movw	r20, r6
    1382:	92 01       	movw	r18, r4
    1384:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__muluhisi3>
    1388:	86 a0       	ldd	r8, Z+38	; 0x26
    138a:	97 a0       	ldd	r9, Z+39	; 0x27
    138c:	a0 a4       	ldd	r10, Z+40	; 0x28
    138e:	b1 a4       	ldd	r11, Z+41	; 0x29
    1390:	86 0e       	add	r8, r22
    1392:	97 1e       	adc	r9, r23
    1394:	a8 1e       	adc	r10, r24
    1396:	b9 1e       	adc	r11, r25
    1398:	d8 01       	movw	r26, r16
    139a:	1e 96       	adiw	r26, 0x0e	; 14
    139c:	8d 92       	st	X+, r8
    139e:	9d 92       	st	X+, r9
    13a0:	ad 92       	st	X+, r10
    13a2:	bc 92       	st	X, r11
    13a4:	51 97       	sbiw	r26, 0x11	; 17
    13a6:	61 cf       	rjmp	.-318    	; 0x126a <dir_next+0x86>
    13a8:	ef 28       	or	r14, r15
    13aa:	09 f4       	brne	.+2      	; 0x13ae <dir_next+0x1ca>
    13ac:	34 cf       	rjmp	.-408    	; 0x1216 <dir_next+0x32>
    13ae:	d8 01       	movw	r26, r16
    13b0:	1a 96       	adiw	r26, 0x0a	; 10
    13b2:	4d 91       	ld	r20, X+
    13b4:	5d 91       	ld	r21, X+
    13b6:	6d 91       	ld	r22, X+
    13b8:	7c 91       	ld	r23, X
    13ba:	1d 97       	sbiw	r26, 0x0d	; 13
    13bc:	cf 01       	movw	r24, r30
    13be:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <create_chain>
    13c2:	4b 01       	movw	r8, r22
    13c4:	5c 01       	movw	r10, r24
    13c6:	61 15       	cp	r22, r1
    13c8:	71 05       	cpc	r23, r1
    13ca:	81 05       	cpc	r24, r1
    13cc:	91 05       	cpc	r25, r1
    13ce:	41 f4       	brne	.+16     	; 0x13e0 <dir_next+0x1fc>
    13d0:	87 e0       	ldi	r24, 0x07	; 7
    13d2:	22 cf       	rjmp	.-444    	; 0x1218 <dir_next+0x34>
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	20 cf       	rjmp	.-448    	; 0x1218 <dir_next+0x34>
    13d8:	81 2c       	mov	r8, r1
    13da:	91 2c       	mov	r9, r1
    13dc:	54 01       	movw	r10, r8
    13de:	dc cf       	rjmp	.-72     	; 0x1398 <dir_next+0x1b4>
    13e0:	61 30       	cpi	r22, 0x01	; 1
    13e2:	71 05       	cpc	r23, r1
    13e4:	81 05       	cpc	r24, r1
    13e6:	91 05       	cpc	r25, r1
    13e8:	09 f4       	brne	.+2      	; 0x13ec <dir_next+0x208>
    13ea:	88 cf       	rjmp	.-240    	; 0x12fc <dir_next+0x118>
    13ec:	6f 3f       	cpi	r22, 0xFF	; 255
    13ee:	7f 4f       	sbci	r23, 0xFF	; 255
    13f0:	8f 4f       	sbci	r24, 0xFF	; 255
    13f2:	9f 4f       	sbci	r25, 0xFF	; 255
    13f4:	79 f3       	breq	.-34     	; 0x13d4 <dir_next+0x1f0>
    13f6:	d8 01       	movw	r26, r16
    13f8:	ed 90       	ld	r14, X+
    13fa:	fc 90       	ld	r15, X
    13fc:	f7 01       	movw	r30, r14
    13fe:	84 81       	ldd	r24, Z+4	; 0x04
    1400:	81 11       	cpse	r24, r1
    1402:	63 c0       	rjmp	.+198    	; 0x14ca <dir_next+0x2e6>
    1404:	f7 01       	movw	r30, r14
    1406:	be 96       	adiw	r30, 0x2e	; 46
    1408:	22 ed       	ldi	r18, 0xD2	; 210
    140a:	e2 1a       	sub	r14, r18
    140c:	2d ef       	ldi	r18, 0xFD	; 253
    140e:	f2 0a       	sbc	r15, r18
    1410:	11 92       	st	Z+, r1
    1412:	ee 16       	cp	r14, r30
    1414:	ff 06       	cpc	r15, r31
    1416:	e1 f7       	brne	.-8      	; 0x1410 <dir_next+0x22c>
    1418:	f8 01       	movw	r30, r16
    141a:	e0 80       	ld	r14, Z
    141c:	f1 80       	ldd	r15, Z+1	; 0x01
    141e:	24 01       	movw	r4, r8
    1420:	35 01       	movw	r6, r10
    1422:	f2 e0       	ldi	r31, 0x02	; 2
    1424:	4f 1a       	sub	r4, r31
    1426:	51 08       	sbc	r5, r1
    1428:	61 08       	sbc	r6, r1
    142a:	71 08       	sbc	r7, r1
    142c:	f7 01       	movw	r30, r14
    142e:	82 89       	ldd	r24, Z+18	; 0x12
    1430:	93 89       	ldd	r25, Z+19	; 0x13
    1432:	a4 89       	ldd	r26, Z+20	; 0x14
    1434:	b5 89       	ldd	r27, Z+21	; 0x15
    1436:	02 97       	sbiw	r24, 0x02	; 2
    1438:	a1 09       	sbc	r26, r1
    143a:	b1 09       	sbc	r27, r1
    143c:	48 16       	cp	r4, r24
    143e:	59 06       	cpc	r5, r25
    1440:	6a 06       	cpc	r6, r26
    1442:	7b 06       	cpc	r7, r27
    1444:	08 f0       	brcs	.+2      	; 0x1448 <dir_next+0x264>
    1446:	5b c0       	rjmp	.+182    	; 0x14fe <dir_next+0x31a>
    1448:	a2 81       	ldd	r26, Z+2	; 0x02
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	a3 01       	movw	r20, r6
    144e:	92 01       	movw	r18, r4
    1450:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__muluhisi3>
    1454:	26 a1       	ldd	r18, Z+38	; 0x26
    1456:	37 a1       	ldd	r19, Z+39	; 0x27
    1458:	40 a5       	ldd	r20, Z+40	; 0x28
    145a:	51 a5       	ldd	r21, Z+41	; 0x29
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	82 0f       	add	r24, r18
    1462:	93 1f       	adc	r25, r19
    1464:	a4 1f       	adc	r26, r20
    1466:	b5 1f       	adc	r27, r21
    1468:	f7 01       	movw	r30, r14
    146a:	82 a7       	std	Z+42, r24	; 0x2a
    146c:	93 a7       	std	Z+43, r25	; 0x2b
    146e:	a4 a7       	std	Z+44, r26	; 0x2c
    1470:	b5 a7       	std	Z+45, r27	; 0x2d
    1472:	21 2c       	mov	r2, r1
    1474:	31 2c       	mov	r3, r1
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <dir_next+0x2b2>
    1478:	f7 01       	movw	r30, r14
    147a:	82 a5       	ldd	r24, Z+42	; 0x2a
    147c:	93 a5       	ldd	r25, Z+43	; 0x2b
    147e:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1480:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1482:	01 96       	adiw	r24, 0x01	; 1
    1484:	a1 1d       	adc	r26, r1
    1486:	b1 1d       	adc	r27, r1
    1488:	82 a7       	std	Z+42, r24	; 0x2a
    148a:	93 a7       	std	Z+43, r25	; 0x2b
    148c:	a4 a7       	std	Z+44, r26	; 0x2c
    148e:	b5 a7       	std	Z+45, r27	; 0x2d
    1490:	ff ef       	ldi	r31, 0xFF	; 255
    1492:	2f 1a       	sub	r2, r31
    1494:	3f 0a       	sbc	r3, r31
    1496:	f7 01       	movw	r30, r14
    1498:	82 81       	ldd	r24, Z+2	; 0x02
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	28 16       	cp	r2, r24
    149e:	39 06       	cpc	r3, r25
    14a0:	e8 f4       	brcc	.+58     	; 0x14dc <dir_next+0x2f8>
    14a2:	e1 e0       	ldi	r30, 0x01	; 1
    14a4:	d7 01       	movw	r26, r14
    14a6:	14 96       	adiw	r26, 0x04	; 4
    14a8:	ec 93       	st	X, r30
    14aa:	d8 01       	movw	r26, r16
    14ac:	ed 90       	ld	r14, X+
    14ae:	fc 90       	ld	r15, X
    14b0:	f7 01       	movw	r30, r14
    14b2:	84 81       	ldd	r24, Z+4	; 0x04
    14b4:	88 23       	and	r24, r24
    14b6:	01 f3       	breq	.-64     	; 0x1478 <dir_next+0x294>
    14b8:	c7 01       	movw	r24, r14
    14ba:	0e 94 47 02 	call	0x48e	; 0x48e <sync_window.part.2>
    14be:	81 11       	cpse	r24, r1
    14c0:	89 cf       	rjmp	.-238    	; 0x13d4 <dir_next+0x1f0>
    14c2:	d8 01       	movw	r26, r16
    14c4:	ed 90       	ld	r14, X+
    14c6:	fc 90       	ld	r15, X
    14c8:	d7 cf       	rjmp	.-82     	; 0x1478 <dir_next+0x294>
    14ca:	c7 01       	movw	r24, r14
    14cc:	0e 94 47 02 	call	0x48e	; 0x48e <sync_window.part.2>
    14d0:	81 11       	cpse	r24, r1
    14d2:	80 cf       	rjmp	.-256    	; 0x13d4 <dir_next+0x1f0>
    14d4:	d8 01       	movw	r26, r16
    14d6:	ed 90       	ld	r14, X+
    14d8:	fc 90       	ld	r15, X
    14da:	94 cf       	rjmp	.-216    	; 0x1404 <dir_next+0x220>
    14dc:	82 a5       	ldd	r24, Z+42	; 0x2a
    14de:	93 a5       	ldd	r25, Z+43	; 0x2b
    14e0:	a4 a5       	ldd	r26, Z+44	; 0x2c
    14e2:	b5 a5       	ldd	r27, Z+45	; 0x2d
    14e4:	82 19       	sub	r24, r2
    14e6:	93 09       	sbc	r25, r3
    14e8:	a1 09       	sbc	r26, r1
    14ea:	b1 09       	sbc	r27, r1
    14ec:	82 a7       	std	Z+42, r24	; 0x2a
    14ee:	93 a7       	std	Z+43, r25	; 0x2b
    14f0:	a4 a7       	std	Z+44, r26	; 0x2c
    14f2:	b5 a7       	std	Z+45, r27	; 0x2d
    14f4:	42 89       	ldd	r20, Z+18	; 0x12
    14f6:	53 89       	ldd	r21, Z+19	; 0x13
    14f8:	64 89       	ldd	r22, Z+20	; 0x14
    14fa:	75 89       	ldd	r23, Z+21	; 0x15
    14fc:	2e cf       	rjmp	.-420    	; 0x135a <dir_next+0x176>
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	dc 01       	movw	r26, r24
    1504:	b1 cf       	rjmp	.-158    	; 0x1468 <dir_next+0x284>

00001506 <dir_sdi.constprop.10>:
    1506:	cf 92       	push	r12
    1508:	df 92       	push	r13
    150a:	ef 92       	push	r14
    150c:	ff 92       	push	r15
    150e:	0f 93       	push	r16
    1510:	1f 93       	push	r17
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	ec 01       	movw	r28, r24
    1518:	1d 82       	std	Y+5, r1	; 0x05
    151a:	1c 82       	std	Y+4, r1	; 0x04
    151c:	ce 80       	ldd	r12, Y+6	; 0x06
    151e:	df 80       	ldd	r13, Y+7	; 0x07
    1520:	e8 84       	ldd	r14, Y+8	; 0x08
    1522:	f9 84       	ldd	r15, Y+9	; 0x09
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	c8 16       	cp	r12, r24
    1528:	d1 04       	cpc	r13, r1
    152a:	e1 04       	cpc	r14, r1
    152c:	f1 04       	cpc	r15, r1
    152e:	59 f0       	breq	.+22     	; 0x1546 <dir_sdi.constprop.10+0x40>
    1530:	e8 81       	ld	r30, Y
    1532:	f9 81       	ldd	r31, Y+1	; 0x01
    1534:	82 89       	ldd	r24, Z+18	; 0x12
    1536:	93 89       	ldd	r25, Z+19	; 0x13
    1538:	a4 89       	ldd	r26, Z+20	; 0x14
    153a:	b5 89       	ldd	r27, Z+21	; 0x15
    153c:	c8 16       	cp	r12, r24
    153e:	d9 06       	cpc	r13, r25
    1540:	ea 06       	cpc	r14, r26
    1542:	fb 06       	cpc	r15, r27
    1544:	50 f0       	brcs	.+20     	; 0x155a <dir_sdi.constprop.10+0x54>
    1546:	82 e0       	ldi	r24, 0x02	; 2
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	ff 90       	pop	r15
    1552:	ef 90       	pop	r14
    1554:	df 90       	pop	r13
    1556:	cf 90       	pop	r12
    1558:	08 95       	ret
    155a:	c1 14       	cp	r12, r1
    155c:	d1 04       	cpc	r13, r1
    155e:	e1 04       	cpc	r14, r1
    1560:	f1 04       	cpc	r15, r1
    1562:	39 f5       	brne	.+78     	; 0x15b2 <dir_sdi.constprop.10+0xac>
    1564:	20 81       	ld	r18, Z
    1566:	23 30       	cpi	r18, 0x03	; 3
    1568:	c9 f0       	breq	.+50     	; 0x159c <dir_sdi.constprop.10+0x96>
    156a:	80 85       	ldd	r24, Z+8	; 0x08
    156c:	91 85       	ldd	r25, Z+9	; 0x09
    156e:	89 2b       	or	r24, r25
    1570:	51 f3       	breq	.-44     	; 0x1546 <dir_sdi.constprop.10+0x40>
    1572:	82 a1       	ldd	r24, Z+34	; 0x22
    1574:	93 a1       	ldd	r25, Z+35	; 0x23
    1576:	a4 a1       	ldd	r26, Z+36	; 0x24
    1578:	b5 a1       	ldd	r27, Z+37	; 0x25
    157a:	ca 86       	std	Y+10, r12	; 0x0a
    157c:	db 86       	std	Y+11, r13	; 0x0b
    157e:	ec 86       	std	Y+12, r14	; 0x0c
    1580:	fd 86       	std	Y+13, r15	; 0x0d
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	a1 05       	cpc	r26, r1
    1586:	b1 05       	cpc	r27, r1
    1588:	f1 f2       	breq	.-68     	; 0x1546 <dir_sdi.constprop.10+0x40>
    158a:	8e 87       	std	Y+14, r24	; 0x0e
    158c:	9f 87       	std	Y+15, r25	; 0x0f
    158e:	a8 8b       	std	Y+16, r26	; 0x10
    1590:	b9 8b       	std	Y+17, r27	; 0x11
    1592:	be 96       	adiw	r30, 0x2e	; 46
    1594:	fb 8b       	std	Y+19, r31	; 0x13
    1596:	ea 8b       	std	Y+18, r30	; 0x12
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	d6 cf       	rjmp	.-84     	; 0x1548 <dir_sdi.constprop.10+0x42>
    159c:	42 a1       	ldd	r20, Z+34	; 0x22
    159e:	53 a1       	ldd	r21, Z+35	; 0x23
    15a0:	64 a1       	ldd	r22, Z+36	; 0x24
    15a2:	75 a1       	ldd	r23, Z+37	; 0x25
    15a4:	41 15       	cp	r20, r1
    15a6:	51 05       	cpc	r21, r1
    15a8:	61 05       	cpc	r22, r1
    15aa:	71 05       	cpc	r23, r1
    15ac:	f1 f2       	breq	.-68     	; 0x156a <dir_sdi.constprop.10+0x64>
    15ae:	6a 01       	movw	r12, r20
    15b0:	7b 01       	movw	r14, r22
    15b2:	8e 01       	movw	r16, r28
    15b4:	62 81       	ldd	r22, Z+2	; 0x02
    15b6:	66 23       	and	r22, r22
    15b8:	11 f1       	breq	.+68     	; 0x15fe <dir_sdi.constprop.10+0xf8>
    15ba:	33 c0       	rjmp	.+102    	; 0x1622 <dir_sdi.constprop.10+0x11c>
    15bc:	b7 01       	movw	r22, r14
    15be:	a6 01       	movw	r20, r12
    15c0:	cf 01       	movw	r24, r30
    15c2:	0e 94 19 06 	call	0xc32	; 0xc32 <get_fat.part.4>
    15c6:	6b 01       	movw	r12, r22
    15c8:	7c 01       	movw	r14, r24
    15ca:	6f 3f       	cpi	r22, 0xFF	; 255
    15cc:	bf ef       	ldi	r27, 0xFF	; 255
    15ce:	7b 07       	cpc	r23, r27
    15d0:	8b 07       	cpc	r24, r27
    15d2:	9b 07       	cpc	r25, r27
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <dir_sdi.constprop.10+0xd2>
    15d6:	42 c0       	rjmp	.+132    	; 0x165c <dir_sdi.constprop.10+0x156>
    15d8:	62 30       	cpi	r22, 0x02	; 2
    15da:	71 05       	cpc	r23, r1
    15dc:	81 05       	cpc	r24, r1
    15de:	91 05       	cpc	r25, r1
    15e0:	08 f4       	brcc	.+2      	; 0x15e4 <dir_sdi.constprop.10+0xde>
    15e2:	b1 cf       	rjmp	.-158    	; 0x1546 <dir_sdi.constprop.10+0x40>
    15e4:	d8 01       	movw	r26, r16
    15e6:	ed 91       	ld	r30, X+
    15e8:	fc 91       	ld	r31, X
    15ea:	82 89       	ldd	r24, Z+18	; 0x12
    15ec:	93 89       	ldd	r25, Z+19	; 0x13
    15ee:	a4 89       	ldd	r26, Z+20	; 0x14
    15f0:	b5 89       	ldd	r27, Z+21	; 0x15
    15f2:	c8 16       	cp	r12, r24
    15f4:	d9 06       	cpc	r13, r25
    15f6:	ea 06       	cpc	r14, r26
    15f8:	fb 06       	cpc	r15, r27
    15fa:	08 f0       	brcs	.+2      	; 0x15fe <dir_sdi.constprop.10+0xf8>
    15fc:	a4 cf       	rjmp	.-184    	; 0x1546 <dir_sdi.constprop.10+0x40>
    15fe:	a2 e0       	ldi	r26, 0x02	; 2
    1600:	ca 16       	cp	r12, r26
    1602:	d1 04       	cpc	r13, r1
    1604:	e1 04       	cpc	r14, r1
    1606:	f1 04       	cpc	r15, r1
    1608:	08 f4       	brcc	.+2      	; 0x160c <dir_sdi.constprop.10+0x106>
    160a:	9d cf       	rjmp	.-198    	; 0x1546 <dir_sdi.constprop.10+0x40>
    160c:	82 89       	ldd	r24, Z+18	; 0x12
    160e:	93 89       	ldd	r25, Z+19	; 0x13
    1610:	a4 89       	ldd	r26, Z+20	; 0x14
    1612:	b5 89       	ldd	r27, Z+21	; 0x15
    1614:	c8 16       	cp	r12, r24
    1616:	d9 06       	cpc	r13, r25
    1618:	ea 06       	cpc	r14, r26
    161a:	fb 06       	cpc	r15, r27
    161c:	08 f0       	brcs	.+2      	; 0x1620 <dir_sdi.constprop.10+0x11a>
    161e:	93 cf       	rjmp	.-218    	; 0x1546 <dir_sdi.constprop.10+0x40>
    1620:	cd cf       	rjmp	.-102    	; 0x15bc <dir_sdi.constprop.10+0xb6>
    1622:	a7 01       	movw	r20, r14
    1624:	96 01       	movw	r18, r12
    1626:	22 50       	subi	r18, 0x02	; 2
    1628:	31 09       	sbc	r19, r1
    162a:	41 09       	sbc	r20, r1
    162c:	51 09       	sbc	r21, r1
    162e:	02 97       	sbiw	r24, 0x02	; 2
    1630:	a1 09       	sbc	r26, r1
    1632:	b1 09       	sbc	r27, r1
    1634:	28 17       	cp	r18, r24
    1636:	39 07       	cpc	r19, r25
    1638:	4a 07       	cpc	r20, r26
    163a:	5b 07       	cpc	r21, r27
    163c:	88 f4       	brcc	.+34     	; 0x1660 <dir_sdi.constprop.10+0x15a>
    163e:	a6 2f       	mov	r26, r22
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__muluhisi3>
    1646:	06 a1       	ldd	r16, Z+38	; 0x26
    1648:	17 a1       	ldd	r17, Z+39	; 0x27
    164a:	20 a5       	ldd	r18, Z+40	; 0x28
    164c:	31 a5       	ldd	r19, Z+41	; 0x29
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	80 0f       	add	r24, r16
    1654:	91 1f       	adc	r25, r17
    1656:	a2 1f       	adc	r26, r18
    1658:	b3 1f       	adc	r27, r19
    165a:	8f cf       	rjmp	.-226    	; 0x157a <dir_sdi.constprop.10+0x74>
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	74 cf       	rjmp	.-280    	; 0x1548 <dir_sdi.constprop.10+0x42>
    1660:	ca 86       	std	Y+10, r12	; 0x0a
    1662:	db 86       	std	Y+11, r13	; 0x0b
    1664:	ec 86       	std	Y+12, r14	; 0x0c
    1666:	fd 86       	std	Y+13, r15	; 0x0d
    1668:	6e cf       	rjmp	.-292    	; 0x1546 <dir_sdi.constprop.10+0x40>

0000166a <f_mount>:
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	00 d0       	rcall	.+0      	; 0x1672 <f_mount+0x8>
    1672:	00 d0       	rcall	.+0      	; 0x1674 <f_mount+0xa>
    1674:	00 d0       	rcall	.+0      	; 0x1676 <f_mount+0xc>
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	9c 83       	std	Y+4, r25	; 0x04
    167c:	8b 83       	std	Y+3, r24	; 0x03
    167e:	7e 83       	std	Y+6, r23	; 0x06
    1680:	6d 83       	std	Y+5, r22	; 0x05
    1682:	14 2f       	mov	r17, r20
    1684:	7a 83       	std	Y+2, r23	; 0x02
    1686:	69 83       	std	Y+1, r22	; 0x01
    1688:	ce 01       	movw	r24, r28
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <get_ldnumber>
    1690:	97 fd       	sbrc	r25, 7
    1692:	22 c0       	rjmp	.+68     	; 0x16d8 <f_mount+0x6e>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	fc 01       	movw	r30, r24
    169a:	e8 52       	subi	r30, 0x28	; 40
    169c:	fd 4f       	sbci	r31, 0xFD	; 253
    169e:	01 90       	ld	r0, Z+
    16a0:	f0 81       	ld	r31, Z
    16a2:	e0 2d       	mov	r30, r0
    16a4:	30 97       	sbiw	r30, 0x00	; 0
    16a6:	09 f0       	breq	.+2      	; 0x16aa <f_mount+0x40>
    16a8:	10 82       	st	Z, r1
    16aa:	eb 81       	ldd	r30, Y+3	; 0x03
    16ac:	fc 81       	ldd	r31, Y+4	; 0x04
    16ae:	30 97       	sbiw	r30, 0x00	; 0
    16b0:	f1 f0       	breq	.+60     	; 0x16ee <f_mount+0x84>
    16b2:	10 82       	st	Z, r1
    16b4:	dc 01       	movw	r26, r24
    16b6:	a8 52       	subi	r26, 0x28	; 40
    16b8:	bd 4f       	sbci	r27, 0xFD	; 253
    16ba:	ed 93       	st	X+, r30
    16bc:	fc 93       	st	X, r31
    16be:	11 30       	cpi	r17, 0x01	; 1
    16c0:	69 f0       	breq	.+26     	; 0x16dc <f_mount+0x72>
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	26 96       	adiw	r28, 0x06	; 6
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	1f 91       	pop	r17
    16d6:	08 95       	ret
    16d8:	8b e0       	ldi	r24, 0x0B	; 11
    16da:	f4 cf       	rjmp	.-24     	; 0x16c4 <f_mount+0x5a>
    16dc:	40 e0       	ldi	r20, 0x00	; 0
    16de:	be 01       	movw	r22, r28
    16e0:	6b 5f       	subi	r22, 0xFB	; 251
    16e2:	7f 4f       	sbci	r23, 0xFF	; 255
    16e4:	ce 01       	movw	r24, r28
    16e6:	03 96       	adiw	r24, 0x03	; 3
    16e8:	0e 94 22 03 	call	0x644	; 0x644 <find_volume>
    16ec:	eb cf       	rjmp	.-42     	; 0x16c4 <f_mount+0x5a>
    16ee:	fc 01       	movw	r30, r24
    16f0:	e8 52       	subi	r30, 0x28	; 40
    16f2:	fd 4f       	sbci	r31, 0xFD	; 253
    16f4:	11 82       	std	Z+1, r1	; 0x01
    16f6:	10 82       	st	Z, r1
    16f8:	e4 cf       	rjmp	.-56     	; 0x16c2 <f_mount+0x58>

000016fa <f_open>:
    16fa:	2f 92       	push	r2
    16fc:	3f 92       	push	r3
    16fe:	4f 92       	push	r4
    1700:	5f 92       	push	r5
    1702:	6f 92       	push	r6
    1704:	7f 92       	push	r7
    1706:	8f 92       	push	r8
    1708:	9f 92       	push	r9
    170a:	af 92       	push	r10
    170c:	bf 92       	push	r11
    170e:	cf 92       	push	r12
    1710:	df 92       	push	r13
    1712:	ef 92       	push	r14
    1714:	ff 92       	push	r15
    1716:	0f 93       	push	r16
    1718:	1f 93       	push	r17
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	ad 97       	sbiw	r28, 0x2d	; 45
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	7c a3       	std	Y+36, r23	; 0x24
    1730:	6b a3       	std	Y+35, r22	; 0x23
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	09 f4       	brne	.+2      	; 0x1738 <f_open+0x3e>
    1736:	93 c0       	rjmp	.+294    	; 0x185e <f_open+0x164>
    1738:	84 2e       	mov	r8, r20
    173a:	1c 01       	movw	r2, r24
    173c:	dc 01       	movw	r26, r24
    173e:	1d 92       	st	X+, r1
    1740:	1c 92       	st	X, r1
    1742:	4e 71       	andi	r20, 0x1E	; 30
    1744:	be 01       	movw	r22, r28
    1746:	6d 5d       	subi	r22, 0xDD	; 221
    1748:	7f 4f       	sbci	r23, 0xFF	; 255
    174a:	ce 01       	movw	r24, r28
    174c:	01 96       	adiw	r24, 0x01	; 1
    174e:	0e 94 22 03 	call	0x644	; 0x644 <find_volume>
    1752:	88 23       	and	r24, r24
    1754:	c9 f0       	breq	.+50     	; 0x1788 <f_open+0x8e>
    1756:	ad 96       	adiw	r28, 0x2d	; 45
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	ff 90       	pop	r15
    176c:	ef 90       	pop	r14
    176e:	df 90       	pop	r13
    1770:	cf 90       	pop	r12
    1772:	bf 90       	pop	r11
    1774:	af 90       	pop	r10
    1776:	9f 90       	pop	r9
    1778:	8f 90       	pop	r8
    177a:	7f 90       	pop	r7
    177c:	6f 90       	pop	r6
    177e:	5f 90       	pop	r5
    1780:	4f 90       	pop	r4
    1782:	3f 90       	pop	r3
    1784:	2f 90       	pop	r2
    1786:	08 95       	ret
    1788:	fe 01       	movw	r30, r28
    178a:	77 96       	adiw	r30, 0x17	; 23
    178c:	fe 8b       	std	Y+22, r31	; 0x16
    178e:	ed 8b       	std	Y+21, r30	; 0x15
    1790:	cb a0       	ldd	r12, Y+35	; 0x23
    1792:	dc a0       	ldd	r13, Y+36	; 0x24
    1794:	d6 01       	movw	r26, r12
    1796:	8c 91       	ld	r24, X
    1798:	8f 32       	cpi	r24, 0x2F	; 47
    179a:	09 f4       	brne	.+2      	; 0x179e <f_open+0xa4>
    179c:	62 c0       	rjmp	.+196    	; 0x1862 <f_open+0x168>
    179e:	8c 35       	cpi	r24, 0x5C	; 92
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <f_open+0xaa>
    17a2:	5f c0       	rjmp	.+190    	; 0x1862 <f_open+0x168>
    17a4:	28 2d       	mov	r18, r8
    17a6:	2f 71       	andi	r18, 0x1F	; 31
    17a8:	2d a3       	std	Y+37, r18	; 0x25
    17aa:	1f 82       	std	Y+7, r1	; 0x07
    17ac:	18 86       	std	Y+8, r1	; 0x08
    17ae:	19 86       	std	Y+9, r1	; 0x09
    17b0:	1a 86       	std	Y+10, r1	; 0x0a
    17b2:	d6 01       	movw	r26, r12
    17b4:	8c 91       	ld	r24, X
    17b6:	80 32       	cpi	r24, 0x20	; 32
    17b8:	08 f4       	brcc	.+2      	; 0x17bc <f_open+0xc2>
    17ba:	70 c1       	rjmp	.+736    	; 0x1a9c <f_open+0x3a2>
    17bc:	10 e2       	ldi	r17, 0x20	; 32
    17be:	95 e0       	ldi	r25, 0x05	; 5
    17c0:	99 2e       	mov	r9, r25
    17c2:	05 c0       	rjmp	.+10     	; 0x17ce <f_open+0xd4>
    17c4:	bf ef       	ldi	r27, 0xFF	; 255
    17c6:	cb 1a       	sub	r12, r27
    17c8:	db 0a       	sbc	r13, r27
    17ca:	d6 01       	movw	r26, r12
    17cc:	8c 91       	ld	r24, X
    17ce:	8f 32       	cpi	r24, 0x2F	; 47
    17d0:	c9 f3       	breq	.-14     	; 0x17c4 <f_open+0xca>
    17d2:	8c 35       	cpi	r24, 0x5C	; 92
    17d4:	b9 f3       	breq	.-18     	; 0x17c4 <f_open+0xca>
    17d6:	df 01       	movw	r26, r30
    17d8:	cf 01       	movw	r24, r30
    17da:	0b 96       	adiw	r24, 0x0b	; 11
    17dc:	1d 93       	st	X+, r17
    17de:	a8 17       	cp	r26, r24
    17e0:	b9 07       	cpc	r27, r25
    17e2:	e1 f7       	brne	.-8      	; 0x17dc <f_open+0xe2>
    17e4:	b6 01       	movw	r22, r12
    17e6:	e1 2c       	mov	r14, r1
    17e8:	f1 2c       	mov	r15, r1
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	08 e0       	ldi	r16, 0x08	; 8
    17f0:	a0 2e       	mov	r10, r16
    17f2:	b1 2c       	mov	r11, r1
    17f4:	71 2c       	mov	r7, r1
    17f6:	4f 5f       	subi	r20, 0xFF	; 255
    17f8:	5f 4f       	sbci	r21, 0xFF	; 255
    17fa:	db 01       	movw	r26, r22
    17fc:	0d 91       	ld	r16, X+
    17fe:	bd 01       	movw	r22, r26
    1800:	01 32       	cpi	r16, 0x21	; 33
    1802:	08 f4       	brcc	.+2      	; 0x1806 <f_open+0x10c>
    1804:	27 c1       	rjmp	.+590    	; 0x1a54 <f_open+0x35a>
    1806:	0f 32       	cpi	r16, 0x2F	; 47
    1808:	09 f4       	brne	.+2      	; 0x180c <f_open+0x112>
    180a:	9a c0       	rjmp	.+308    	; 0x1940 <f_open+0x246>
    180c:	0c 35       	cpi	r16, 0x5C	; 92
    180e:	09 f4       	brne	.+2      	; 0x1812 <f_open+0x118>
    1810:	97 c0       	rjmp	.+302    	; 0x1940 <f_open+0x246>
    1812:	0e 32       	cpi	r16, 0x2E	; 46
    1814:	09 f4       	brne	.+2      	; 0x1818 <f_open+0x11e>
    1816:	7c c0       	rjmp	.+248    	; 0x1910 <f_open+0x216>
    1818:	ea 14       	cp	r14, r10
    181a:	fb 04       	cpc	r15, r11
    181c:	30 f5       	brcc	.+76     	; 0x186a <f_open+0x170>
    181e:	07 fd       	sbrc	r16, 7
    1820:	24 c0       	rjmp	.+72     	; 0x186a <f_open+0x170>
    1822:	20 2f       	mov	r18, r16
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	02 32       	cpi	r16, 0x22	; 34
    1828:	01 f1       	breq	.+64     	; 0x186a <f_open+0x170>
    182a:	a1 e2       	ldi	r26, 0x21	; 33
    182c:	b1 e0       	ldi	r27, 0x01	; 1
    182e:	04 c0       	rjmp	.+8      	; 0x1838 <f_open+0x13e>
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	28 17       	cp	r18, r24
    1834:	39 07       	cpc	r19, r25
    1836:	c9 f0       	breq	.+50     	; 0x186a <f_open+0x170>
    1838:	8d 91       	ld	r24, X+
    183a:	81 11       	cpse	r24, r1
    183c:	f9 cf       	rjmp	.-14     	; 0x1830 <f_open+0x136>
    183e:	8f eb       	ldi	r24, 0xBF	; 191
    1840:	80 0f       	add	r24, r16
    1842:	8a 31       	cpi	r24, 0x1A	; 26
    1844:	08 f0       	brcs	.+2      	; 0x1848 <f_open+0x14e>
    1846:	72 c0       	rjmp	.+228    	; 0x192c <f_open+0x232>
    1848:	b7 2d       	mov	r27, r7
    184a:	b2 60       	ori	r27, 0x02	; 2
    184c:	7b 2e       	mov	r7, r27
    184e:	df 01       	movw	r26, r30
    1850:	ae 0d       	add	r26, r14
    1852:	bf 1d       	adc	r27, r15
    1854:	0c 93       	st	X, r16
    1856:	c7 01       	movw	r24, r14
    1858:	01 96       	adiw	r24, 0x01	; 1
    185a:	7c 01       	movw	r14, r24
    185c:	cc cf       	rjmp	.-104    	; 0x17f6 <f_open+0xfc>
    185e:	89 e0       	ldi	r24, 0x09	; 9
    1860:	7a cf       	rjmp	.-268    	; 0x1756 <f_open+0x5c>
    1862:	bf ef       	ldi	r27, 0xFF	; 255
    1864:	cb 1a       	sub	r12, r27
    1866:	db 0a       	sbc	r13, r27
    1868:	9d cf       	rjmp	.-198    	; 0x17a4 <f_open+0xaa>
    186a:	eb 88       	ldd	r14, Y+19	; 0x13
    186c:	fc 88       	ldd	r15, Y+20	; 0x14
    186e:	86 e0       	ldi	r24, 0x06	; 6
    1870:	98 2d       	mov	r25, r8
    1872:	9c 71       	andi	r25, 0x1C	; 28
    1874:	09 f0       	breq	.+2      	; 0x1878 <f_open+0x17e>
    1876:	04 c1       	rjmp	.+520    	; 0x1a80 <f_open+0x386>
    1878:	81 11       	cpse	r24, r1
    187a:	6d cf       	rjmp	.-294    	; 0x1756 <f_open+0x5c>
    187c:	d7 01       	movw	r26, r14
    187e:	1b 96       	adiw	r26, 0x0b	; 11
    1880:	6c 91       	ld	r22, X
    1882:	64 fd       	sbrc	r22, 4
    1884:	63 c1       	rjmp	.+710    	; 0x1b4c <f_open+0x452>
    1886:	81 fe       	sbrs	r8, 1
    1888:	02 c0       	rjmp	.+4      	; 0x188e <f_open+0x194>
    188a:	60 fd       	sbrc	r22, 0
    188c:	05 c1       	rjmp	.+522    	; 0x1a98 <f_open+0x39e>
    188e:	c9 80       	ldd	r12, Y+1	; 0x01
    1890:	da 80       	ldd	r13, Y+2	; 0x02
    1892:	83 fc       	sbrc	r8, 3
    1894:	57 c1       	rjmp	.+686    	; 0x1b44 <f_open+0x44a>
    1896:	f6 01       	movw	r30, r12
    1898:	82 a5       	ldd	r24, Z+42	; 0x2a
    189a:	93 a5       	ldd	r25, Z+43	; 0x2b
    189c:	a4 a5       	ldd	r26, Z+44	; 0x2c
    189e:	b5 a5       	ldd	r27, Z+45	; 0x2d
    18a0:	f1 01       	movw	r30, r2
    18a2:	82 8f       	std	Z+26, r24	; 0x1a
    18a4:	93 8f       	std	Z+27, r25	; 0x1b
    18a6:	a4 8f       	std	Z+28, r26	; 0x1c
    18a8:	b5 8f       	std	Z+29, r27	; 0x1d
    18aa:	f7 8e       	std	Z+31, r15	; 0x1f
    18ac:	e6 8e       	std	Z+30, r14	; 0x1e
    18ae:	2d a1       	ldd	r18, Y+37	; 0x25
    18b0:	24 83       	std	Z+4, r18	; 0x04
    18b2:	15 82       	std	Z+5, r1	; 0x05
    18b4:	d7 01       	movw	r26, r14
    18b6:	5a 96       	adiw	r26, 0x1a	; 26
    18b8:	8d 91       	ld	r24, X+
    18ba:	9c 91       	ld	r25, X
    18bc:	5b 97       	sbiw	r26, 0x1b	; 27
    18be:	a0 e0       	ldi	r26, 0x00	; 0
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	f6 01       	movw	r30, r12
    18c4:	20 81       	ld	r18, Z
    18c6:	23 30       	cpi	r18, 0x03	; 3
    18c8:	09 f4       	brne	.+2      	; 0x18cc <f_open+0x1d2>
    18ca:	44 c1       	rjmp	.+648    	; 0x1b54 <f_open+0x45a>
    18cc:	f1 01       	movw	r30, r2
    18ce:	86 87       	std	Z+14, r24	; 0x0e
    18d0:	97 87       	std	Z+15, r25	; 0x0f
    18d2:	a0 8b       	std	Z+16, r26	; 0x10
    18d4:	b1 8b       	std	Z+17, r27	; 0x11
    18d6:	f7 01       	movw	r30, r14
    18d8:	84 8d       	ldd	r24, Z+28	; 0x1c
    18da:	95 8d       	ldd	r25, Z+29	; 0x1d
    18dc:	a6 8d       	ldd	r26, Z+30	; 0x1e
    18de:	b7 8d       	ldd	r27, Z+31	; 0x1f
    18e0:	f1 01       	movw	r30, r2
    18e2:	82 87       	std	Z+10, r24	; 0x0a
    18e4:	93 87       	std	Z+11, r25	; 0x0b
    18e6:	a4 87       	std	Z+12, r26	; 0x0c
    18e8:	b5 87       	std	Z+13, r27	; 0x0d
    18ea:	16 82       	std	Z+6, r1	; 0x06
    18ec:	17 82       	std	Z+7, r1	; 0x07
    18ee:	10 86       	std	Z+8, r1	; 0x08
    18f0:	11 86       	std	Z+9, r1	; 0x09
    18f2:	16 8a       	std	Z+22, r1	; 0x16
    18f4:	17 8a       	std	Z+23, r1	; 0x17
    18f6:	10 8e       	std	Z+24, r1	; 0x18
    18f8:	11 8e       	std	Z+25, r1	; 0x19
    18fa:	d1 82       	std	Z+1, r13	; 0x01
    18fc:	c0 82       	st	Z, r12
    18fe:	d6 01       	movw	r26, r12
    1900:	16 96       	adiw	r26, 0x06	; 6
    1902:	8d 91       	ld	r24, X+
    1904:	9c 91       	ld	r25, X
    1906:	17 97       	sbiw	r26, 0x07	; 7
    1908:	93 83       	std	Z+3, r25	; 0x03
    190a:	82 83       	std	Z+2, r24	; 0x02
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	23 cf       	rjmp	.-442    	; 0x1756 <f_open+0x5c>
    1910:	28 e0       	ldi	r18, 0x08	; 8
    1912:	a2 16       	cp	r10, r18
    1914:	b1 04       	cpc	r11, r1
    1916:	09 f0       	breq	.+2      	; 0x191a <f_open+0x220>
    1918:	a8 cf       	rjmp	.-176    	; 0x186a <f_open+0x170>
    191a:	77 0c       	add	r7, r7
    191c:	77 0c       	add	r7, r7
    191e:	a8 e0       	ldi	r26, 0x08	; 8
    1920:	ea 2e       	mov	r14, r26
    1922:	f1 2c       	mov	r15, r1
    1924:	bb e0       	ldi	r27, 0x0B	; 11
    1926:	ab 2e       	mov	r10, r27
    1928:	b1 2c       	mov	r11, r1
    192a:	65 cf       	rjmp	.-310    	; 0x17f6 <f_open+0xfc>
    192c:	8f e9       	ldi	r24, 0x9F	; 159
    192e:	80 0f       	add	r24, r16
    1930:	8a 31       	cpi	r24, 0x1A	; 26
    1932:	08 f0       	brcs	.+2      	; 0x1936 <f_open+0x23c>
    1934:	8c cf       	rjmp	.-232    	; 0x184e <f_open+0x154>
    1936:	27 2d       	mov	r18, r7
    1938:	21 60       	ori	r18, 0x01	; 1
    193a:	72 2e       	mov	r7, r18
    193c:	00 52       	subi	r16, 0x20	; 32
    193e:	87 cf       	rjmp	.-242    	; 0x184e <f_open+0x154>
    1940:	c4 0e       	add	r12, r20
    1942:	d5 1e       	adc	r13, r21
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	ef 28       	or	r14, r15
    1948:	09 f4       	brne	.+2      	; 0x194c <f_open+0x252>
    194a:	8f cf       	rjmp	.-226    	; 0x186a <f_open+0x170>
    194c:	90 81       	ld	r25, Z
    194e:	95 3e       	cpi	r25, 0xE5	; 229
    1950:	09 f4       	brne	.+2      	; 0x1954 <f_open+0x25a>
    1952:	62 c1       	rjmp	.+708    	; 0x1c18 <f_open+0x51e>
    1954:	98 e0       	ldi	r25, 0x08	; 8
    1956:	a9 16       	cp	r10, r25
    1958:	b1 04       	cpc	r11, r1
    195a:	09 f4       	brne	.+2      	; 0x195e <f_open+0x264>
    195c:	5a c1       	rjmp	.+692    	; 0x1c12 <f_open+0x518>
    195e:	97 2d       	mov	r25, r7
    1960:	93 70       	andi	r25, 0x03	; 3
    1962:	91 30       	cpi	r25, 0x01	; 1
    1964:	09 f4       	brne	.+2      	; 0x1968 <f_open+0x26e>
    1966:	53 c1       	rjmp	.+678    	; 0x1c0e <f_open+0x514>
    1968:	97 2d       	mov	r25, r7
    196a:	9c 70       	andi	r25, 0x0C	; 12
    196c:	94 30       	cpi	r25, 0x04	; 4
    196e:	09 f4       	brne	.+2      	; 0x1972 <f_open+0x278>
    1970:	4c c1       	rjmp	.+664    	; 0x1c0a <f_open+0x510>
    1972:	83 87       	std	Z+11, r24	; 0x0b
    1974:	ce 01       	movw	r24, r28
    1976:	01 96       	adiw	r24, 0x01	; 1
    1978:	0e 94 83 0a 	call	0x1506	; 0x1506 <dir_sdi.constprop.10>
    197c:	81 11       	cpse	r24, r1
    197e:	47 c0       	rjmp	.+142    	; 0x1a0e <f_open+0x314>
    1980:	4f 85       	ldd	r20, Y+15	; 0x0f
    1982:	58 89       	ldd	r21, Y+16	; 0x10
    1984:	69 89       	ldd	r22, Y+17	; 0x11
    1986:	7a 89       	ldd	r23, Y+18	; 0x12
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	9a 81       	ldd	r25, Y+2	; 0x02
    198c:	0e 94 a8 02 	call	0x550	; 0x550 <move_window>
    1990:	81 11       	cpse	r24, r1
    1992:	3d c0       	rjmp	.+122    	; 0x1a0e <f_open+0x314>
    1994:	eb 88       	ldd	r14, Y+19	; 0x13
    1996:	fc 88       	ldd	r15, Y+20	; 0x14
    1998:	d7 01       	movw	r26, r14
    199a:	4c 91       	ld	r20, X
    199c:	44 23       	and	r20, r20
    199e:	09 f4       	brne	.+2      	; 0x19a2 <f_open+0x2a8>
    19a0:	53 c0       	rjmp	.+166    	; 0x1a48 <f_open+0x34e>
    19a2:	1b 96       	adiw	r26, 0x0b	; 11
    19a4:	6c 91       	ld	r22, X
    19a6:	63 fd       	sbrc	r22, 3
    19a8:	29 c0       	rjmp	.+82     	; 0x19fc <f_open+0x302>
    19aa:	2d 89       	ldd	r18, Y+21	; 0x15
    19ac:	3e 89       	ldd	r19, Y+22	; 0x16
    19ae:	d9 01       	movw	r26, r18
    19b0:	f7 01       	movw	r30, r14
    19b2:	31 96       	adiw	r30, 0x01	; 1
    19b4:	c9 01       	movw	r24, r18
    19b6:	0b 96       	adiw	r24, 0x0b	; 11
    19b8:	01 c0       	rjmp	.+2      	; 0x19bc <f_open+0x2c2>
    19ba:	41 91       	ld	r20, Z+
    19bc:	5d 91       	ld	r21, X+
    19be:	54 13       	cpse	r21, r20
    19c0:	1d c0       	rjmp	.+58     	; 0x19fc <f_open+0x302>
    19c2:	8a 17       	cp	r24, r26
    19c4:	9b 07       	cpc	r25, r27
    19c6:	c9 f7       	brne	.-14     	; 0x19ba <f_open+0x2c0>
    19c8:	f9 01       	movw	r30, r18
    19ca:	83 85       	ldd	r24, Z+11	; 0x0b
    19cc:	82 fd       	sbrc	r24, 2
    19ce:	46 c0       	rjmp	.+140    	; 0x1a5c <f_open+0x362>
    19d0:	64 ff       	sbrs	r22, 4
    19d2:	38 c0       	rjmp	.+112    	; 0x1a44 <f_open+0x34a>
    19d4:	d7 01       	movw	r26, r14
    19d6:	5a 96       	adiw	r26, 0x1a	; 26
    19d8:	8d 91       	ld	r24, X+
    19da:	9c 91       	ld	r25, X
    19dc:	5b 97       	sbiw	r26, 0x1b	; 27
    19de:	a0 e0       	ldi	r26, 0x00	; 0
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e9 81       	ldd	r30, Y+1	; 0x01
    19e4:	fa 81       	ldd	r31, Y+2	; 0x02
    19e6:	40 81       	ld	r20, Z
    19e8:	43 30       	cpi	r20, 0x03	; 3
    19ea:	b1 f0       	breq	.+44     	; 0x1a18 <f_open+0x31e>
    19ec:	8f 83       	std	Y+7, r24	; 0x07
    19ee:	98 87       	std	Y+8, r25	; 0x08
    19f0:	a9 87       	std	Y+9, r26	; 0x09
    19f2:	ba 87       	std	Y+10, r27	; 0x0a
    19f4:	d6 01       	movw	r26, r12
    19f6:	8c 91       	ld	r24, X
    19f8:	f9 01       	movw	r30, r18
    19fa:	e9 ce       	rjmp	.-558    	; 0x17ce <f_open+0xd4>
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	ce 01       	movw	r24, r28
    1a02:	01 96       	adiw	r24, 0x01	; 1
    1a04:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <dir_next>
    1a08:	88 23       	and	r24, r24
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <f_open+0x314>
    1a0c:	b9 cf       	rjmp	.-142    	; 0x1980 <f_open+0x286>
    1a0e:	84 30       	cpi	r24, 0x04	; 4
    1a10:	81 f0       	breq	.+32     	; 0x1a32 <f_open+0x338>
    1a12:	eb 88       	ldd	r14, Y+19	; 0x13
    1a14:	fc 88       	ldd	r15, Y+20	; 0x14
    1a16:	2c cf       	rjmp	.-424    	; 0x1870 <f_open+0x176>
    1a18:	f7 01       	movw	r30, r14
    1a1a:	44 89       	ldd	r20, Z+20	; 0x14
    1a1c:	55 89       	ldd	r21, Z+21	; 0x15
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	ba 01       	movw	r22, r20
    1a24:	55 27       	eor	r21, r21
    1a26:	44 27       	eor	r20, r20
    1a28:	84 2b       	or	r24, r20
    1a2a:	95 2b       	or	r25, r21
    1a2c:	a6 2b       	or	r26, r22
    1a2e:	b7 2b       	or	r27, r23
    1a30:	dd cf       	rjmp	.-70     	; 0x19ec <f_open+0x2f2>
    1a32:	ed 89       	ldd	r30, Y+21	; 0x15
    1a34:	fe 89       	ldd	r31, Y+22	; 0x16
    1a36:	23 85       	ldd	r18, Z+11	; 0x0b
    1a38:	9b 89       	ldd	r25, Y+19	; 0x13
    1a3a:	8c 89       	ldd	r24, Y+20	; 0x14
    1a3c:	e9 2e       	mov	r14, r25
    1a3e:	f8 2e       	mov	r15, r24
    1a40:	22 fd       	sbrc	r18, 2
    1a42:	86 c0       	rjmp	.+268    	; 0x1b50 <f_open+0x456>
    1a44:	85 e0       	ldi	r24, 0x05	; 5
    1a46:	14 cf       	rjmp	.-472    	; 0x1870 <f_open+0x176>
    1a48:	ed 89       	ldd	r30, Y+21	; 0x15
    1a4a:	fe 89       	ldd	r31, Y+22	; 0x16
    1a4c:	23 85       	ldd	r18, Z+11	; 0x0b
    1a4e:	9e 2d       	mov	r25, r14
    1a50:	8f 2d       	mov	r24, r15
    1a52:	f4 cf       	rjmp	.-24     	; 0x1a3c <f_open+0x342>
    1a54:	c4 0e       	add	r12, r20
    1a56:	d5 1e       	adc	r13, r21
    1a58:	84 e0       	ldi	r24, 0x04	; 4
    1a5a:	75 cf       	rjmp	.-278    	; 0x1946 <f_open+0x24c>
    1a5c:	e1 14       	cp	r14, r1
    1a5e:	f1 04       	cpc	r15, r1
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <f_open+0x36a>
    1a62:	ee c0       	rjmp	.+476    	; 0x1c40 <f_open+0x546>
    1a64:	88 2d       	mov	r24, r8
    1a66:	8c 71       	andi	r24, 0x1C	; 28
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <f_open+0x372>
    1a6a:	0b cf       	rjmp	.-490    	; 0x1882 <f_open+0x188>
    1a6c:	61 71       	andi	r22, 0x11	; 17
    1a6e:	a1 f4       	brne	.+40     	; 0x1a98 <f_open+0x39e>
    1a70:	82 fe       	sbrs	r8, 2
    1a72:	28 c0       	rjmp	.+80     	; 0x1ac4 <f_open+0x3ca>
    1a74:	88 e0       	ldi	r24, 0x08	; 8
    1a76:	6f ce       	rjmp	.-802    	; 0x1756 <f_open+0x5c>
    1a78:	08 2d       	mov	r16, r8
    1a7a:	0c 71       	andi	r16, 0x1C	; 28
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <f_open+0x386>
    1a7e:	6b ce       	rjmp	.-810    	; 0x1756 <f_open+0x5c>
    1a80:	84 30       	cpi	r24, 0x04	; 4
    1a82:	c9 f4       	brne	.+50     	; 0x1ab6 <f_open+0x3bc>
    1a84:	ce 01       	movw	r24, r28
    1a86:	01 96       	adiw	r24, 0x01	; 1
    1a88:	0e 94 83 0a 	call	0x1506	; 0x1506 <dir_sdi.constprop.10>
    1a8c:	88 23       	and	r24, r24
    1a8e:	09 f4       	brne	.+2      	; 0x1a92 <f_open+0x398>
    1a90:	76 c0       	rjmp	.+236    	; 0x1b7e <f_open+0x484>
    1a92:	84 30       	cpi	r24, 0x04	; 4
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <f_open+0x39e>
    1a96:	5f ce       	rjmp	.-834    	; 0x1756 <f_open+0x5c>
    1a98:	87 e0       	ldi	r24, 0x07	; 7
    1a9a:	5d ce       	rjmp	.-838    	; 0x1756 <f_open+0x5c>
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	0e 94 83 0a 	call	0x1506	; 0x1506 <dir_sdi.constprop.10>
    1aa4:	1c 8a       	std	Y+20, r1	; 0x14
    1aa6:	1b 8a       	std	Y+19, r1	; 0x13
    1aa8:	81 11       	cpse	r24, r1
    1aaa:	e6 cf       	rjmp	.-52     	; 0x1a78 <f_open+0x37e>
    1aac:	08 2d       	mov	r16, r8
    1aae:	0c 71       	andi	r16, 0x1C	; 28
    1ab0:	86 e0       	ldi	r24, 0x06	; 6
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <f_open+0x3bc>
    1ab4:	50 ce       	rjmp	.-864    	; 0x1756 <f_open+0x5c>
    1ab6:	eb 88       	ldd	r14, Y+19	; 0x13
    1ab8:	fc 88       	ldd	r15, Y+20	; 0x14
    1aba:	ed a1       	ldd	r30, Y+37	; 0x25
    1abc:	e8 60       	ori	r30, 0x08	; 8
    1abe:	ed a3       	std	Y+37, r30	; 0x25
    1ac0:	81 11       	cpse	r24, r1
    1ac2:	49 ce       	rjmp	.-878    	; 0x1756 <f_open+0x5c>
    1ac4:	c9 80       	ldd	r12, Y+1	; 0x01
    1ac6:	da 80       	ldd	r13, Y+2	; 0x02
    1ac8:	fd a1       	ldd	r31, Y+37	; 0x25
    1aca:	f3 ff       	sbrs	r31, 3
    1acc:	e4 ce       	rjmp	.-568    	; 0x1896 <f_open+0x19c>
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	a1 e2       	ldi	r26, 0x21	; 33
    1ad4:	b8 e4       	ldi	r27, 0x48	; 72
    1ad6:	f7 01       	movw	r30, r14
    1ad8:	86 87       	std	Z+14, r24	; 0x0e
    1ada:	97 87       	std	Z+15, r25	; 0x0f
    1adc:	a0 8b       	std	Z+16, r26	; 0x10
    1ade:	b1 8b       	std	Z+17, r27	; 0x11
    1ae0:	86 8b       	std	Z+22, r24	; 0x16
    1ae2:	97 8b       	std	Z+23, r25	; 0x17
    1ae4:	a0 8f       	std	Z+24, r26	; 0x18
    1ae6:	b1 8f       	std	Z+25, r27	; 0x19
    1ae8:	13 86       	std	Z+11, r1	; 0x0b
    1aea:	d7 01       	movw	r26, r14
    1aec:	14 8e       	std	Z+28, r1	; 0x1c
    1aee:	15 8e       	std	Z+29, r1	; 0x1d
    1af0:	16 8e       	std	Z+30, r1	; 0x1e
    1af2:	17 8e       	std	Z+31, r1	; 0x1f
    1af4:	82 8d       	ldd	r24, Z+26	; 0x1a
    1af6:	93 8d       	ldd	r25, Z+27	; 0x1b
    1af8:	2c 01       	movw	r4, r24
    1afa:	61 2c       	mov	r6, r1
    1afc:	71 2c       	mov	r7, r1
    1afe:	f6 01       	movw	r30, r12
    1b00:	80 81       	ld	r24, Z
    1b02:	83 30       	cpi	r24, 0x03	; 3
    1b04:	69 f4       	brne	.+26     	; 0x1b20 <f_open+0x426>
    1b06:	54 96       	adiw	r26, 0x14	; 20
    1b08:	8d 91       	ld	r24, X+
    1b0a:	9c 91       	ld	r25, X
    1b0c:	55 97       	sbiw	r26, 0x15	; 21
    1b0e:	a0 e0       	ldi	r26, 0x00	; 0
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	dc 01       	movw	r26, r24
    1b14:	99 27       	eor	r25, r25
    1b16:	88 27       	eor	r24, r24
    1b18:	48 2a       	or	r4, r24
    1b1a:	59 2a       	or	r5, r25
    1b1c:	6a 2a       	or	r6, r26
    1b1e:	7b 2a       	or	r7, r27
    1b20:	d7 01       	movw	r26, r14
    1b22:	5b 96       	adiw	r26, 0x1b	; 27
    1b24:	1c 92       	st	X, r1
    1b26:	1e 92       	st	-X, r1
    1b28:	5a 97       	sbiw	r26, 0x1a	; 26
    1b2a:	55 96       	adiw	r26, 0x15	; 21
    1b2c:	1c 92       	st	X, r1
    1b2e:	1e 92       	st	-X, r1
    1b30:	54 97       	sbiw	r26, 0x14	; 20
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	f6 01       	movw	r30, r12
    1b36:	84 83       	std	Z+4, r24	; 0x04
    1b38:	41 14       	cp	r4, r1
    1b3a:	51 04       	cpc	r5, r1
    1b3c:	61 04       	cpc	r6, r1
    1b3e:	71 04       	cpc	r7, r1
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <f_open+0x44a>
    1b42:	6c c0       	rjmp	.+216    	; 0x1c1c <f_open+0x522>
    1b44:	bd a1       	ldd	r27, Y+37	; 0x25
    1b46:	b0 62       	ori	r27, 0x20	; 32
    1b48:	bd a3       	std	Y+37, r27	; 0x25
    1b4a:	a5 ce       	rjmp	.-694    	; 0x1896 <f_open+0x19c>
    1b4c:	84 e0       	ldi	r24, 0x04	; 4
    1b4e:	03 ce       	rjmp	.-1018   	; 0x1756 <f_open+0x5c>
    1b50:	84 e0       	ldi	r24, 0x04	; 4
    1b52:	8e ce       	rjmp	.-740    	; 0x1870 <f_open+0x176>
    1b54:	f7 01       	movw	r30, r14
    1b56:	44 89       	ldd	r20, Z+20	; 0x14
    1b58:	55 89       	ldd	r21, Z+21	; 0x15
    1b5a:	60 e0       	ldi	r22, 0x00	; 0
    1b5c:	70 e0       	ldi	r23, 0x00	; 0
    1b5e:	ba 01       	movw	r22, r20
    1b60:	55 27       	eor	r21, r21
    1b62:	44 27       	eor	r20, r20
    1b64:	84 2b       	or	r24, r20
    1b66:	95 2b       	or	r25, r21
    1b68:	a6 2b       	or	r26, r22
    1b6a:	b7 2b       	or	r27, r23
    1b6c:	af ce       	rjmp	.-674    	; 0x18cc <f_open+0x1d2>
    1b6e:	61 e0       	ldi	r22, 0x01	; 1
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	ce 01       	movw	r24, r28
    1b74:	01 96       	adiw	r24, 0x01	; 1
    1b76:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <dir_next>
    1b7a:	81 11       	cpse	r24, r1
    1b7c:	8a cf       	rjmp	.-236    	; 0x1a92 <f_open+0x398>
    1b7e:	4f 85       	ldd	r20, Y+15	; 0x0f
    1b80:	58 89       	ldd	r21, Y+16	; 0x10
    1b82:	69 89       	ldd	r22, Y+17	; 0x11
    1b84:	7a 89       	ldd	r23, Y+18	; 0x12
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8a:	0e 94 a8 02 	call	0x550	; 0x550 <move_window>
    1b8e:	81 11       	cpse	r24, r1
    1b90:	80 cf       	rjmp	.-256    	; 0x1a92 <f_open+0x398>
    1b92:	eb 89       	ldd	r30, Y+19	; 0x13
    1b94:	fc 89       	ldd	r31, Y+20	; 0x14
    1b96:	80 81       	ld	r24, Z
    1b98:	85 3e       	cpi	r24, 0xE5	; 229
    1b9a:	11 f0       	breq	.+4      	; 0x1ba0 <f_open+0x4a6>
    1b9c:	81 11       	cpse	r24, r1
    1b9e:	e7 cf       	rjmp	.-50     	; 0x1b6e <f_open+0x474>
    1ba0:	4f 85       	ldd	r20, Y+15	; 0x0f
    1ba2:	58 89       	ldd	r21, Y+16	; 0x10
    1ba4:	69 89       	ldd	r22, Y+17	; 0x11
    1ba6:	7a 89       	ldd	r23, Y+18	; 0x12
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bac:	0e 94 a8 02 	call	0x550	; 0x550 <move_window>
    1bb0:	81 11       	cpse	r24, r1
    1bb2:	d1 cd       	rjmp	.-1118   	; 0x1756 <f_open+0x5c>
    1bb4:	eb 89       	ldd	r30, Y+19	; 0x13
    1bb6:	fc 89       	ldd	r31, Y+20	; 0x14
    1bb8:	cf 01       	movw	r24, r30
    1bba:	80 96       	adiw	r24, 0x20	; 32
    1bbc:	11 92       	st	Z+, r1
    1bbe:	8e 17       	cp	r24, r30
    1bc0:	9f 07       	cpc	r25, r31
    1bc2:	e1 f7       	brne	.-8      	; 0x1bbc <f_open+0x4c2>
    1bc4:	8d 89       	ldd	r24, Y+21	; 0x15
    1bc6:	9e 89       	ldd	r25, Y+22	; 0x16
    1bc8:	0b 89       	ldd	r16, Y+19	; 0x13
    1bca:	1c 89       	ldd	r17, Y+20	; 0x14
    1bcc:	9c 01       	movw	r18, r24
    1bce:	a8 01       	movw	r20, r16
    1bd0:	46 5f       	subi	r20, 0xF6	; 246
    1bd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd4:	d8 01       	movw	r26, r16
    1bd6:	f9 01       	movw	r30, r18
    1bd8:	61 91       	ld	r22, Z+
    1bda:	71 91       	ld	r23, Z+
    1bdc:	9f 01       	movw	r18, r30
    1bde:	6d 93       	st	X+, r22
    1be0:	7d 93       	st	X+, r23
    1be2:	a4 17       	cp	r26, r20
    1be4:	b5 07       	cpc	r27, r21
    1be6:	b9 f7       	brne	.-18     	; 0x1bd6 <f_open+0x4dc>
    1be8:	dc 01       	movw	r26, r24
    1bea:	1a 96       	adiw	r26, 0x0a	; 10
    1bec:	8c 91       	ld	r24, X
    1bee:	f8 01       	movw	r30, r16
    1bf0:	82 87       	std	Z+10, r24	; 0x0a
    1bf2:	c9 80       	ldd	r12, Y+1	; 0x01
    1bf4:	da 80       	ldd	r13, Y+2	; 0x02
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	d6 01       	movw	r26, r12
    1bfa:	14 96       	adiw	r26, 0x04	; 4
    1bfc:	8c 93       	st	X, r24
    1bfe:	bd a1       	ldd	r27, Y+37	; 0x25
    1c00:	b8 60       	ori	r27, 0x08	; 8
    1c02:	bd a3       	std	Y+37, r27	; 0x25
    1c04:	eb 88       	ldd	r14, Y+19	; 0x13
    1c06:	fc 88       	ldd	r15, Y+20	; 0x14
    1c08:	5f cf       	rjmp	.-322    	; 0x1ac8 <f_open+0x3ce>
    1c0a:	88 60       	ori	r24, 0x08	; 8
    1c0c:	b2 ce       	rjmp	.-668    	; 0x1972 <f_open+0x278>
    1c0e:	80 61       	ori	r24, 0x10	; 16
    1c10:	ab ce       	rjmp	.-682    	; 0x1968 <f_open+0x26e>
    1c12:	77 0c       	add	r7, r7
    1c14:	77 0c       	add	r7, r7
    1c16:	a3 ce       	rjmp	.-698    	; 0x195e <f_open+0x264>
    1c18:	90 82       	st	Z, r9
    1c1a:	9c ce       	rjmp	.-712    	; 0x1954 <f_open+0x25a>
    1c1c:	f2 e0       	ldi	r31, 0x02	; 2
    1c1e:	4f 16       	cp	r4, r31
    1c20:	51 04       	cpc	r5, r1
    1c22:	61 04       	cpc	r6, r1
    1c24:	71 04       	cpc	r7, r1
    1c26:	50 f0       	brcs	.+20     	; 0x1c3c <f_open+0x542>
    1c28:	f6 01       	movw	r30, r12
    1c2a:	82 89       	ldd	r24, Z+18	; 0x12
    1c2c:	93 89       	ldd	r25, Z+19	; 0x13
    1c2e:	a4 89       	ldd	r26, Z+20	; 0x14
    1c30:	b5 89       	ldd	r27, Z+21	; 0x15
    1c32:	48 16       	cp	r4, r24
    1c34:	59 06       	cpc	r5, r25
    1c36:	6a 06       	cpc	r6, r26
    1c38:	7b 06       	cpc	r7, r27
    1c3a:	20 f0       	brcs	.+8      	; 0x1c44 <f_open+0x54a>
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	8b cd       	rjmp	.-1258   	; 0x1756 <f_open+0x5c>
    1c40:	86 e0       	ldi	r24, 0x06	; 6
    1c42:	89 cd       	rjmp	.-1262   	; 0x1756 <f_open+0x5c>
    1c44:	82 a5       	ldd	r24, Z+42	; 0x2a
    1c46:	93 a5       	ldd	r25, Z+43	; 0x2b
    1c48:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1c4a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1c4c:	8a a7       	std	Y+42, r24	; 0x2a
    1c4e:	9b a7       	std	Y+43, r25	; 0x2b
    1c50:	ac a7       	std	Y+44, r26	; 0x2c
    1c52:	bd a7       	std	Y+45, r27	; 0x2d
    1c54:	53 01       	movw	r10, r6
    1c56:	42 01       	movw	r8, r4
    1c58:	38 c0       	rjmp	.+112    	; 0x1cca <f_open+0x5d0>
    1c5a:	f6 01       	movw	r30, r12
    1c5c:	82 89       	ldd	r24, Z+18	; 0x12
    1c5e:	93 89       	ldd	r25, Z+19	; 0x13
    1c60:	a4 89       	ldd	r26, Z+20	; 0x14
    1c62:	b5 89       	ldd	r27, Z+21	; 0x15
    1c64:	88 16       	cp	r8, r24
    1c66:	99 06       	cpc	r9, r25
    1c68:	aa 06       	cpc	r10, r26
    1c6a:	bb 06       	cpc	r11, r27
    1c6c:	38 f7       	brcc	.-50     	; 0x1c3c <f_open+0x542>
    1c6e:	00 e0       	ldi	r16, 0x00	; 0
    1c70:	10 e0       	ldi	r17, 0x00	; 0
    1c72:	98 01       	movw	r18, r16
    1c74:	b5 01       	movw	r22, r10
    1c76:	a4 01       	movw	r20, r8
    1c78:	c6 01       	movw	r24, r12
    1c7a:	0e 94 d7 06 	call	0xdae	; 0xdae <put_fat.part.5>
    1c7e:	81 11       	cpse	r24, r1
    1c80:	6a cd       	rjmp	.-1324   	; 0x1756 <f_open+0x5c>
    1c82:	f6 01       	movw	r30, r12
    1c84:	86 85       	ldd	r24, Z+14	; 0x0e
    1c86:	97 85       	ldd	r25, Z+15	; 0x0f
    1c88:	a0 89       	ldd	r26, Z+16	; 0x10
    1c8a:	b1 89       	ldd	r27, Z+17	; 0x11
    1c8c:	8f 3f       	cpi	r24, 0xFF	; 255
    1c8e:	ff ef       	ldi	r31, 0xFF	; 255
    1c90:	9f 07       	cpc	r25, r31
    1c92:	af 07       	cpc	r26, r31
    1c94:	bf 07       	cpc	r27, r31
    1c96:	59 f0       	breq	.+22     	; 0x1cae <f_open+0x5b4>
    1c98:	01 96       	adiw	r24, 0x01	; 1
    1c9a:	a1 1d       	adc	r26, r1
    1c9c:	b1 1d       	adc	r27, r1
    1c9e:	f6 01       	movw	r30, r12
    1ca0:	86 87       	std	Z+14, r24	; 0x0e
    1ca2:	97 87       	std	Z+15, r25	; 0x0f
    1ca4:	a0 8b       	std	Z+16, r26	; 0x10
    1ca6:	b1 8b       	std	Z+17, r27	; 0x11
    1ca8:	85 81       	ldd	r24, Z+5	; 0x05
    1caa:	81 60       	ori	r24, 0x01	; 1
    1cac:	85 83       	std	Z+5, r24	; 0x05
    1cae:	8e a0       	ldd	r8, Y+38	; 0x26
    1cb0:	9f a0       	ldd	r9, Y+39	; 0x27
    1cb2:	a8 a4       	ldd	r10, Y+40	; 0x28
    1cb4:	b9 a4       	ldd	r11, Y+41	; 0x29
    1cb6:	f6 01       	movw	r30, r12
    1cb8:	82 89       	ldd	r24, Z+18	; 0x12
    1cba:	93 89       	ldd	r25, Z+19	; 0x13
    1cbc:	a4 89       	ldd	r26, Z+20	; 0x14
    1cbe:	b5 89       	ldd	r27, Z+21	; 0x15
    1cc0:	88 16       	cp	r8, r24
    1cc2:	99 06       	cpc	r9, r25
    1cc4:	aa 06       	cpc	r10, r26
    1cc6:	bb 06       	cpc	r11, r27
    1cc8:	20 f5       	brcc	.+72     	; 0x1d12 <f_open+0x618>
    1cca:	b5 01       	movw	r22, r10
    1ccc:	a4 01       	movw	r20, r8
    1cce:	c6 01       	movw	r24, r12
    1cd0:	0e 94 19 06 	call	0xc32	; 0xc32 <get_fat.part.4>
    1cd4:	6e a3       	std	Y+38, r22	; 0x26
    1cd6:	7f a3       	std	Y+39, r23	; 0x27
    1cd8:	88 a7       	std	Y+40, r24	; 0x28
    1cda:	99 a7       	std	Y+41, r25	; 0x29
    1cdc:	61 15       	cp	r22, r1
    1cde:	71 05       	cpc	r23, r1
    1ce0:	81 05       	cpc	r24, r1
    1ce2:	91 05       	cpc	r25, r1
    1ce4:	b1 f0       	breq	.+44     	; 0x1d12 <f_open+0x618>
    1ce6:	61 30       	cpi	r22, 0x01	; 1
    1ce8:	71 05       	cpc	r23, r1
    1cea:	81 05       	cpc	r24, r1
    1cec:	91 05       	cpc	r25, r1
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <f_open+0x5f8>
    1cf0:	a5 cf       	rjmp	.-182    	; 0x1c3c <f_open+0x542>
    1cf2:	6f 3f       	cpi	r22, 0xFF	; 255
    1cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfa:	49 f0       	breq	.+18     	; 0x1d0e <f_open+0x614>
    1cfc:	e2 e0       	ldi	r30, 0x02	; 2
    1cfe:	8e 16       	cp	r8, r30
    1d00:	91 04       	cpc	r9, r1
    1d02:	a1 04       	cpc	r10, r1
    1d04:	b1 04       	cpc	r11, r1
    1d06:	08 f0       	brcs	.+2      	; 0x1d0a <f_open+0x610>
    1d08:	a8 cf       	rjmp	.-176    	; 0x1c5a <f_open+0x560>
    1d0a:	82 e0       	ldi	r24, 0x02	; 2
    1d0c:	24 cd       	rjmp	.-1464   	; 0x1756 <f_open+0x5c>
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	22 cd       	rjmp	.-1468   	; 0x1756 <f_open+0x5c>
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	9a 81       	ldd	r25, Y+2	; 0x02
    1d16:	b3 01       	movw	r22, r6
    1d18:	a2 01       	movw	r20, r4
    1d1a:	41 50       	subi	r20, 0x01	; 1
    1d1c:	51 09       	sbc	r21, r1
    1d1e:	61 09       	sbc	r22, r1
    1d20:	71 09       	sbc	r23, r1
    1d22:	fc 01       	movw	r30, r24
    1d24:	42 87       	std	Z+10, r20	; 0x0a
    1d26:	53 87       	std	Z+11, r21	; 0x0b
    1d28:	64 87       	std	Z+12, r22	; 0x0c
    1d2a:	75 87       	std	Z+13, r23	; 0x0d
    1d2c:	4a a5       	ldd	r20, Y+42	; 0x2a
    1d2e:	5b a5       	ldd	r21, Y+43	; 0x2b
    1d30:	6c a5       	ldd	r22, Y+44	; 0x2c
    1d32:	7d a5       	ldd	r23, Y+45	; 0x2d
    1d34:	0e 94 a8 02 	call	0x550	; 0x550 <move_window>
    1d38:	81 11       	cpse	r24, r1
    1d3a:	0d cd       	rjmp	.-1510   	; 0x1756 <f_open+0x5c>
    1d3c:	c9 80       	ldd	r12, Y+1	; 0x01
    1d3e:	da 80       	ldd	r13, Y+2	; 0x02
    1d40:	01 cf       	rjmp	.-510    	; 0x1b44 <f_open+0x44a>

00001d42 <f_read>:
    1d42:	2f 92       	push	r2
    1d44:	3f 92       	push	r3
    1d46:	4f 92       	push	r4
    1d48:	5f 92       	push	r5
    1d4a:	6f 92       	push	r6
    1d4c:	7f 92       	push	r7
    1d4e:	8f 92       	push	r8
    1d50:	9f 92       	push	r9
    1d52:	af 92       	push	r10
    1d54:	bf 92       	push	r11
    1d56:	cf 92       	push	r12
    1d58:	df 92       	push	r13
    1d5a:	ef 92       	push	r14
    1d5c:	ff 92       	push	r15
    1d5e:	0f 93       	push	r16
    1d60:	1f 93       	push	r17
    1d62:	cf 93       	push	r28
    1d64:	df 93       	push	r29
    1d66:	ec 01       	movw	r28, r24
    1d68:	6b 01       	movw	r12, r22
    1d6a:	7a 01       	movw	r14, r20
    1d6c:	59 01       	movw	r10, r18
    1d6e:	f9 01       	movw	r30, r18
    1d70:	11 82       	std	Z+1, r1	; 0x01
    1d72:	10 82       	st	Z, r1
    1d74:	0e 94 2a 02 	call	0x454	; 0x454 <validate>
    1d78:	81 11       	cpse	r24, r1
    1d7a:	07 c0       	rjmp	.+14     	; 0x1d8a <f_read+0x48>
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	81 11       	cpse	r24, r1
    1d80:	04 c0       	rjmp	.+8      	; 0x1d8a <f_read+0x48>
    1d82:	8c 81       	ldd	r24, Y+4	; 0x04
    1d84:	80 fd       	sbrc	r24, 0
    1d86:	14 c0       	rjmp	.+40     	; 0x1db0 <f_read+0x6e>
    1d88:	87 e0       	ldi	r24, 0x07	; 7
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	ff 90       	pop	r15
    1d94:	ef 90       	pop	r14
    1d96:	df 90       	pop	r13
    1d98:	cf 90       	pop	r12
    1d9a:	bf 90       	pop	r11
    1d9c:	af 90       	pop	r10
    1d9e:	9f 90       	pop	r9
    1da0:	8f 90       	pop	r8
    1da2:	7f 90       	pop	r7
    1da4:	6f 90       	pop	r6
    1da6:	5f 90       	pop	r5
    1da8:	4f 90       	pop	r4
    1daa:	3f 90       	pop	r3
    1dac:	2f 90       	pop	r2
    1dae:	08 95       	ret
    1db0:	8e 81       	ldd	r24, Y+6	; 0x06
    1db2:	9f 81       	ldd	r25, Y+7	; 0x07
    1db4:	a8 85       	ldd	r26, Y+8	; 0x08
    1db6:	b9 85       	ldd	r27, Y+9	; 0x09
    1db8:	4a 85       	ldd	r20, Y+10	; 0x0a
    1dba:	5b 85       	ldd	r21, Y+11	; 0x0b
    1dbc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dbe:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dc0:	48 1b       	sub	r20, r24
    1dc2:	59 0b       	sbc	r21, r25
    1dc4:	6a 0b       	sbc	r22, r26
    1dc6:	7b 0b       	sbc	r23, r27
    1dc8:	87 01       	movw	r16, r14
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 17       	cp	r20, r16
    1dd0:	51 07       	cpc	r21, r17
    1dd2:	62 07       	cpc	r22, r18
    1dd4:	73 07       	cpc	r23, r19
    1dd6:	08 f4       	brcc	.+2      	; 0x1dda <f_read+0x98>
    1dd8:	7a 01       	movw	r14, r20
    1dda:	e1 14       	cp	r14, r1
    1ddc:	f1 04       	cpc	r15, r1
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <f_read+0xa0>
    1de0:	71 c0       	rjmp	.+226    	; 0x1ec4 <f_read+0x182>
    1de2:	21 2c       	mov	r2, r1
    1de4:	42 e0       	ldi	r20, 0x02	; 2
    1de6:	34 2e       	mov	r3, r20
    1de8:	ac 01       	movw	r20, r24
    1dea:	bd 01       	movw	r22, r26
    1dec:	51 70       	andi	r21, 0x01	; 1
    1dee:	66 27       	eor	r22, r22
    1df0:	77 27       	eor	r23, r23
    1df2:	45 2b       	or	r20, r21
    1df4:	46 2b       	or	r20, r22
    1df6:	47 2b       	or	r20, r23
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <f_read+0xba>
    1dfa:	66 c0       	rjmp	.+204    	; 0x1ec8 <f_read+0x186>
    1dfc:	4e 89       	ldd	r20, Y+22	; 0x16
    1dfe:	5f 89       	ldd	r21, Y+23	; 0x17
    1e00:	68 8d       	ldd	r22, Y+24	; 0x18
    1e02:	79 8d       	ldd	r23, Y+25	; 0x19
    1e04:	e8 81       	ld	r30, Y
    1e06:	f9 81       	ldd	r31, Y+1	; 0x01
    1e08:	2c 01       	movw	r4, r24
    1e0a:	21 e0       	ldi	r18, 0x01	; 1
    1e0c:	52 22       	and	r5, r18
    1e0e:	81 01       	movw	r16, r2
    1e10:	04 19       	sub	r16, r4
    1e12:	15 09       	sbc	r17, r5
    1e14:	e0 16       	cp	r14, r16
    1e16:	f1 06       	cpc	r15, r17
    1e18:	08 f4       	brcc	.+2      	; 0x1e1c <f_read+0xda>
    1e1a:	87 01       	movw	r16, r14
    1e1c:	cf 01       	movw	r24, r30
    1e1e:	0e 94 a8 02 	call	0x550	; 0x550 <move_window>
    1e22:	81 11       	cpse	r24, r1
    1e24:	1a c1       	rjmp	.+564    	; 0x205a <f_read+0x318>
    1e26:	4e 80       	ldd	r4, Y+6	; 0x06
    1e28:	5f 80       	ldd	r5, Y+7	; 0x07
    1e2a:	68 84       	ldd	r6, Y+8	; 0x08
    1e2c:	79 84       	ldd	r7, Y+9	; 0x09
    1e2e:	d3 01       	movw	r26, r6
    1e30:	c2 01       	movw	r24, r4
    1e32:	91 70       	andi	r25, 0x01	; 1
    1e34:	aa 27       	eor	r26, r26
    1e36:	bb 27       	eor	r27, r27
    1e38:	9c 01       	movw	r18, r24
    1e3a:	22 5d       	subi	r18, 0xD2	; 210
    1e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3e:	88 81       	ld	r24, Y
    1e40:	99 81       	ldd	r25, Y+1	; 0x01
    1e42:	28 0f       	add	r18, r24
    1e44:	39 1f       	adc	r19, r25
    1e46:	01 30       	cpi	r16, 0x01	; 1
    1e48:	11 05       	cpc	r17, r1
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <f_read+0x10c>
    1e4c:	09 c1       	rjmp	.+530    	; 0x2060 <f_read+0x31e>
    1e4e:	d9 01       	movw	r26, r18
    1e50:	c8 01       	movw	r24, r16
    1e52:	f6 01       	movw	r30, r12
    1e54:	4d 91       	ld	r20, X+
    1e56:	5d 91       	ld	r21, X+
    1e58:	41 93       	st	Z+, r20
    1e5a:	51 93       	st	Z+, r21
    1e5c:	02 97       	sbiw	r24, 0x02	; 2
    1e5e:	82 30       	cpi	r24, 0x02	; 2
    1e60:	91 05       	cpc	r25, r1
    1e62:	c0 f7       	brcc	.-16     	; 0x1e54 <f_read+0x112>
    1e64:	c8 01       	movw	r24, r16
    1e66:	02 97       	sbiw	r24, 0x02	; 2
    1e68:	8e 7f       	andi	r24, 0xFE	; 254
    1e6a:	02 96       	adiw	r24, 0x02	; 2
    1e6c:	a6 01       	movw	r20, r12
    1e6e:	48 0f       	add	r20, r24
    1e70:	59 1f       	adc	r21, r25
    1e72:	28 0f       	add	r18, r24
    1e74:	39 1f       	adc	r19, r25
    1e76:	00 ff       	sbrs	r16, 0
    1e78:	0e c0       	rjmp	.+28     	; 0x1e96 <f_read+0x154>
    1e7a:	d9 01       	movw	r26, r18
    1e7c:	fa 01       	movw	r30, r20
    1e7e:	9a 01       	movw	r18, r20
    1e80:	2f 5f       	subi	r18, 0xFF	; 255
    1e82:	3f 4f       	sbci	r19, 0xFF	; 255
    1e84:	8d 91       	ld	r24, X+
    1e86:	81 93       	st	Z+, r24
    1e88:	e2 17       	cp	r30, r18
    1e8a:	f3 07       	cpc	r31, r19
    1e8c:	d9 f7       	brne	.-10     	; 0x1e84 <f_read+0x142>
    1e8e:	4e 80       	ldd	r4, Y+6	; 0x06
    1e90:	5f 80       	ldd	r5, Y+7	; 0x07
    1e92:	68 84       	ldd	r6, Y+8	; 0x08
    1e94:	79 84       	ldd	r7, Y+9	; 0x09
    1e96:	c0 0e       	add	r12, r16
    1e98:	d1 1e       	adc	r13, r17
    1e9a:	d3 01       	movw	r26, r6
    1e9c:	c2 01       	movw	r24, r4
    1e9e:	80 0f       	add	r24, r16
    1ea0:	91 1f       	adc	r25, r17
    1ea2:	a1 1d       	adc	r26, r1
    1ea4:	b1 1d       	adc	r27, r1
    1ea6:	8e 83       	std	Y+6, r24	; 0x06
    1ea8:	9f 83       	std	Y+7, r25	; 0x07
    1eaa:	a8 87       	std	Y+8, r26	; 0x08
    1eac:	b9 87       	std	Y+9, r27	; 0x09
    1eae:	f5 01       	movw	r30, r10
    1eb0:	20 81       	ld	r18, Z
    1eb2:	31 81       	ldd	r19, Z+1	; 0x01
    1eb4:	20 0f       	add	r18, r16
    1eb6:	31 1f       	adc	r19, r17
    1eb8:	31 83       	std	Z+1, r19	; 0x01
    1eba:	20 83       	st	Z, r18
    1ebc:	e0 1a       	sub	r14, r16
    1ebe:	f1 0a       	sbc	r15, r17
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <f_read+0x182>
    1ec2:	92 cf       	rjmp	.-220    	; 0x1de8 <f_read+0xa6>
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	61 cf       	rjmp	.-318    	; 0x1d8a <f_read+0x48>
    1ec8:	e8 81       	ld	r30, Y
    1eca:	f9 81       	ldd	r31, Y+1	; 0x01
    1ecc:	12 81       	ldd	r17, Z+2	; 0x02
    1ece:	11 50       	subi	r17, 0x01	; 1
    1ed0:	ac 01       	movw	r20, r24
    1ed2:	bd 01       	movw	r22, r26
    1ed4:	39 e0       	ldi	r19, 0x09	; 9
    1ed6:	76 95       	lsr	r23
    1ed8:	67 95       	ror	r22
    1eda:	57 95       	ror	r21
    1edc:	47 95       	ror	r20
    1ede:	3a 95       	dec	r19
    1ee0:	d1 f7       	brne	.-12     	; 0x1ed6 <f_read+0x194>
    1ee2:	14 23       	and	r17, r20
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <f_read+0x1a6>
    1ee6:	7d c0       	rjmp	.+250    	; 0x1fe2 <f_read+0x2a0>
    1ee8:	8a 89       	ldd	r24, Y+18	; 0x12
    1eea:	9b 89       	ldd	r25, Y+19	; 0x13
    1eec:	ac 89       	ldd	r26, Y+20	; 0x14
    1eee:	bd 89       	ldd	r27, Y+21	; 0x15
    1ef0:	9c 01       	movw	r18, r24
    1ef2:	ad 01       	movw	r20, r26
    1ef4:	22 50       	subi	r18, 0x02	; 2
    1ef6:	31 09       	sbc	r19, r1
    1ef8:	41 09       	sbc	r20, r1
    1efa:	51 09       	sbc	r21, r1
    1efc:	82 89       	ldd	r24, Z+18	; 0x12
    1efe:	93 89       	ldd	r25, Z+19	; 0x13
    1f00:	a4 89       	ldd	r26, Z+20	; 0x14
    1f02:	b5 89       	ldd	r27, Z+21	; 0x15
    1f04:	02 97       	sbiw	r24, 0x02	; 2
    1f06:	a1 09       	sbc	r26, r1
    1f08:	b1 09       	sbc	r27, r1
    1f0a:	28 17       	cp	r18, r24
    1f0c:	39 07       	cpc	r19, r25
    1f0e:	4a 07       	cpc	r20, r26
    1f10:	5b 07       	cpc	r21, r27
    1f12:	08 f0       	brcs	.+2      	; 0x1f16 <f_read+0x1d4>
    1f14:	9f c0       	rjmp	.+318    	; 0x2054 <f_read+0x312>
    1f16:	02 81       	ldd	r16, Z+2	; 0x02
    1f18:	a0 2f       	mov	r26, r16
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__muluhisi3>
    1f20:	46 a0       	ldd	r4, Z+38	; 0x26
    1f22:	57 a0       	ldd	r5, Z+39	; 0x27
    1f24:	60 a4       	ldd	r6, Z+40	; 0x28
    1f26:	71 a4       	ldd	r7, Z+41	; 0x29
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	84 0d       	add	r24, r4
    1f2e:	95 1d       	adc	r25, r5
    1f30:	a6 1d       	adc	r26, r6
    1f32:	b7 1d       	adc	r27, r7
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	a1 05       	cpc	r26, r1
    1f38:	b1 05       	cpc	r27, r1
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <f_read+0x1fc>
    1f3c:	8b c0       	rjmp	.+278    	; 0x2054 <f_read+0x312>
    1f3e:	3c 01       	movw	r6, r24
    1f40:	4d 01       	movw	r8, r26
    1f42:	61 0e       	add	r6, r17
    1f44:	71 1c       	adc	r7, r1
    1f46:	81 1c       	adc	r8, r1
    1f48:	91 1c       	adc	r9, r1
    1f4a:	27 01       	movw	r4, r14
    1f4c:	45 2c       	mov	r4, r5
    1f4e:	55 24       	eor	r5, r5
    1f50:	46 94       	lsr	r4
    1f52:	41 14       	cp	r4, r1
    1f54:	51 04       	cpc	r5, r1
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <f_read+0x218>
    1f58:	60 c0       	rjmp	.+192    	; 0x201a <f_read+0x2d8>
    1f5a:	21 2f       	mov	r18, r17
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	a9 01       	movw	r20, r18
    1f60:	44 0d       	add	r20, r4
    1f62:	55 1d       	adc	r21, r5
    1f64:	80 2f       	mov	r24, r16
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	84 17       	cp	r24, r20
    1f6a:	95 07       	cpc	r25, r21
    1f6c:	18 f4       	brcc	.+6      	; 0x1f74 <f_read+0x232>
    1f6e:	2c 01       	movw	r4, r24
    1f70:	42 1a       	sub	r4, r18
    1f72:	53 0a       	sbc	r5, r19
    1f74:	82 01       	movw	r16, r4
    1f76:	a4 01       	movw	r20, r8
    1f78:	93 01       	movw	r18, r6
    1f7a:	b6 01       	movw	r22, r12
    1f7c:	81 81       	ldd	r24, Z+1	; 0x01
    1f7e:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <disk_read>
    1f82:	81 11       	cpse	r24, r1
    1f84:	6a c0       	rjmp	.+212    	; 0x205a <f_read+0x318>
    1f86:	e8 81       	ld	r30, Y
    1f88:	f9 81       	ldd	r31, Y+1	; 0x01
    1f8a:	84 81       	ldd	r24, Z+4	; 0x04
    1f8c:	88 23       	and	r24, r24
    1f8e:	01 f1       	breq	.+64     	; 0x1fd0 <f_read+0x28e>
    1f90:	82 a5       	ldd	r24, Z+42	; 0x2a
    1f92:	93 a5       	ldd	r25, Z+43	; 0x2b
    1f94:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1f96:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1f98:	86 19       	sub	r24, r6
    1f9a:	97 09       	sbc	r25, r7
    1f9c:	a8 09       	sbc	r26, r8
    1f9e:	b9 09       	sbc	r27, r9
    1fa0:	a2 01       	movw	r20, r4
    1fa2:	60 e0       	ldi	r22, 0x00	; 0
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	84 17       	cp	r24, r20
    1fa8:	95 07       	cpc	r25, r21
    1faa:	a6 07       	cpc	r26, r22
    1fac:	b7 07       	cpc	r27, r23
    1fae:	80 f4       	brcc	.+32     	; 0x1fd0 <f_read+0x28e>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	ba 2f       	mov	r27, r26
    1fb4:	aa 27       	eor	r26, r26
    1fb6:	bb 0f       	add	r27, r27
    1fb8:	ac 0d       	add	r26, r12
    1fba:	bd 1d       	adc	r27, r13
    1fbc:	be 96       	adiw	r30, 0x2e	; 46
    1fbe:	9d 01       	movw	r18, r26
    1fc0:	3e 5f       	subi	r19, 0xFE	; 254
    1fc2:	81 91       	ld	r24, Z+
    1fc4:	91 91       	ld	r25, Z+
    1fc6:	8d 93       	st	X+, r24
    1fc8:	9d 93       	st	X+, r25
    1fca:	a2 17       	cp	r26, r18
    1fcc:	b3 07       	cpc	r27, r19
    1fce:	c9 f7       	brne	.-14     	; 0x1fc2 <f_read+0x280>
    1fd0:	82 01       	movw	r16, r4
    1fd2:	10 2f       	mov	r17, r16
    1fd4:	00 27       	eor	r16, r16
    1fd6:	11 0f       	add	r17, r17
    1fd8:	4e 80       	ldd	r4, Y+6	; 0x06
    1fda:	5f 80       	ldd	r5, Y+7	; 0x07
    1fdc:	68 84       	ldd	r6, Y+8	; 0x08
    1fde:	79 84       	ldd	r7, Y+9	; 0x09
    1fe0:	5a cf       	rjmp	.-332    	; 0x1e96 <f_read+0x154>
    1fe2:	89 2b       	or	r24, r25
    1fe4:	8a 2b       	or	r24, r26
    1fe6:	8b 2b       	or	r24, r27
    1fe8:	19 f5       	brne	.+70     	; 0x2030 <f_read+0x2ee>
    1fea:	6e 85       	ldd	r22, Y+14	; 0x0e
    1fec:	7f 85       	ldd	r23, Y+15	; 0x0f
    1fee:	88 89       	ldd	r24, Y+16	; 0x10
    1ff0:	99 89       	ldd	r25, Y+17	; 0x11
    1ff2:	62 30       	cpi	r22, 0x02	; 2
    1ff4:	71 05       	cpc	r23, r1
    1ff6:	81 05       	cpc	r24, r1
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	60 f1       	brcs	.+88     	; 0x2054 <f_read+0x312>
    1ffc:	6f 3f       	cpi	r22, 0xFF	; 255
    1ffe:	ff ef       	ldi	r31, 0xFF	; 255
    2000:	7f 07       	cpc	r23, r31
    2002:	8f 07       	cpc	r24, r31
    2004:	9f 07       	cpc	r25, r31
    2006:	49 f1       	breq	.+82     	; 0x205a <f_read+0x318>
    2008:	6a 8b       	std	Y+18, r22	; 0x12
    200a:	7b 8b       	std	Y+19, r23	; 0x13
    200c:	8c 8b       	std	Y+20, r24	; 0x14
    200e:	9d 8b       	std	Y+21, r25	; 0x15
    2010:	e8 81       	ld	r30, Y
    2012:	f9 81       	ldd	r31, Y+1	; 0x01
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	6b cf       	rjmp	.-298    	; 0x1ef0 <f_read+0x1ae>
    201a:	6e 8a       	std	Y+22, r6	; 0x16
    201c:	7f 8a       	std	Y+23, r7	; 0x17
    201e:	88 8e       	std	Y+24, r8	; 0x18
    2020:	99 8e       	std	Y+25, r9	; 0x19
    2022:	8e 81       	ldd	r24, Y+6	; 0x06
    2024:	9f 81       	ldd	r25, Y+7	; 0x07
    2026:	a8 85       	ldd	r26, Y+8	; 0x08
    2028:	b9 85       	ldd	r27, Y+9	; 0x09
    202a:	a3 01       	movw	r20, r6
    202c:	b4 01       	movw	r22, r8
    202e:	ec ce       	rjmp	.-552    	; 0x1e08 <f_read+0xc6>
    2030:	4a 89       	ldd	r20, Y+18	; 0x12
    2032:	5b 89       	ldd	r21, Y+19	; 0x13
    2034:	6c 89       	ldd	r22, Y+20	; 0x14
    2036:	7d 89       	ldd	r23, Y+21	; 0x15
    2038:	42 30       	cpi	r20, 0x02	; 2
    203a:	51 05       	cpc	r21, r1
    203c:	61 05       	cpc	r22, r1
    203e:	71 05       	cpc	r23, r1
    2040:	48 f0       	brcs	.+18     	; 0x2054 <f_read+0x312>
    2042:	82 89       	ldd	r24, Z+18	; 0x12
    2044:	93 89       	ldd	r25, Z+19	; 0x13
    2046:	a4 89       	ldd	r26, Z+20	; 0x14
    2048:	b5 89       	ldd	r27, Z+21	; 0x15
    204a:	48 17       	cp	r20, r24
    204c:	59 07       	cpc	r21, r25
    204e:	6a 07       	cpc	r22, r26
    2050:	7b 07       	cpc	r23, r27
    2052:	40 f0       	brcs	.+16     	; 0x2064 <f_read+0x322>
    2054:	82 e0       	ldi	r24, 0x02	; 2
    2056:	8d 83       	std	Y+5, r24	; 0x05
    2058:	98 ce       	rjmp	.-720    	; 0x1d8a <f_read+0x48>
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	8d 83       	std	Y+5, r24	; 0x05
    205e:	95 ce       	rjmp	.-726    	; 0x1d8a <f_read+0x48>
    2060:	a6 01       	movw	r20, r12
    2062:	0b cf       	rjmp	.-490    	; 0x1e7a <f_read+0x138>
    2064:	cf 01       	movw	r24, r30
    2066:	0e 94 19 06 	call	0xc32	; 0xc32 <get_fat.part.4>
    206a:	c3 cf       	rjmp	.-122    	; 0x1ff2 <f_read+0x2b0>

0000206c <f_write>:
    206c:	2f 92       	push	r2
    206e:	3f 92       	push	r3
    2070:	4f 92       	push	r4
    2072:	5f 92       	push	r5
    2074:	6f 92       	push	r6
    2076:	7f 92       	push	r7
    2078:	8f 92       	push	r8
    207a:	9f 92       	push	r9
    207c:	af 92       	push	r10
    207e:	bf 92       	push	r11
    2080:	cf 92       	push	r12
    2082:	df 92       	push	r13
    2084:	ef 92       	push	r14
    2086:	ff 92       	push	r15
    2088:	0f 93       	push	r16
    208a:	1f 93       	push	r17
    208c:	cf 93       	push	r28
    208e:	df 93       	push	r29
    2090:	ec 01       	movw	r28, r24
    2092:	6b 01       	movw	r12, r22
    2094:	7a 01       	movw	r14, r20
    2096:	59 01       	movw	r10, r18
    2098:	f9 01       	movw	r30, r18
    209a:	11 82       	std	Z+1, r1	; 0x01
    209c:	10 82       	st	Z, r1
    209e:	0e 94 2a 02 	call	0x454	; 0x454 <validate>
    20a2:	81 11       	cpse	r24, r1
    20a4:	07 c0       	rjmp	.+14     	; 0x20b4 <f_write+0x48>
    20a6:	8d 81       	ldd	r24, Y+5	; 0x05
    20a8:	81 11       	cpse	r24, r1
    20aa:	04 c0       	rjmp	.+8      	; 0x20b4 <f_write+0x48>
    20ac:	2c 81       	ldd	r18, Y+4	; 0x04
    20ae:	21 fd       	sbrc	r18, 1
    20b0:	14 c0       	rjmp	.+40     	; 0x20da <f_write+0x6e>
    20b2:	87 e0       	ldi	r24, 0x07	; 7
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	1f 91       	pop	r17
    20ba:	0f 91       	pop	r16
    20bc:	ff 90       	pop	r15
    20be:	ef 90       	pop	r14
    20c0:	df 90       	pop	r13
    20c2:	cf 90       	pop	r12
    20c4:	bf 90       	pop	r11
    20c6:	af 90       	pop	r10
    20c8:	9f 90       	pop	r9
    20ca:	8f 90       	pop	r8
    20cc:	7f 90       	pop	r7
    20ce:	6f 90       	pop	r6
    20d0:	5f 90       	pop	r5
    20d2:	4f 90       	pop	r4
    20d4:	3f 90       	pop	r3
    20d6:	2f 90       	pop	r2
    20d8:	08 95       	ret
    20da:	8e 81       	ldd	r24, Y+6	; 0x06
    20dc:	9f 81       	ldd	r25, Y+7	; 0x07
    20de:	a8 85       	ldd	r26, Y+8	; 0x08
    20e0:	b9 85       	ldd	r27, Y+9	; 0x09
    20e2:	ac 01       	movw	r20, r24
    20e4:	bd 01       	movw	r22, r26
    20e6:	4e 0d       	add	r20, r14
    20e8:	5f 1d       	adc	r21, r15
    20ea:	61 1d       	adc	r22, r1
    20ec:	71 1d       	adc	r23, r1
    20ee:	48 17       	cp	r20, r24
    20f0:	59 07       	cpc	r21, r25
    20f2:	6a 07       	cpc	r22, r26
    20f4:	7b 07       	cpc	r23, r27
    20f6:	88 f4       	brcc	.+34     	; 0x211a <f_write+0xae>
    20f8:	4a 85       	ldd	r20, Y+10	; 0x0a
    20fa:	5b 85       	ldd	r21, Y+11	; 0x0b
    20fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    20fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    2100:	48 17       	cp	r20, r24
    2102:	59 07       	cpc	r21, r25
    2104:	6a 07       	cpc	r22, r26
    2106:	7b 07       	cpc	r23, r27
    2108:	20 f4       	brcc	.+8      	; 0x2112 <f_write+0xa6>
    210a:	8a 87       	std	Y+10, r24	; 0x0a
    210c:	9b 87       	std	Y+11, r25	; 0x0b
    210e:	ac 87       	std	Y+12, r26	; 0x0c
    2110:	bd 87       	std	Y+13, r27	; 0x0d
    2112:	20 62       	ori	r18, 0x20	; 32
    2114:	2c 83       	std	Y+4, r18	; 0x04
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	cd cf       	rjmp	.-102    	; 0x20b4 <f_write+0x48>
    211a:	e1 14       	cp	r14, r1
    211c:	f1 04       	cpc	r15, r1
    211e:	61 f3       	breq	.-40     	; 0x20f8 <f_write+0x8c>
    2120:	81 2c       	mov	r8, r1
    2122:	42 e0       	ldi	r20, 0x02	; 2
    2124:	94 2e       	mov	r9, r20
    2126:	ac 01       	movw	r20, r24
    2128:	bd 01       	movw	r22, r26
    212a:	51 70       	andi	r21, 0x01	; 1
    212c:	66 27       	eor	r22, r22
    212e:	77 27       	eor	r23, r23
    2130:	45 2b       	or	r20, r21
    2132:	46 2b       	or	r20, r22
    2134:	47 2b       	or	r20, r23
    2136:	09 f4       	brne	.+2      	; 0x213a <f_write+0xce>
    2138:	61 c0       	rjmp	.+194    	; 0x21fc <f_write+0x190>
    213a:	4e 89       	ldd	r20, Y+22	; 0x16
    213c:	5f 89       	ldd	r21, Y+23	; 0x17
    213e:	68 8d       	ldd	r22, Y+24	; 0x18
    2140:	79 8d       	ldd	r23, Y+25	; 0x19
    2142:	e8 81       	ld	r30, Y
    2144:	f9 81       	ldd	r31, Y+1	; 0x01
    2146:	91 70       	andi	r25, 0x01	; 1
    2148:	84 01       	movw	r16, r8
    214a:	08 1b       	sub	r16, r24
    214c:	19 0b       	sbc	r17, r25
    214e:	e0 16       	cp	r14, r16
    2150:	f1 06       	cpc	r15, r17
    2152:	08 f4       	brcc	.+2      	; 0x2156 <f_write+0xea>
    2154:	87 01       	movw	r16, r14
    2156:	cf 01       	movw	r24, r30
    2158:	0e 94 a8 02 	call	0x550	; 0x550 <move_window>
    215c:	81 11       	cpse	r24, r1
    215e:	3a c1       	rjmp	.+628    	; 0x23d4 <f_write+0x368>
    2160:	68 81       	ld	r22, Y
    2162:	79 81       	ldd	r23, Y+1	; 0x01
    2164:	8e 81       	ldd	r24, Y+6	; 0x06
    2166:	9f 81       	ldd	r25, Y+7	; 0x07
    2168:	a8 85       	ldd	r26, Y+8	; 0x08
    216a:	b9 85       	ldd	r27, Y+9	; 0x09
    216c:	91 70       	andi	r25, 0x01	; 1
    216e:	aa 27       	eor	r26, r26
    2170:	bb 27       	eor	r27, r27
    2172:	8e 96       	adiw	r24, 0x2e	; 46
    2174:	86 0f       	add	r24, r22
    2176:	97 1f       	adc	r25, r23
    2178:	d6 01       	movw	r26, r12
    217a:	01 30       	cpi	r16, 0x01	; 1
    217c:	11 05       	cpc	r17, r1
    217e:	a9 f0       	breq	.+42     	; 0x21aa <f_write+0x13e>
    2180:	98 01       	movw	r18, r16
    2182:	fc 01       	movw	r30, r24
    2184:	4d 91       	ld	r20, X+
    2186:	5d 91       	ld	r21, X+
    2188:	41 93       	st	Z+, r20
    218a:	51 93       	st	Z+, r21
    218c:	22 50       	subi	r18, 0x02	; 2
    218e:	31 09       	sbc	r19, r1
    2190:	22 30       	cpi	r18, 0x02	; 2
    2192:	31 05       	cpc	r19, r1
    2194:	b8 f7       	brcc	.-18     	; 0x2184 <f_write+0x118>
    2196:	d8 01       	movw	r26, r16
    2198:	12 97       	sbiw	r26, 0x02	; 2
    219a:	ae 7f       	andi	r26, 0xFE	; 254
    219c:	12 96       	adiw	r26, 0x02	; 2
    219e:	8a 0f       	add	r24, r26
    21a0:	9b 1f       	adc	r25, r27
    21a2:	ac 0d       	add	r26, r12
    21a4:	bd 1d       	adc	r27, r13
    21a6:	00 ff       	sbrs	r16, 0
    21a8:	0b c0       	rjmp	.+22     	; 0x21c0 <f_write+0x154>
    21aa:	fc 01       	movw	r30, r24
    21ac:	9c 01       	movw	r18, r24
    21ae:	2f 5f       	subi	r18, 0xFF	; 255
    21b0:	3f 4f       	sbci	r19, 0xFF	; 255
    21b2:	8d 91       	ld	r24, X+
    21b4:	81 93       	st	Z+, r24
    21b6:	e2 17       	cp	r30, r18
    21b8:	f3 07       	cpc	r31, r19
    21ba:	d9 f7       	brne	.-10     	; 0x21b2 <f_write+0x146>
    21bc:	68 81       	ld	r22, Y
    21be:	79 81       	ldd	r23, Y+1	; 0x01
    21c0:	21 e0       	ldi	r18, 0x01	; 1
    21c2:	fb 01       	movw	r30, r22
    21c4:	24 83       	std	Z+4, r18	; 0x04
    21c6:	c0 0e       	add	r12, r16
    21c8:	d1 1e       	adc	r13, r17
    21ca:	8e 81       	ldd	r24, Y+6	; 0x06
    21cc:	9f 81       	ldd	r25, Y+7	; 0x07
    21ce:	a8 85       	ldd	r26, Y+8	; 0x08
    21d0:	b9 85       	ldd	r27, Y+9	; 0x09
    21d2:	80 0f       	add	r24, r16
    21d4:	91 1f       	adc	r25, r17
    21d6:	a1 1d       	adc	r26, r1
    21d8:	b1 1d       	adc	r27, r1
    21da:	8e 83       	std	Y+6, r24	; 0x06
    21dc:	9f 83       	std	Y+7, r25	; 0x07
    21de:	a8 87       	std	Y+8, r26	; 0x08
    21e0:	b9 87       	std	Y+9, r27	; 0x09
    21e2:	f5 01       	movw	r30, r10
    21e4:	20 81       	ld	r18, Z
    21e6:	31 81       	ldd	r19, Z+1	; 0x01
    21e8:	20 0f       	add	r18, r16
    21ea:	31 1f       	adc	r19, r17
    21ec:	31 83       	std	Z+1, r19	; 0x01
    21ee:	20 83       	st	Z, r18
    21f0:	e0 1a       	sub	r14, r16
    21f2:	f1 0a       	sbc	r15, r17
    21f4:	09 f0       	breq	.+2      	; 0x21f8 <f_write+0x18c>
    21f6:	97 cf       	rjmp	.-210    	; 0x2126 <f_write+0xba>
    21f8:	2c 81       	ldd	r18, Y+4	; 0x04
    21fa:	7e cf       	rjmp	.-260    	; 0x20f8 <f_write+0x8c>
    21fc:	e8 81       	ld	r30, Y
    21fe:	f9 81       	ldd	r31, Y+1	; 0x01
    2200:	12 81       	ldd	r17, Z+2	; 0x02
    2202:	11 50       	subi	r17, 0x01	; 1
    2204:	ac 01       	movw	r20, r24
    2206:	bd 01       	movw	r22, r26
    2208:	39 e0       	ldi	r19, 0x09	; 9
    220a:	76 95       	lsr	r23
    220c:	67 95       	ror	r22
    220e:	57 95       	ror	r21
    2210:	47 95       	ror	r20
    2212:	3a 95       	dec	r19
    2214:	d1 f7       	brne	.-12     	; 0x220a <f_write+0x19e>
    2216:	14 23       	and	r17, r20
    2218:	71 f5       	brne	.+92     	; 0x2276 <f_write+0x20a>
    221a:	89 2b       	or	r24, r25
    221c:	8a 2b       	or	r24, r26
    221e:	8b 2b       	or	r24, r27
    2220:	09 f0       	breq	.+2      	; 0x2224 <f_write+0x1b8>
    2222:	db c0       	rjmp	.+438    	; 0x23da <f_write+0x36e>
    2224:	6e 85       	ldd	r22, Y+14	; 0x0e
    2226:	7f 85       	ldd	r23, Y+15	; 0x0f
    2228:	88 89       	ldd	r24, Y+16	; 0x10
    222a:	99 89       	ldd	r25, Y+17	; 0x11
    222c:	61 15       	cp	r22, r1
    222e:	71 05       	cpc	r23, r1
    2230:	81 05       	cpc	r24, r1
    2232:	91 05       	cpc	r25, r1
    2234:	09 f4       	brne	.+2      	; 0x2238 <f_write+0x1cc>
    2236:	e4 c0       	rjmp	.+456    	; 0x2400 <f_write+0x394>
    2238:	61 30       	cpi	r22, 0x01	; 1
    223a:	71 05       	cpc	r23, r1
    223c:	81 05       	cpc	r24, r1
    223e:	91 05       	cpc	r25, r1
    2240:	09 f4       	brne	.+2      	; 0x2244 <f_write+0x1d8>
    2242:	f1 c0       	rjmp	.+482    	; 0x2426 <f_write+0x3ba>
    2244:	6f 3f       	cpi	r22, 0xFF	; 255
    2246:	ff ef       	ldi	r31, 0xFF	; 255
    2248:	7f 07       	cpc	r23, r31
    224a:	8f 07       	cpc	r24, r31
    224c:	9f 07       	cpc	r25, r31
    224e:	09 f4       	brne	.+2      	; 0x2252 <f_write+0x1e6>
    2250:	c1 c0       	rjmp	.+386    	; 0x23d4 <f_write+0x368>
    2252:	6a 8b       	std	Y+18, r22	; 0x12
    2254:	7b 8b       	std	Y+19, r23	; 0x13
    2256:	8c 8b       	std	Y+20, r24	; 0x14
    2258:	9d 8b       	std	Y+21, r25	; 0x15
    225a:	4e 84       	ldd	r4, Y+14	; 0x0e
    225c:	5f 84       	ldd	r5, Y+15	; 0x0f
    225e:	68 88       	ldd	r6, Y+16	; 0x10
    2260:	79 88       	ldd	r7, Y+17	; 0x11
    2262:	45 28       	or	r4, r5
    2264:	46 28       	or	r4, r6
    2266:	47 28       	or	r4, r7
    2268:	21 f4       	brne	.+8      	; 0x2272 <f_write+0x206>
    226a:	6e 87       	std	Y+14, r22	; 0x0e
    226c:	7f 87       	std	Y+15, r23	; 0x0f
    226e:	88 8b       	std	Y+16, r24	; 0x10
    2270:	99 8b       	std	Y+17, r25	; 0x11
    2272:	e8 81       	ld	r30, Y
    2274:	f9 81       	ldd	r31, Y+1	; 0x01
    2276:	42 a5       	ldd	r20, Z+42	; 0x2a
    2278:	53 a5       	ldd	r21, Z+43	; 0x2b
    227a:	64 a5       	ldd	r22, Z+44	; 0x2c
    227c:	75 a5       	ldd	r23, Z+45	; 0x2d
    227e:	8e 89       	ldd	r24, Y+22	; 0x16
    2280:	9f 89       	ldd	r25, Y+23	; 0x17
    2282:	a8 8d       	ldd	r26, Y+24	; 0x18
    2284:	b9 8d       	ldd	r27, Y+25	; 0x19
    2286:	48 17       	cp	r20, r24
    2288:	59 07       	cpc	r21, r25
    228a:	6a 07       	cpc	r22, r26
    228c:	7b 07       	cpc	r23, r27
    228e:	09 f4       	brne	.+2      	; 0x2292 <f_write+0x226>
    2290:	95 c0       	rjmp	.+298    	; 0x23bc <f_write+0x350>
    2292:	8a 89       	ldd	r24, Y+18	; 0x12
    2294:	9b 89       	ldd	r25, Y+19	; 0x13
    2296:	ac 89       	ldd	r26, Y+20	; 0x14
    2298:	bd 89       	ldd	r27, Y+21	; 0x15
    229a:	9c 01       	movw	r18, r24
    229c:	ad 01       	movw	r20, r26
    229e:	22 50       	subi	r18, 0x02	; 2
    22a0:	31 09       	sbc	r19, r1
    22a2:	41 09       	sbc	r20, r1
    22a4:	51 09       	sbc	r21, r1
    22a6:	82 89       	ldd	r24, Z+18	; 0x12
    22a8:	93 89       	ldd	r25, Z+19	; 0x13
    22aa:	a4 89       	ldd	r26, Z+20	; 0x14
    22ac:	b5 89       	ldd	r27, Z+21	; 0x15
    22ae:	02 97       	sbiw	r24, 0x02	; 2
    22b0:	a1 09       	sbc	r26, r1
    22b2:	b1 09       	sbc	r27, r1
    22b4:	28 17       	cp	r18, r24
    22b6:	39 07       	cpc	r19, r25
    22b8:	4a 07       	cpc	r20, r26
    22ba:	5b 07       	cpc	r21, r27
    22bc:	08 f0       	brcs	.+2      	; 0x22c0 <f_write+0x254>
    22be:	b3 c0       	rjmp	.+358    	; 0x2426 <f_write+0x3ba>
    22c0:	02 81       	ldd	r16, Z+2	; 0x02
    22c2:	a0 2f       	mov	r26, r16
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__muluhisi3>
    22ca:	46 a0       	ldd	r4, Z+38	; 0x26
    22cc:	57 a0       	ldd	r5, Z+39	; 0x27
    22ce:	60 a4       	ldd	r6, Z+40	; 0x28
    22d0:	71 a4       	ldd	r7, Z+41	; 0x29
    22d2:	46 0e       	add	r4, r22
    22d4:	57 1e       	adc	r5, r23
    22d6:	68 1e       	adc	r6, r24
    22d8:	79 1e       	adc	r7, r25
    22da:	41 14       	cp	r4, r1
    22dc:	51 04       	cpc	r5, r1
    22de:	61 04       	cpc	r6, r1
    22e0:	71 04       	cpc	r7, r1
    22e2:	09 f4       	brne	.+2      	; 0x22e6 <f_write+0x27a>
    22e4:	a0 c0       	rjmp	.+320    	; 0x2426 <f_write+0x3ba>
    22e6:	41 0e       	add	r4, r17
    22e8:	51 1c       	adc	r5, r1
    22ea:	61 1c       	adc	r6, r1
    22ec:	71 1c       	adc	r7, r1
    22ee:	17 01       	movw	r2, r14
    22f0:	23 2c       	mov	r2, r3
    22f2:	33 24       	eor	r3, r3
    22f4:	26 94       	lsr	r2
    22f6:	21 14       	cp	r2, r1
    22f8:	31 04       	cpc	r3, r1
    22fa:	09 f4       	brne	.+2      	; 0x22fe <f_write+0x292>
    22fc:	40 c0       	rjmp	.+128    	; 0x237e <f_write+0x312>
    22fe:	21 2f       	mov	r18, r17
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	a9 01       	movw	r20, r18
    2304:	42 0d       	add	r20, r2
    2306:	53 1d       	adc	r21, r3
    2308:	cd 01       	movw	r24, r26
    230a:	84 17       	cp	r24, r20
    230c:	95 07       	cpc	r25, r21
    230e:	18 f4       	brcc	.+6      	; 0x2316 <f_write+0x2aa>
    2310:	1c 01       	movw	r2, r24
    2312:	22 1a       	sub	r2, r18
    2314:	33 0a       	sbc	r3, r19
    2316:	81 01       	movw	r16, r2
    2318:	a3 01       	movw	r20, r6
    231a:	92 01       	movw	r18, r4
    231c:	b6 01       	movw	r22, r12
    231e:	81 81       	ldd	r24, Z+1	; 0x01
    2320:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <disk_write>
    2324:	81 11       	cpse	r24, r1
    2326:	56 c0       	rjmp	.+172    	; 0x23d4 <f_write+0x368>
    2328:	48 81       	ld	r20, Y
    232a:	59 81       	ldd	r21, Y+1	; 0x01
    232c:	fa 01       	movw	r30, r20
    232e:	82 a5       	ldd	r24, Z+42	; 0x2a
    2330:	93 a5       	ldd	r25, Z+43	; 0x2b
    2332:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2334:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2336:	84 19       	sub	r24, r4
    2338:	95 09       	sbc	r25, r5
    233a:	a6 09       	sbc	r26, r6
    233c:	b7 09       	sbc	r27, r7
    233e:	81 01       	movw	r16, r2
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	80 17       	cp	r24, r16
    2346:	91 07       	cpc	r25, r17
    2348:	a2 07       	cpc	r26, r18
    234a:	b3 07       	cpc	r27, r19
    234c:	98 f4       	brcc	.+38     	; 0x2374 <f_write+0x308>
    234e:	be 96       	adiw	r30, 0x2e	; 46
    2350:	dc 01       	movw	r26, r24
    2352:	ba 2f       	mov	r27, r26
    2354:	aa 27       	eor	r26, r26
    2356:	bb 0f       	add	r27, r27
    2358:	ac 0d       	add	r26, r12
    235a:	bd 1d       	adc	r27, r13
    235c:	9a 01       	movw	r18, r20
    235e:	22 5d       	subi	r18, 0xD2	; 210
    2360:	3d 4f       	sbci	r19, 0xFD	; 253
    2362:	8d 91       	ld	r24, X+
    2364:	9d 91       	ld	r25, X+
    2366:	81 93       	st	Z+, r24
    2368:	91 93       	st	Z+, r25
    236a:	e2 17       	cp	r30, r18
    236c:	f3 07       	cpc	r31, r19
    236e:	c9 f7       	brne	.-14     	; 0x2362 <f_write+0x2f6>
    2370:	fa 01       	movw	r30, r20
    2372:	14 82       	std	Z+4, r1	; 0x04
    2374:	81 01       	movw	r16, r2
    2376:	10 2f       	mov	r17, r16
    2378:	00 27       	eor	r16, r16
    237a:	11 0f       	add	r17, r17
    237c:	24 cf       	rjmp	.-440    	; 0x21c6 <f_write+0x15a>
    237e:	0e 81       	ldd	r16, Y+6	; 0x06
    2380:	1f 81       	ldd	r17, Y+7	; 0x07
    2382:	28 85       	ldd	r18, Y+8	; 0x08
    2384:	39 85       	ldd	r19, Y+9	; 0x09
    2386:	d9 01       	movw	r26, r18
    2388:	c8 01       	movw	r24, r16
    238a:	4a 85       	ldd	r20, Y+10	; 0x0a
    238c:	5b 85       	ldd	r21, Y+11	; 0x0b
    238e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2390:	7d 85       	ldd	r23, Y+13	; 0x0d
    2392:	04 17       	cp	r16, r20
    2394:	15 07       	cpc	r17, r21
    2396:	26 07       	cpc	r18, r22
    2398:	37 07       	cpc	r19, r23
    239a:	48 f0       	brcs	.+18     	; 0x23ae <f_write+0x342>
    239c:	84 81       	ldd	r24, Z+4	; 0x04
    239e:	81 11       	cpse	r24, r1
    23a0:	36 c0       	rjmp	.+108    	; 0x240e <f_write+0x3a2>
    23a2:	42 a6       	std	Z+42, r4	; 0x2a
    23a4:	53 a6       	std	Z+43, r5	; 0x2b
    23a6:	64 a6       	std	Z+44, r6	; 0x2c
    23a8:	75 a6       	std	Z+45, r7	; 0x2d
    23aa:	d9 01       	movw	r26, r18
    23ac:	c8 01       	movw	r24, r16
    23ae:	4e 8a       	std	Y+22, r4	; 0x16
    23b0:	5f 8a       	std	Y+23, r5	; 0x17
    23b2:	68 8e       	std	Y+24, r6	; 0x18
    23b4:	79 8e       	std	Y+25, r7	; 0x19
    23b6:	a2 01       	movw	r20, r4
    23b8:	b3 01       	movw	r22, r6
    23ba:	c5 ce       	rjmp	.-630    	; 0x2146 <f_write+0xda>
    23bc:	84 81       	ldd	r24, Z+4	; 0x04
    23be:	88 23       	and	r24, r24
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <f_write+0x358>
    23c2:	67 cf       	rjmp	.-306    	; 0x2292 <f_write+0x226>
    23c4:	cf 01       	movw	r24, r30
    23c6:	0e 94 47 02 	call	0x48e	; 0x48e <sync_window.part.2>
    23ca:	81 11       	cpse	r24, r1
    23cc:	03 c0       	rjmp	.+6      	; 0x23d4 <f_write+0x368>
    23ce:	e8 81       	ld	r30, Y
    23d0:	f9 81       	ldd	r31, Y+1	; 0x01
    23d2:	5f cf       	rjmp	.-322    	; 0x2292 <f_write+0x226>
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	8d 83       	std	Y+5, r24	; 0x05
    23d8:	6d ce       	rjmp	.-806    	; 0x20b4 <f_write+0x48>
    23da:	4a 89       	ldd	r20, Y+18	; 0x12
    23dc:	5b 89       	ldd	r21, Y+19	; 0x13
    23de:	6c 89       	ldd	r22, Y+20	; 0x14
    23e0:	7d 89       	ldd	r23, Y+21	; 0x15
    23e2:	cf 01       	movw	r24, r30
    23e4:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <create_chain>
    23e8:	61 15       	cp	r22, r1
    23ea:	71 05       	cpc	r23, r1
    23ec:	81 05       	cpc	r24, r1
    23ee:	91 05       	cpc	r25, r1
    23f0:	09 f0       	breq	.+2      	; 0x23f4 <f_write+0x388>
    23f2:	22 cf       	rjmp	.-444    	; 0x2238 <f_write+0x1cc>
    23f4:	8e 81       	ldd	r24, Y+6	; 0x06
    23f6:	9f 81       	ldd	r25, Y+7	; 0x07
    23f8:	a8 85       	ldd	r26, Y+8	; 0x08
    23fa:	b9 85       	ldd	r27, Y+9	; 0x09
    23fc:	2c 81       	ldd	r18, Y+4	; 0x04
    23fe:	7c ce       	rjmp	.-776    	; 0x20f8 <f_write+0x8c>
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	50 e0       	ldi	r21, 0x00	; 0
    2404:	ba 01       	movw	r22, r20
    2406:	cf 01       	movw	r24, r30
    2408:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <create_chain>
    240c:	ed cf       	rjmp	.-38     	; 0x23e8 <f_write+0x37c>
    240e:	cf 01       	movw	r24, r30
    2410:	0e 94 47 02 	call	0x48e	; 0x48e <sync_window.part.2>
    2414:	81 11       	cpse	r24, r1
    2416:	de cf       	rjmp	.-68     	; 0x23d4 <f_write+0x368>
    2418:	e8 81       	ld	r30, Y
    241a:	f9 81       	ldd	r31, Y+1	; 0x01
    241c:	0e 81       	ldd	r16, Y+6	; 0x06
    241e:	1f 81       	ldd	r17, Y+7	; 0x07
    2420:	28 85       	ldd	r18, Y+8	; 0x08
    2422:	39 85       	ldd	r19, Y+9	; 0x09
    2424:	be cf       	rjmp	.-132    	; 0x23a2 <f_write+0x336>
    2426:	82 e0       	ldi	r24, 0x02	; 2
    2428:	8d 83       	std	Y+5, r24	; 0x05
    242a:	44 ce       	rjmp	.-888    	; 0x20b4 <f_write+0x48>

0000242c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    242c:	0f 93       	push	r16
    242e:	1f 93       	push	r17
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    2436:	0e 94 2a 02 	call	0x454	; 0x454 <validate>
    243a:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    243c:	81 11       	cpse	r24, r1
    243e:	03 c0       	rjmp	.+6      	; 0x2446 <f_sync+0x1a>
		if (fp->flag & FA__WRITTEN) {	/* Is there any change to the file? */
    2440:	8c 81       	ldd	r24, Y+4	; 0x04
    2442:	85 fd       	sbrc	r24, 5
    2444:	06 c0       	rjmp	.+12     	; 0x2452 <f_sync+0x26>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    2446:	89 2f       	mov	r24, r25
    2448:	df 91       	pop	r29
    244a:	cf 91       	pop	r28
    244c:	1f 91       	pop	r17
    244e:	0f 91       	pop	r16
    2450:	08 95       	ret
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    2452:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2454:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2456:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2458:	7d 8d       	ldd	r23, Y+29	; 0x1d
    245a:	88 81       	ld	r24, Y
    245c:	99 81       	ldd	r25, Y+1	; 0x01
    245e:	0e 94 a8 02 	call	0x550	; 0x550 <move_window>
    2462:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    2464:	81 11       	cpse	r24, r1
    2466:	ef cf       	rjmp	.-34     	; 0x2446 <f_sync+0x1a>
				dir = fp->dir_ptr;
    2468:	ee 8d       	ldd	r30, Y+30	; 0x1e
    246a:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    246c:	83 85       	ldd	r24, Z+11	; 0x0b
    246e:	80 62       	ori	r24, 0x20	; 32
    2470:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
    2472:	8a 85       	ldd	r24, Y+10	; 0x0a
    2474:	9b 85       	ldd	r25, Y+11	; 0x0b
    2476:	ac 85       	ldd	r26, Y+12	; 0x0c
    2478:	bd 85       	ldd	r27, Y+13	; 0x0d
    247a:	84 8f       	std	Z+28, r24	; 0x1c
    247c:	95 8f       	std	Z+29, r25	; 0x1d
    247e:	a6 8f       	std	Z+30, r26	; 0x1e
    2480:	b7 8f       	std	Z+31, r27	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    2482:	8e 85       	ldd	r24, Y+14	; 0x0e
    2484:	9f 85       	ldd	r25, Y+15	; 0x0f
    2486:	a8 89       	ldd	r26, Y+16	; 0x10
    2488:	b9 89       	ldd	r27, Y+17	; 0x11
void st_clust (
	BYTE* dir,	/* Pointer to the SFN entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir + DIR_FstClusLO, cl);
    248a:	93 8f       	std	Z+27, r25	; 0x1b
    248c:	82 8f       	std	Z+26, r24	; 0x1a
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    248e:	b5 8b       	std	Z+21, r27	; 0x15
    2490:	a4 8b       	std	Z+20, r26	; 0x14
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = GET_FATTIME();							/* Update modified time */
				ST_DWORD(dir + DIR_WrtTime, tm);
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	a1 e2       	ldi	r26, 0x21	; 33
    2498:	b8 e4       	ldi	r27, 0x48	; 72
    249a:	86 8b       	std	Z+22, r24	; 0x16
    249c:	97 8b       	std	Z+23, r25	; 0x17
    249e:	a0 8f       	std	Z+24, r26	; 0x18
    24a0:	b1 8f       	std	Z+25, r27	; 0x19
				ST_WORD(dir + DIR_LstAccDate, 0);
    24a2:	13 8a       	std	Z+19, r1	; 0x13
    24a4:	12 8a       	std	Z+18, r1	; 0x12
				fp->flag &= ~FA__WRITTEN;
    24a6:	8c 81       	ldd	r24, Y+4	; 0x04
    24a8:	8f 7d       	andi	r24, 0xDF	; 223
    24aa:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    24ac:	e8 81       	ld	r30, Y
    24ae:	f9 81       	ldd	r31, Y+1	; 0x01
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    24b4:	09 90       	ld	r0, Y+
    24b6:	d8 81       	ld	r29, Y
    24b8:	c0 2d       	mov	r28, r0
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
    24ba:	8c 81       	ldd	r24, Y+4	; 0x04
    24bc:	81 11       	cpse	r24, r1
    24be:	5b c0       	rjmp	.+182    	; 0x2576 <f_sync+0x14a>


	res = sync_window(fs);
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    24c0:	88 81       	ld	r24, Y
    24c2:	83 30       	cpi	r24, 0x03	; 3
    24c4:	59 f0       	breq	.+22     	; 0x24dc <f_sync+0xb0>
			fs->winsect = fs->volbase + 1;
			disk_write(fs->drv, fs->win, fs->winsect, 1);
			fs->fsi_flag = 0;
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    24c6:	40 e0       	ldi	r20, 0x00	; 0
    24c8:	50 e0       	ldi	r21, 0x00	; 0
    24ca:	60 e0       	ldi	r22, 0x00	; 0
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <disk_ioctl>
    24d2:	91 e0       	ldi	r25, 0x01	; 1
    24d4:	81 11       	cpse	r24, r1
    24d6:	b7 cf       	rjmp	.-146    	; 0x2446 <f_sync+0x1a>
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	b5 cf       	rjmp	.-150    	; 0x2446 <f_sync+0x1a>


	res = sync_window(fs);
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    24dc:	8d 81       	ldd	r24, Y+5	; 0x05
    24de:	81 30       	cpi	r24, 0x01	; 1
    24e0:	91 f7       	brne	.-28     	; 0x24c6 <f_sync+0x9a>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
    24e2:	be 01       	movw	r22, r28
    24e4:	62 5d       	subi	r22, 0xD2	; 210
    24e6:	7f 4f       	sbci	r23, 0xFF	; 255
    24e8:	fb 01       	movw	r30, r22
    24ea:	ce 01       	movw	r24, r28
    24ec:	82 5d       	subi	r24, 0xD2	; 210
    24ee:	9d 4f       	sbci	r25, 0xFD	; 253
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    24f0:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    24f2:	e8 17       	cp	r30, r24
    24f4:	f9 07       	cpc	r31, r25
    24f6:	e1 f7       	brne	.-8      	; 0x24f0 <f_sync+0xc4>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
			ST_WORD(fs->win + BS_55AA, 0xAA55);
    24f8:	85 e5       	ldi	r24, 0x55	; 85
    24fa:	9a ea       	ldi	r25, 0xAA	; 170
    24fc:	fe 01       	movw	r30, r28
    24fe:	e4 5d       	subi	r30, 0xD4	; 212
    2500:	fd 4f       	sbci	r31, 0xFD	; 253
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	80 83       	st	Z, r24
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
    2506:	82 e5       	ldi	r24, 0x52	; 82
    2508:	92 e5       	ldi	r25, 0x52	; 82
    250a:	a1 e6       	ldi	r26, 0x61	; 97
    250c:	b1 e4       	ldi	r27, 0x41	; 65
    250e:	8e a7       	std	Y+46, r24	; 0x2e
    2510:	9f a7       	std	Y+47, r25	; 0x2f
    2512:	a8 ab       	std	Y+48, r26	; 0x30
    2514:	b9 ab       	std	Y+49, r27	; 0x31
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
    2516:	82 e7       	ldi	r24, 0x72	; 114
    2518:	92 e7       	ldi	r25, 0x72	; 114
    251a:	a1 e4       	ldi	r26, 0x41	; 65
    251c:	b1 e6       	ldi	r27, 0x61	; 97
    251e:	7a 97       	sbiw	r30, 0x1a	; 26
    2520:	80 83       	st	Z, r24
    2522:	91 83       	std	Z+1, r25	; 0x01
    2524:	a2 83       	std	Z+2, r26	; 0x02
    2526:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
    2528:	8e 85       	ldd	r24, Y+14	; 0x0e
    252a:	9f 85       	ldd	r25, Y+15	; 0x0f
    252c:	a8 89       	ldd	r26, Y+16	; 0x10
    252e:	b9 89       	ldd	r27, Y+17	; 0x11
    2530:	34 96       	adiw	r30, 0x04	; 4
    2532:	80 83       	st	Z, r24
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	a2 83       	std	Z+2, r26	; 0x02
    2538:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
    253a:	8a 85       	ldd	r24, Y+10	; 0x0a
    253c:	9b 85       	ldd	r25, Y+11	; 0x0b
    253e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2540:	bd 85       	ldd	r27, Y+13	; 0x0d
    2542:	34 96       	adiw	r30, 0x04	; 4
    2544:	80 83       	st	Z, r24
    2546:	91 83       	std	Z+1, r25	; 0x01
    2548:	a2 83       	std	Z+2, r26	; 0x02
    254a:	b3 83       	std	Z+3, r27	; 0x03
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
    254c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    254e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2550:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2552:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2554:	9c 01       	movw	r18, r24
    2556:	ad 01       	movw	r20, r26
    2558:	2f 5f       	subi	r18, 0xFF	; 255
    255a:	3f 4f       	sbci	r19, 0xFF	; 255
    255c:	4f 4f       	sbci	r20, 0xFF	; 255
    255e:	5f 4f       	sbci	r21, 0xFF	; 255
    2560:	2a a7       	std	Y+42, r18	; 0x2a
    2562:	3b a7       	std	Y+43, r19	; 0x2b
    2564:	4c a7       	std	Y+44, r20	; 0x2c
    2566:	5d a7       	std	Y+45, r21	; 0x2d
			disk_write(fs->drv, fs->win, fs->winsect, 1);
    2568:	01 e0       	ldi	r16, 0x01	; 1
    256a:	10 e0       	ldi	r17, 0x00	; 0
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <disk_write>
			fs->fsi_flag = 0;
    2572:	1d 82       	std	Y+5, r1	; 0x05
    2574:	a8 cf       	rjmp	.-176    	; 0x24c6 <f_sync+0x9a>
    2576:	ce 01       	movw	r24, r28
    2578:	0e 94 47 02 	call	0x48e	; 0x48e <sync_window.part.2>
    257c:	98 2f       	mov	r25, r24
{
	FRESULT res;


	res = sync_window(fs);
	if (res == FR_OK) {
    257e:	81 11       	cpse	r24, r1
    2580:	62 cf       	rjmp	.-316    	; 0x2446 <f_sync+0x1a>
    2582:	9e cf       	rjmp	.-196    	; 0x24c0 <f_sync+0x94>

00002584 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2584:	cf 93       	push	r28
    2586:	df 93       	push	r29
    2588:	ec 01       	movw	r28, r24
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    258a:	0e 94 16 12 	call	0x242c	; 0x242c <f_sync>
	if (res == FR_OK)
    258e:	88 23       	and	r24, r24
    2590:	19 f0       	breq	.+6      	; 0x2598 <f_close+0x14>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    2592:	df 91       	pop	r29
    2594:	cf 91       	pop	r28
    2596:	08 95       	ret
#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
	if (res == FR_OK)
#endif
	{
		res = validate(fp);				/* Lock volume */
    2598:	ce 01       	movw	r24, r28
    259a:	0e 94 2a 02 	call	0x454	; 0x454 <validate>
		if (res == FR_OK) {
    259e:	81 11       	cpse	r24, r1
    25a0:	f8 cf       	rjmp	.-16     	; 0x2592 <f_close+0xe>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    25a2:	19 82       	std	Y+1, r1	; 0x01
    25a4:	18 82       	st	Y, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    25a6:	df 91       	pop	r29
    25a8:	cf 91       	pop	r28
    25aa:	08 95       	ret

000025ac <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    25ac:	4f 92       	push	r4
    25ae:	5f 92       	push	r5
    25b0:	6f 92       	push	r6
    25b2:	7f 92       	push	r7
    25b4:	8f 92       	push	r8
    25b6:	9f 92       	push	r9
    25b8:	af 92       	push	r10
    25ba:	bf 92       	push	r11
    25bc:	cf 92       	push	r12
    25be:	df 92       	push	r13
    25c0:	ef 92       	push	r14
    25c2:	ff 92       	push	r15
    25c4:	0f 93       	push	r16
    25c6:	1f 93       	push	r17
    25c8:	cf 93       	push	r28
    25ca:	df 93       	push	r29
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <f_lseek+0x22>
    25ce:	00 d0       	rcall	.+0      	; 0x25d0 <f_lseek+0x24>
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <f_lseek+0x26>
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	9e 83       	std	Y+6, r25	; 0x06
    25d8:	8d 83       	std	Y+5, r24	; 0x05
    25da:	6a 01       	movw	r12, r20
    25dc:	7b 01       	movw	r14, r22
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
    25de:	0e 94 2a 02 	call	0x454	; 0x454 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    25e2:	81 11       	cpse	r24, r1
    25e4:	bb c0       	rjmp	.+374    	; 0x275c <f_lseek+0x1b0>
	if (fp->err)						/* Check error */
    25e6:	ad 81       	ldd	r26, Y+5	; 0x05
    25e8:	be 81       	ldd	r27, Y+6	; 0x06
    25ea:	15 96       	adiw	r26, 0x05	; 5
    25ec:	8c 91       	ld	r24, X
    25ee:	15 97       	sbiw	r26, 0x05	; 5
    25f0:	81 11       	cpse	r24, r1
    25f2:	b4 c0       	rjmp	.+360    	; 0x275c <f_lseek+0x1b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    25f4:	1a 96       	adiw	r26, 0x0a	; 10
    25f6:	8d 91       	ld	r24, X+
    25f8:	9d 91       	ld	r25, X+
    25fa:	0d 90       	ld	r0, X+
    25fc:	bc 91       	ld	r27, X
    25fe:	a0 2d       	mov	r26, r0
    2600:	8c 15       	cp	r24, r12
    2602:	9d 05       	cpc	r25, r13
    2604:	ae 05       	cpc	r26, r14
    2606:	bf 05       	cpc	r27, r15
    2608:	38 f4       	brcc	.+14     	; 0x2618 <f_lseek+0x6c>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    260a:	ed 81       	ldd	r30, Y+5	; 0x05
    260c:	fe 81       	ldd	r31, Y+6	; 0x06
    260e:	24 81       	ldd	r18, Z+4	; 0x04
    2610:	21 fd       	sbrc	r18, 1
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <f_lseek+0x6c>
    2614:	6c 01       	movw	r12, r24
    2616:	7d 01       	movw	r14, r26
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    2618:	ad 81       	ldd	r26, Y+5	; 0x05
    261a:	be 81       	ldd	r27, Y+6	; 0x06
    261c:	16 96       	adiw	r26, 0x06	; 6
    261e:	4d 90       	ld	r4, X+
    2620:	5d 90       	ld	r5, X+
    2622:	6d 90       	ld	r6, X+
    2624:	7c 90       	ld	r7, X
    2626:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    2628:	fd 01       	movw	r30, r26
    262a:	16 82       	std	Z+6, r1	; 0x06
    262c:	17 82       	std	Z+7, r1	; 0x07
    262e:	10 86       	std	Z+8, r1	; 0x08
    2630:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    2632:	c1 14       	cp	r12, r1
    2634:	d1 04       	cpc	r13, r1
    2636:	e1 04       	cpc	r14, r1
    2638:	f1 04       	cpc	r15, r1
    263a:	09 f4       	brne	.+2      	; 0x263e <f_lseek+0x92>
    263c:	a6 c0       	rjmp	.+332    	; 0x278a <f_lseek+0x1de>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    263e:	00 81       	ld	r16, Z
    2640:	11 81       	ldd	r17, Z+1	; 0x01
    2642:	d8 01       	movw	r26, r16
    2644:	12 96       	adiw	r26, 0x02	; 2
    2646:	8c 90       	ld	r8, X
    2648:	91 2c       	mov	r9, r1
    264a:	a1 2c       	mov	r10, r1
    264c:	b1 2c       	mov	r11, r1
    264e:	39 e0       	ldi	r19, 0x09	; 9
    2650:	88 0c       	add	r8, r8
    2652:	99 1c       	adc	r9, r9
    2654:	aa 1c       	adc	r10, r10
    2656:	bb 1c       	adc	r11, r11
    2658:	3a 95       	dec	r19
    265a:	d1 f7       	brne	.-12     	; 0x2650 <f_lseek+0xa4>
			if (ifptr > 0 &&
    265c:	41 14       	cp	r4, r1
    265e:	51 04       	cpc	r5, r1
    2660:	61 04       	cpc	r6, r1
    2662:	71 04       	cpc	r7, r1
    2664:	19 f1       	breq	.+70     	; 0x26ac <f_lseek+0x100>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    2666:	b1 e0       	ldi	r27, 0x01	; 1
    2668:	4b 1a       	sub	r4, r27
    266a:	51 08       	sbc	r5, r1
    266c:	61 08       	sbc	r6, r1
    266e:	71 08       	sbc	r7, r1

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2670:	c7 01       	movw	r24, r14
    2672:	b6 01       	movw	r22, r12
    2674:	61 50       	subi	r22, 0x01	; 1
    2676:	71 09       	sbc	r23, r1
    2678:	81 09       	sbc	r24, r1
    267a:	91 09       	sbc	r25, r1
    267c:	a5 01       	movw	r20, r10
    267e:	94 01       	movw	r18, r8
    2680:	0e 94 c1 21 	call	0x4382	; 0x4382 <__udivmodsi4>
    2684:	29 83       	std	Y+1, r18	; 0x01
    2686:	3a 83       	std	Y+2, r19	; 0x02
    2688:	4b 83       	std	Y+3, r20	; 0x03
    268a:	5c 83       	std	Y+4, r21	; 0x04
    268c:	c3 01       	movw	r24, r6
    268e:	b2 01       	movw	r22, r4
    2690:	a5 01       	movw	r20, r10
    2692:	94 01       	movw	r18, r8
    2694:	0e 94 c1 21 	call	0x4382	; 0x4382 <__udivmodsi4>
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	9a 81       	ldd	r25, Y+2	; 0x02
    269c:	ab 81       	ldd	r26, Y+3	; 0x03
    269e:	bc 81       	ldd	r27, Y+4	; 0x04
    26a0:	82 17       	cp	r24, r18
    26a2:	93 07       	cpc	r25, r19
    26a4:	a4 07       	cpc	r26, r20
    26a6:	b5 07       	cpc	r27, r21
    26a8:	08 f0       	brcs	.+2      	; 0x26ac <f_lseek+0x100>
    26aa:	2f c1       	rjmp	.+606    	; 0x290a <f_lseek+0x35e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
				ofs -= fp->fptr;
				clst = fp->clust;
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    26ac:	ed 81       	ldd	r30, Y+5	; 0x05
    26ae:	fe 81       	ldd	r31, Y+6	; 0x06
    26b0:	46 85       	ldd	r20, Z+14	; 0x0e
    26b2:	57 85       	ldd	r21, Z+15	; 0x0f
    26b4:	60 89       	ldd	r22, Z+16	; 0x10
    26b6:	71 89       	ldd	r23, Z+17	; 0x11
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    26b8:	41 15       	cp	r20, r1
    26ba:	51 05       	cpc	r21, r1
    26bc:	61 05       	cpc	r22, r1
    26be:	71 05       	cpc	r23, r1
    26c0:	09 f4       	brne	.+2      	; 0x26c4 <f_lseek+0x118>
    26c2:	41 c1       	rjmp	.+642    	; 0x2946 <f_lseek+0x39a>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
    26c4:	ed 81       	ldd	r30, Y+5	; 0x05
    26c6:	fe 81       	ldd	r31, Y+6	; 0x06
    26c8:	42 8b       	std	Z+18, r20	; 0x12
    26ca:	53 8b       	std	Z+19, r21	; 0x13
    26cc:	64 8b       	std	Z+20, r22	; 0x14
    26ce:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    26d0:	41 15       	cp	r20, r1
    26d2:	51 05       	cpc	r21, r1
    26d4:	61 05       	cpc	r22, r1
    26d6:	71 05       	cpc	r23, r1
    26d8:	09 f0       	breq	.+2      	; 0x26dc <f_lseek+0x130>
    26da:	59 c0       	rjmp	.+178    	; 0x278e <f_lseek+0x1e2>
    26dc:	ad 81       	ldd	r26, Y+5	; 0x05
    26de:	be 81       	ldd	r27, Y+6	; 0x06
    26e0:	16 96       	adiw	r26, 0x06	; 6
    26e2:	8d 90       	ld	r8, X+
    26e4:	9d 90       	ld	r9, X+
    26e6:	ad 90       	ld	r10, X+
    26e8:	bc 90       	ld	r11, X
    26ea:	19 97       	sbiw	r26, 0x09	; 9
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    26ec:	c1 2c       	mov	r12, r1
    26ee:	d1 2c       	mov	r13, r1
    26f0:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    26f2:	d5 01       	movw	r26, r10
    26f4:	c4 01       	movw	r24, r8
    26f6:	91 70       	andi	r25, 0x01	; 1
    26f8:	aa 27       	eor	r26, r26
    26fa:	bb 27       	eor	r27, r27
    26fc:	ed 81       	ldd	r30, Y+5	; 0x05
    26fe:	fe 81       	ldd	r31, Y+6	; 0x06
    2700:	89 2b       	or	r24, r25
    2702:	8a 2b       	or	r24, r26
    2704:	8b 2b       	or	r24, r27
    2706:	91 f0       	breq	.+36     	; 0x272c <f_lseek+0x180>
    2708:	86 89       	ldd	r24, Z+22	; 0x16
    270a:	97 89       	ldd	r25, Z+23	; 0x17
    270c:	a0 8d       	ldd	r26, Z+24	; 0x18
    270e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2710:	c8 16       	cp	r12, r24
    2712:	d9 06       	cpc	r13, r25
    2714:	ea 06       	cpc	r14, r26
    2716:	fb 06       	cpc	r15, r27
    2718:	49 f0       	breq	.+18     	; 0x272c <f_lseek+0x180>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    271a:	ad 81       	ldd	r26, Y+5	; 0x05
    271c:	be 81       	ldd	r27, Y+6	; 0x06
    271e:	56 96       	adiw	r26, 0x16	; 22
    2720:	cd 92       	st	X+, r12
    2722:	dd 92       	st	X+, r13
    2724:	ed 92       	st	X+, r14
    2726:	fc 92       	st	X, r15
    2728:	59 97       	sbiw	r26, 0x19	; 25
    272a:	fd 01       	movw	r30, r26
    272c:	82 85       	ldd	r24, Z+10	; 0x0a
    272e:	93 85       	ldd	r25, Z+11	; 0x0b
    2730:	a4 85       	ldd	r26, Z+12	; 0x0c
    2732:	b5 85       	ldd	r27, Z+13	; 0x0d
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    2734:	88 15       	cp	r24, r8
    2736:	99 05       	cpc	r25, r9
    2738:	aa 05       	cpc	r26, r10
    273a:	bb 05       	cpc	r27, r11
    273c:	30 f5       	brcc	.+76     	; 0x278a <f_lseek+0x1de>
			fp->fsize = fp->fptr;
    273e:	ad 81       	ldd	r26, Y+5	; 0x05
    2740:	be 81       	ldd	r27, Y+6	; 0x06
    2742:	1a 96       	adiw	r26, 0x0a	; 10
    2744:	8d 92       	st	X+, r8
    2746:	9d 92       	st	X+, r9
    2748:	ad 92       	st	X+, r10
    274a:	bc 92       	st	X, r11
    274c:	1d 97       	sbiw	r26, 0x0d	; 13
			fp->flag |= FA__WRITTEN;
    274e:	14 96       	adiw	r26, 0x04	; 4
    2750:	8c 91       	ld	r24, X
    2752:	14 97       	sbiw	r26, 0x04	; 4
    2754:	80 62       	ori	r24, 0x20	; 32
    2756:	14 96       	adiw	r26, 0x04	; 4
    2758:	8c 93       	st	X, r24
    275a:	80 e0       	ldi	r24, 0x00	; 0
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    275c:	26 96       	adiw	r28, 0x06	; 6
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	1f 91       	pop	r17
    276e:	0f 91       	pop	r16
    2770:	ff 90       	pop	r15
    2772:	ef 90       	pop	r14
    2774:	df 90       	pop	r13
    2776:	cf 90       	pop	r12
    2778:	bf 90       	pop	r11
    277a:	af 90       	pop	r10
    277c:	9f 90       	pop	r9
    277e:	8f 90       	pop	r8
    2780:	7f 90       	pop	r7
    2782:	6f 90       	pop	r6
    2784:	5f 90       	pop	r5
    2786:	4f 90       	pop	r4
    2788:	08 95       	ret
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	e7 cf       	rjmp	.-50     	; 0x275c <f_lseek+0x1b0>
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    278e:	8c 14       	cp	r8, r12
    2790:	9d 04       	cpc	r9, r13
    2792:	ae 04       	cpc	r10, r14
    2794:	bf 04       	cpc	r11, r15
    2796:	08 f0       	brcs	.+2      	; 0x279a <f_lseek+0x1ee>
    2798:	05 c1       	rjmp	.+522    	; 0x29a4 <f_lseek+0x3f8>
    279a:	ad 81       	ldd	r26, Y+5	; 0x05
    279c:	be 81       	ldd	r27, Y+6	; 0x06
    279e:	ed 91       	ld	r30, X+
    27a0:	fc 91       	ld	r31, X
    27a2:	9f 01       	movw	r18, r30
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    27a4:	ed 81       	ldd	r30, Y+5	; 0x05
    27a6:	fe 81       	ldd	r31, Y+6	; 0x06
    27a8:	84 81       	ldd	r24, Z+4	; 0x04
    27aa:	81 fd       	sbrc	r24, 1
    27ac:	16 c0       	rjmp	.+44     	; 0x27da <f_lseek+0x22e>
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    27ae:	42 30       	cpi	r20, 0x02	; 2
    27b0:	51 05       	cpc	r21, r1
    27b2:	61 05       	cpc	r22, r1
    27b4:	71 05       	cpc	r23, r1
    27b6:	58 f0       	brcs	.+22     	; 0x27ce <f_lseek+0x222>
    27b8:	f9 01       	movw	r30, r18
    27ba:	82 89       	ldd	r24, Z+18	; 0x12
    27bc:	93 89       	ldd	r25, Z+19	; 0x13
    27be:	a4 89       	ldd	r26, Z+20	; 0x14
    27c0:	b5 89       	ldd	r27, Z+21	; 0x15
    27c2:	48 17       	cp	r20, r24
    27c4:	59 07       	cpc	r21, r25
    27c6:	6a 07       	cpc	r22, r26
    27c8:	7b 07       	cpc	r23, r27
    27ca:	08 f4       	brcc	.+2      	; 0x27ce <f_lseek+0x222>
    27cc:	98 c0       	rjmp	.+304    	; 0x28fe <f_lseek+0x352>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
					clst = create_chain(fp->fs, 0);
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    27ce:	82 e0       	ldi	r24, 0x02	; 2
    27d0:	ad 81       	ldd	r26, Y+5	; 0x05
    27d2:	be 81       	ldd	r27, Y+6	; 0x06
    27d4:	15 96       	adiw	r26, 0x05	; 5
    27d6:	8c 93       	st	X, r24
    27d8:	c1 cf       	rjmp	.-126    	; 0x275c <f_lseek+0x1b0>
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    27da:	c9 01       	movw	r24, r18
    27dc:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <create_chain>
    27e0:	ab 01       	movw	r20, r22
    27e2:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    27e4:	41 15       	cp	r20, r1
    27e6:	51 05       	cpc	r21, r1
    27e8:	61 05       	cpc	r22, r1
    27ea:	71 05       	cpc	r23, r1
    27ec:	09 f4       	brne	.+2      	; 0x27f0 <f_lseek+0x244>
    27ee:	d1 c0       	rjmp	.+418    	; 0x2992 <f_lseek+0x3e6>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    27f0:	4f 3f       	cpi	r20, 0xFF	; 255
    27f2:	ff ef       	ldi	r31, 0xFF	; 255
    27f4:	5f 07       	cpc	r21, r31
    27f6:	6f 07       	cpc	r22, r31
    27f8:	7f 07       	cpc	r23, r31
    27fa:	09 f4       	brne	.+2      	; 0x27fe <f_lseek+0x252>
    27fc:	c1 c0       	rjmp	.+386    	; 0x2980 <f_lseek+0x3d4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    27fe:	42 30       	cpi	r20, 0x02	; 2
    2800:	51 05       	cpc	r21, r1
    2802:	61 05       	cpc	r22, r1
    2804:	71 05       	cpc	r23, r1
    2806:	18 f3       	brcs	.-58     	; 0x27ce <f_lseek+0x222>
    2808:	ad 81       	ldd	r26, Y+5	; 0x05
    280a:	be 81       	ldd	r27, Y+6	; 0x06
    280c:	2d 91       	ld	r18, X+
    280e:	3c 91       	ld	r19, X
    2810:	f9 01       	movw	r30, r18
    2812:	82 89       	ldd	r24, Z+18	; 0x12
    2814:	93 89       	ldd	r25, Z+19	; 0x13
    2816:	a4 89       	ldd	r26, Z+20	; 0x14
    2818:	b5 89       	ldd	r27, Z+21	; 0x15
    281a:	48 17       	cp	r20, r24
    281c:	59 07       	cpc	r21, r25
    281e:	6a 07       	cpc	r22, r26
    2820:	7b 07       	cpc	r23, r27
    2822:	a8 f6       	brcc	.-86     	; 0x27ce <f_lseek+0x222>
					fp->clust = clst;
    2824:	ad 81       	ldd	r26, Y+5	; 0x05
    2826:	be 81       	ldd	r27, Y+6	; 0x06
    2828:	52 96       	adiw	r26, 0x12	; 18
    282a:	4d 93       	st	X+, r20
    282c:	5d 93       	st	X+, r21
    282e:	6d 93       	st	X+, r22
    2830:	7c 93       	st	X, r23
    2832:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    2834:	fd 01       	movw	r30, r26
    2836:	86 81       	ldd	r24, Z+6	; 0x06
    2838:	97 81       	ldd	r25, Z+7	; 0x07
    283a:	a0 85       	ldd	r26, Z+8	; 0x08
    283c:	b1 85       	ldd	r27, Z+9	; 0x09
    283e:	88 0d       	add	r24, r8
    2840:	99 1d       	adc	r25, r9
    2842:	aa 1d       	adc	r26, r10
    2844:	bb 1d       	adc	r27, r11
    2846:	86 83       	std	Z+6, r24	; 0x06
    2848:	97 83       	std	Z+7, r25	; 0x07
    284a:	a0 87       	std	Z+8, r26	; 0x08
    284c:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    284e:	c8 18       	sub	r12, r8
    2850:	d9 08       	sbc	r13, r9
    2852:	ea 08       	sbc	r14, r10
    2854:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    2856:	8c 14       	cp	r8, r12
    2858:	9d 04       	cpc	r9, r13
    285a:	ae 04       	cpc	r10, r14
    285c:	bf 04       	cpc	r11, r15
    285e:	08 f4       	brcc	.+2      	; 0x2862 <f_lseek+0x2b6>
    2860:	a1 cf       	rjmp	.-190    	; 0x27a4 <f_lseek+0x1f8>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    2862:	4c 01       	movw	r8, r24
    2864:	5d 01       	movw	r10, r26
    2866:	8c 0c       	add	r8, r12
    2868:	9d 1c       	adc	r9, r13
    286a:	ae 1c       	adc	r10, r14
    286c:	bf 1c       	adc	r11, r15
    286e:	ad 81       	ldd	r26, Y+5	; 0x05
    2870:	be 81       	ldd	r27, Y+6	; 0x06
    2872:	16 96       	adiw	r26, 0x06	; 6
    2874:	8d 92       	st	X+, r8
    2876:	9d 92       	st	X+, r9
    2878:	ad 92       	st	X+, r10
    287a:	bc 92       	st	X, r11
    287c:	19 97       	sbiw	r26, 0x09	; 9
				if (ofs % SS(fp->fs)) {
    287e:	d7 01       	movw	r26, r14
    2880:	c6 01       	movw	r24, r12
    2882:	91 70       	andi	r25, 0x01	; 1
    2884:	aa 27       	eor	r26, r26
    2886:	bb 27       	eor	r27, r27
    2888:	89 2b       	or	r24, r25
    288a:	8a 2b       	or	r24, r26
    288c:	8b 2b       	or	r24, r27
    288e:	09 f4       	brne	.+2      	; 0x2892 <f_lseek+0x2e6>
    2890:	7c c0       	rjmp	.+248    	; 0x298a <f_lseek+0x3de>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    2892:	ad 81       	ldd	r26, Y+5	; 0x05
    2894:	be 81       	ldd	r27, Y+6	; 0x06
    2896:	ed 91       	ld	r30, X+
    2898:	fc 91       	ld	r31, X
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    289a:	9a 01       	movw	r18, r20
    289c:	ab 01       	movw	r20, r22
    289e:	22 50       	subi	r18, 0x02	; 2
    28a0:	31 09       	sbc	r19, r1
    28a2:	41 09       	sbc	r20, r1
    28a4:	51 09       	sbc	r21, r1
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    28a6:	82 89       	ldd	r24, Z+18	; 0x12
    28a8:	93 89       	ldd	r25, Z+19	; 0x13
    28aa:	a4 89       	ldd	r26, Z+20	; 0x14
    28ac:	b5 89       	ldd	r27, Z+21	; 0x15
    28ae:	02 97       	sbiw	r24, 0x02	; 2
    28b0:	a1 09       	sbc	r26, r1
    28b2:	b1 09       	sbc	r27, r1
    28b4:	28 17       	cp	r18, r24
    28b6:	39 07       	cpc	r19, r25
    28b8:	4a 07       	cpc	r20, r26
    28ba:	5b 07       	cpc	r21, r27
    28bc:	08 f0       	brcs	.+2      	; 0x28c0 <f_lseek+0x314>
    28be:	87 cf       	rjmp	.-242    	; 0x27ce <f_lseek+0x222>
	return clst * fs->csize + fs->database;
    28c0:	a2 81       	ldd	r26, Z+2	; 0x02
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__muluhisi3>
    28c8:	06 a1       	ldd	r16, Z+38	; 0x26
    28ca:	17 a1       	ldd	r17, Z+39	; 0x27
    28cc:	20 a5       	ldd	r18, Z+40	; 0x28
    28ce:	31 a5       	ldd	r19, Z+41	; 0x29
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	80 0f       	add	r24, r16
    28d6:	91 1f       	adc	r25, r17
    28d8:	a2 1f       	adc	r26, r18
    28da:	b3 1f       	adc	r27, r19
					ofs -= bcs;
				}
				fp->fptr += ofs;
				if (ofs % SS(fp->fs)) {
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    28dc:	00 97       	sbiw	r24, 0x00	; 0
    28de:	a1 05       	cpc	r26, r1
    28e0:	b1 05       	cpc	r27, r1
    28e2:	09 f4       	brne	.+2      	; 0x28e6 <f_lseek+0x33a>
    28e4:	74 cf       	rjmp	.-280    	; 0x27ce <f_lseek+0x222>
					nsect += ofs / SS(fp->fs);
    28e6:	29 e0       	ldi	r18, 0x09	; 9
    28e8:	f6 94       	lsr	r15
    28ea:	e7 94       	ror	r14
    28ec:	d7 94       	ror	r13
    28ee:	c7 94       	ror	r12
    28f0:	2a 95       	dec	r18
    28f2:	d1 f7       	brne	.-12     	; 0x28e8 <f_lseek+0x33c>
    28f4:	c8 0e       	add	r12, r24
    28f6:	d9 1e       	adc	r13, r25
    28f8:	ea 1e       	adc	r14, r26
    28fa:	fb 1e       	adc	r15, r27
    28fc:	fa ce       	rjmp	.-524    	; 0x26f2 <f_lseek+0x146>
    28fe:	c9 01       	movw	r24, r18
    2900:	0e 94 19 06 	call	0xc32	; 0xc32 <get_fat.part.4>
    2904:	ab 01       	movw	r20, r22
    2906:	bc 01       	movw	r22, r24
    2908:	73 cf       	rjmp	.-282    	; 0x27f0 <f_lseek+0x244>
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    290a:	88 27       	eor	r24, r24
    290c:	99 27       	eor	r25, r25
    290e:	dc 01       	movw	r26, r24
    2910:	88 19       	sub	r24, r8
    2912:	99 09       	sbc	r25, r9
    2914:	aa 09       	sbc	r26, r10
    2916:	bb 09       	sbc	r27, r11
    2918:	48 22       	and	r4, r24
    291a:	59 22       	and	r5, r25
    291c:	6a 22       	and	r6, r26
    291e:	7b 22       	and	r7, r27
    2920:	ad 81       	ldd	r26, Y+5	; 0x05
    2922:	be 81       	ldd	r27, Y+6	; 0x06
    2924:	16 96       	adiw	r26, 0x06	; 6
    2926:	4d 92       	st	X+, r4
    2928:	5d 92       	st	X+, r5
    292a:	6d 92       	st	X+, r6
    292c:	7c 92       	st	X, r7
    292e:	19 97       	sbiw	r26, 0x09	; 9
				ofs -= fp->fptr;
    2930:	c4 18       	sub	r12, r4
    2932:	d5 08       	sbc	r13, r5
    2934:	e6 08       	sbc	r14, r6
    2936:	f7 08       	sbc	r15, r7
				clst = fp->clust;
    2938:	52 96       	adiw	r26, 0x12	; 18
    293a:	4d 91       	ld	r20, X+
    293c:	5d 91       	ld	r21, X+
    293e:	6d 91       	ld	r22, X+
    2940:	7c 91       	ld	r23, X
    2942:	55 97       	sbiw	r26, 0x15	; 21
    2944:	c5 ce       	rjmp	.-630    	; 0x26d0 <f_lseek+0x124>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
					clst = create_chain(fp->fs, 0);
    2946:	40 e0       	ldi	r20, 0x00	; 0
    2948:	50 e0       	ldi	r21, 0x00	; 0
    294a:	ba 01       	movw	r22, r20
    294c:	c8 01       	movw	r24, r16
    294e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <create_chain>
    2952:	ab 01       	movw	r20, r22
    2954:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2956:	41 30       	cpi	r20, 0x01	; 1
    2958:	51 05       	cpc	r21, r1
    295a:	61 05       	cpc	r22, r1
    295c:	71 05       	cpc	r23, r1
    295e:	09 f4       	brne	.+2      	; 0x2962 <f_lseek+0x3b6>
    2960:	36 cf       	rjmp	.-404    	; 0x27ce <f_lseek+0x222>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2962:	4f 3f       	cpi	r20, 0xFF	; 255
    2964:	bf ef       	ldi	r27, 0xFF	; 255
    2966:	5b 07       	cpc	r21, r27
    2968:	6b 07       	cpc	r22, r27
    296a:	7b 07       	cpc	r23, r27
    296c:	49 f0       	breq	.+18     	; 0x2980 <f_lseek+0x3d4>
					fp->sclust = clst;
    296e:	ad 81       	ldd	r26, Y+5	; 0x05
    2970:	be 81       	ldd	r27, Y+6	; 0x06
    2972:	1e 96       	adiw	r26, 0x0e	; 14
    2974:	4d 93       	st	X+, r20
    2976:	5d 93       	st	X+, r21
    2978:	6d 93       	st	X+, r22
    297a:	7c 93       	st	X, r23
    297c:	51 97       	sbiw	r26, 0x11	; 17
    297e:	a2 ce       	rjmp	.-700    	; 0x26c4 <f_lseek+0x118>
				clst = fp->sclust;						/* start from the first cluster */
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
					clst = create_chain(fp->fs, 0);
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	ed 81       	ldd	r30, Y+5	; 0x05
    2984:	fe 81       	ldd	r31, Y+6	; 0x06
    2986:	85 83       	std	Z+5, r24	; 0x05
    2988:	e9 ce       	rjmp	.-558    	; 0x275c <f_lseek+0x1b0>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    298a:	c1 2c       	mov	r12, r1
    298c:	d1 2c       	mov	r13, r1
    298e:	76 01       	movw	r14, r12
    2990:	b0 ce       	rjmp	.-672    	; 0x26f2 <f_lseek+0x146>
    2992:	ed 81       	ldd	r30, Y+5	; 0x05
    2994:	fe 81       	ldd	r31, Y+6	; 0x06
    2996:	86 81       	ldd	r24, Z+6	; 0x06
    2998:	97 81       	ldd	r25, Z+7	; 0x07
    299a:	a0 85       	ldd	r26, Z+8	; 0x08
    299c:	b1 85       	ldd	r27, Z+9	; 0x09
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
    299e:	75 01       	movw	r14, r10
    29a0:	64 01       	movw	r12, r8
    29a2:	5f cf       	rjmp	.-322    	; 0x2862 <f_lseek+0x2b6>
    29a4:	ed 81       	ldd	r30, Y+5	; 0x05
    29a6:	fe 81       	ldd	r31, Y+6	; 0x06
    29a8:	86 81       	ldd	r24, Z+6	; 0x06
    29aa:	97 81       	ldd	r25, Z+7	; 0x07
    29ac:	a0 85       	ldd	r26, Z+8	; 0x08
    29ae:	b1 85       	ldd	r27, Z+9	; 0x09
    29b0:	58 cf       	rjmp	.-336    	; 0x2862 <f_lseek+0x2b6>

000029b2 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
    29b2:	2f 98       	cbi	0x05, 7	; 5
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    29b4:	8f ef       	ldi	r24, 0xFF	; 255
    29b6:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    29b8:	0d b4       	in	r0, 0x2d	; 45
    29ba:	07 fe       	sbrs	r0, 7
    29bc:	fd cf       	rjmp	.-6      	; 0x29b8 <select+0x6>
	return SPDR;
    29be:	8e b5       	in	r24, 0x2e	; 46
)
{
	BYTE d;


	Timer2 = wt / 10;
    29c0:	82 e3       	ldi	r24, 0x32	; 50
    29c2:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <Timer2>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    29c6:	9f ef       	ldi	r25, 0xFF	; 255
    29c8:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    29ca:	0d b4       	in	r0, 0x2d	; 45
    29cc:	07 fe       	sbrs	r0, 7
    29ce:	fd cf       	rjmp	.-6      	; 0x29ca <select+0x18>
	return SPDR;
    29d0:	8e b5       	in	r24, 0x2e	; 46


	Timer2 = wt / 10;
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    29d2:	8f 3f       	cpi	r24, 0xFF	; 255
    29d4:	71 f0       	breq	.+28     	; 0x29f2 <select+0x40>
    29d6:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <Timer2>
    29da:	81 11       	cpse	r24, r1
    29dc:	f5 cf       	rjmp	.-22     	; 0x29c8 <select+0x16>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    29de:	2f 9a       	sbi	0x05, 7	; 5
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    29e0:	8f ef       	ldi	r24, 0xFF	; 255
    29e2:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    29e4:	0d b4       	in	r0, 0x2d	; 45
    29e6:	07 fe       	sbrs	r0, 7
    29e8:	fd cf       	rjmp	.-6      	; 0x29e4 <select+0x32>
	return SPDR;
    29ea:	8e b5       	in	r24, 0x2e	; 46
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	08 95       	ret
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	08 95       	ret

000029f8 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    29f8:	cf 92       	push	r12
    29fa:	df 92       	push	r13
    29fc:	ef 92       	push	r14
    29fe:	ff 92       	push	r15
    2a00:	cf 93       	push	r28
    2a02:	c8 2f       	mov	r28, r24
    2a04:	6a 01       	movw	r12, r20
    2a06:	7b 01       	movw	r14, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    2a08:	87 fd       	sbrc	r24, 7
    2a0a:	5b c0       	rjmp	.+182    	; 0x2ac2 <send_cmd+0xca>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    2a0c:	cc 30       	cpi	r28, 0x0C	; 12
    2a0e:	91 f0       	breq	.+36     	; 0x2a34 <send_cmd+0x3c>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    2a10:	2f 9a       	sbi	0x05, 7	; 5
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2a12:	8f ef       	ldi	r24, 0xFF	; 255
    2a14:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2a16:	0d b4       	in	r0, 0x2d	; 45
    2a18:	07 fe       	sbrs	r0, 7
    2a1a:	fd cf       	rjmp	.-6      	; 0x2a16 <send_cmd+0x1e>
	return SPDR;
    2a1c:	8e b5       	in	r24, 0x2e	; 46
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    2a1e:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <select>
    2a22:	89 2b       	or	r24, r25
    2a24:	39 f4       	brne	.+14     	; 0x2a34 <send_cmd+0x3c>
    2a26:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    2a28:	cf 91       	pop	r28
    2a2a:	ff 90       	pop	r15
    2a2c:	ef 90       	pop	r14
    2a2e:	df 90       	pop	r13
    2a30:	cf 90       	pop	r12
    2a32:	08 95       	ret
		deselect();
		if (!select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    2a34:	8c 2f       	mov	r24, r28
    2a36:	80 64       	ori	r24, 0x40	; 64
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2a38:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2a3a:	0d b4       	in	r0, 0x2d	; 45
    2a3c:	07 fe       	sbrs	r0, 7
    2a3e:	fd cf       	rjmp	.-6      	; 0x2a3a <send_cmd+0x42>
	return SPDR;
    2a40:	8e b5       	in	r24, 0x2e	; 46
		if (!select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    2a42:	8f 2d       	mov	r24, r15
    2a44:	99 27       	eor	r25, r25
    2a46:	aa 27       	eor	r26, r26
    2a48:	bb 27       	eor	r27, r27
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2a4a:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2a4c:	0d b4       	in	r0, 0x2d	; 45
    2a4e:	07 fe       	sbrs	r0, 7
    2a50:	fd cf       	rjmp	.-6      	; 0x2a4c <send_cmd+0x54>
	return SPDR;
    2a52:	8e b5       	in	r24, 0x2e	; 46
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    2a54:	c7 01       	movw	r24, r14
    2a56:	aa 27       	eor	r26, r26
    2a58:	bb 27       	eor	r27, r27
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2a5a:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2a5c:	0d b4       	in	r0, 0x2d	; 45
    2a5e:	07 fe       	sbrs	r0, 7
    2a60:	fd cf       	rjmp	.-6      	; 0x2a5c <send_cmd+0x64>
	return SPDR;
    2a62:	8e b5       	in	r24, 0x2e	; 46

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    2a64:	bb 27       	eor	r27, r27
    2a66:	af 2d       	mov	r26, r15
    2a68:	9e 2d       	mov	r25, r14
    2a6a:	8d 2d       	mov	r24, r13
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2a6c:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2a6e:	0d b4       	in	r0, 0x2d	; 45
    2a70:	07 fe       	sbrs	r0, 7
    2a72:	fd cf       	rjmp	.-6      	; 0x2a6e <send_cmd+0x76>
	return SPDR;
    2a74:	8e b5       	in	r24, 0x2e	; 46
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2a76:	ce bc       	out	0x2e, r12	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2a78:	0d b4       	in	r0, 0x2d	; 45
    2a7a:	07 fe       	sbrs	r0, 7
    2a7c:	fd cf       	rjmp	.-6      	; 0x2a78 <send_cmd+0x80>
	return SPDR;
    2a7e:	8e b5       	in	r24, 0x2e	; 46
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    2a80:	cc 23       	and	r28, r28
    2a82:	d9 f0       	breq	.+54     	; 0x2aba <send_cmd+0xc2>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    2a84:	c8 30       	cpi	r28, 0x08	; 8
    2a86:	d9 f4       	brne	.+54     	; 0x2abe <send_cmd+0xc6>
    2a88:	87 e8       	ldi	r24, 0x87	; 135
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2a8a:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2a8c:	0d b4       	in	r0, 0x2d	; 45
    2a8e:	07 fe       	sbrs	r0, 7
    2a90:	fd cf       	rjmp	.-6      	; 0x2a8c <send_cmd+0x94>
	return SPDR;
    2a92:	8e b5       	in	r24, 0x2e	; 46
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    2a94:	cc 30       	cpi	r28, 0x0C	; 12
    2a96:	01 f1       	breq	.+64     	; 0x2ad8 <send_cmd+0xe0>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    2a98:	9a e0       	ldi	r25, 0x0A	; 10
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2a9a:	2f ef       	ldi	r18, 0xFF	; 255
    2a9c:	2e bd       	out	0x2e, r18	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2a9e:	0d b4       	in	r0, 0x2d	; 45
    2aa0:	07 fe       	sbrs	r0, 7
    2aa2:	fd cf       	rjmp	.-6      	; 0x2a9e <send_cmd+0xa6>
	return SPDR;
    2aa4:	8e b5       	in	r24, 0x2e	; 46
	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);
    2aa6:	87 ff       	sbrs	r24, 7
    2aa8:	bf cf       	rjmp	.-130    	; 0x2a28 <send_cmd+0x30>
    2aaa:	91 50       	subi	r25, 0x01	; 1
    2aac:	b9 f7       	brne	.-18     	; 0x2a9c <send_cmd+0xa4>

	return res;			/* Return with the response value */
}
    2aae:	cf 91       	pop	r28
    2ab0:	ff 90       	pop	r15
    2ab2:	ef 90       	pop	r14
    2ab4:	df 90       	pop	r13
    2ab6:	cf 90       	pop	r12
    2ab8:	08 95       	ret
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    2aba:	85 e9       	ldi	r24, 0x95	; 149
    2abc:	e6 cf       	rjmp	.-52     	; 0x2a8a <send_cmd+0x92>
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	e4 cf       	rjmp	.-56     	; 0x2a8a <send_cmd+0x92>
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    2ac2:	40 e0       	ldi	r20, 0x00	; 0
    2ac4:	50 e0       	ldi	r21, 0x00	; 0
    2ac6:	ba 01       	movw	r22, r20
    2ac8:	87 e3       	ldi	r24, 0x37	; 55
    2aca:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
		if (res > 1) return res;
    2ace:	82 30       	cpi	r24, 0x02	; 2
    2ad0:	08 f0       	brcs	.+2      	; 0x2ad4 <send_cmd+0xdc>
    2ad2:	aa cf       	rjmp	.-172    	; 0x2a28 <send_cmd+0x30>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    2ad4:	cf 77       	andi	r28, 0x7F	; 127
    2ad6:	9a cf       	rjmp	.-204    	; 0x2a0c <send_cmd+0x14>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2ad8:	8f ef       	ldi	r24, 0xFF	; 255
    2ada:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2adc:	0d b4       	in	r0, 0x2d	; 45
    2ade:	07 fe       	sbrs	r0, 7
    2ae0:	fd cf       	rjmp	.-6      	; 0x2adc <send_cmd+0xe4>
	return SPDR;
    2ae2:	8e b5       	in	r24, 0x2e	; 46
    2ae4:	d9 cf       	rjmp	.-78     	; 0x2a98 <send_cmd+0xa0>

00002ae6 <rcvr_datablock>:
)
{
	BYTE token;


	Timer1 = 20;
    2ae6:	24 e1       	ldi	r18, 0x14	; 20
    2ae8:	20 93 de 02 	sts	0x02DE, r18	; 0x8002de <Timer1>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2aec:	3f ef       	ldi	r19, 0xFF	; 255
    2aee:	3e bd       	out	0x2e, r19	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2af0:	0d b4       	in	r0, 0x2d	; 45
    2af2:	07 fe       	sbrs	r0, 7
    2af4:	fd cf       	rjmp	.-6      	; 0x2af0 <rcvr_datablock+0xa>
	return SPDR;
    2af6:	2e b5       	in	r18, 0x2e	; 46


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    2af8:	2f 3f       	cpi	r18, 0xFF	; 255
    2afa:	39 f4       	brne	.+14     	; 0x2b0a <rcvr_datablock+0x24>
    2afc:	20 91 de 02 	lds	r18, 0x02DE	; 0x8002de <Timer1>
    2b00:	21 11       	cpse	r18, r1
    2b02:	f5 cf       	rjmp	.-22     	; 0x2aee <rcvr_datablock+0x8>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    2b08:	08 95       	ret

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    2b0a:	2e 3f       	cpi	r18, 0xFE	; 254
    2b0c:	d9 f7       	brne	.-10     	; 0x2b04 <rcvr_datablock+0x1e>
    2b0e:	fc 01       	movw	r30, r24
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    2b10:	8f ef       	ldi	r24, 0xFF	; 255
    2b12:	8e bd       	out	0x2e, r24	; 46
    2b14:	0d b4       	in	r0, 0x2d	; 45
    2b16:	07 fe       	sbrs	r0, 7
    2b18:	fd cf       	rjmp	.-6      	; 0x2b14 <rcvr_datablock+0x2e>
    2b1a:	9e b5       	in	r25, 0x2e	; 46
    2b1c:	90 83       	st	Z, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    2b1e:	8e bd       	out	0x2e, r24	; 46
    2b20:	0d b4       	in	r0, 0x2d	; 45
    2b22:	07 fe       	sbrs	r0, 7
    2b24:	fd cf       	rjmp	.-6      	; 0x2b20 <rcvr_datablock+0x3a>
    2b26:	9e b5       	in	r25, 0x2e	; 46
    2b28:	91 83       	std	Z+1, r25	; 0x01
	} while (cnt -= 2);
    2b2a:	62 50       	subi	r22, 0x02	; 2
    2b2c:	71 09       	sbc	r23, r1
    2b2e:	32 96       	adiw	r30, 0x02	; 2
    2b30:	61 15       	cp	r22, r1
    2b32:	71 05       	cpc	r23, r1
    2b34:	71 f7       	brne	.-36     	; 0x2b12 <rcvr_datablock+0x2c>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2b36:	8f ef       	ldi	r24, 0xFF	; 255
    2b38:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2b3a:	0d b4       	in	r0, 0x2d	; 45
    2b3c:	07 fe       	sbrs	r0, 7
    2b3e:	fd cf       	rjmp	.-6      	; 0x2b3a <rcvr_datablock+0x54>
	return SPDR;
    2b40:	8e b5       	in	r24, 0x2e	; 46
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2b42:	8f ef       	ldi	r24, 0xFF	; 255
    2b44:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2b46:	0d b4       	in	r0, 0x2d	; 45
    2b48:	07 fe       	sbrs	r0, 7
    2b4a:	fd cf       	rjmp	.-6      	; 0x2b46 <rcvr_datablock+0x60>
	return SPDR;
    2b4c:	8e b5       	in	r24, 0x2e	; 46
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	08 95       	ret

00002b54 <xmit_datablock>:
)
{
	BYTE d;


	Timer2 = wt / 10;
    2b54:	22 e3       	ldi	r18, 0x32	; 50
    2b56:	20 93 dd 02 	sts	0x02DD, r18	; 0x8002dd <Timer2>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2b5a:	3f ef       	ldi	r19, 0xFF	; 255
    2b5c:	3e bd       	out	0x2e, r19	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2b5e:	0d b4       	in	r0, 0x2d	; 45
    2b60:	07 fe       	sbrs	r0, 7
    2b62:	fd cf       	rjmp	.-6      	; 0x2b5e <xmit_datablock+0xa>
	return SPDR;
    2b64:	2e b5       	in	r18, 0x2e	; 46


	Timer2 = wt / 10;
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    2b66:	2f 3f       	cpi	r18, 0xFF	; 255
    2b68:	39 f0       	breq	.+14     	; 0x2b78 <xmit_datablock+0x24>
    2b6a:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <Timer2>
    2b6e:	21 11       	cpse	r18, r1
    2b70:	f5 cf       	rjmp	.-22     	; 0x2b5c <xmit_datablock+0x8>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	08 95       	ret
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2b78:	6e bd       	out	0x2e, r22	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2b7a:	0d b4       	in	r0, 0x2d	; 45
    2b7c:	07 fe       	sbrs	r0, 7
    2b7e:	fd cf       	rjmp	.-6      	; 0x2b7a <xmit_datablock+0x26>
	return SPDR;
    2b80:	2e b5       	in	r18, 0x2e	; 46


	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
    2b82:	6d 3f       	cpi	r22, 0xFD	; 253
    2b84:	59 f1       	breq	.+86     	; 0x2bdc <xmit_datablock+0x88>
    2b86:	fc 01       	movw	r30, r24
    2b88:	9c 01       	movw	r18, r24
    2b8a:	3e 5f       	subi	r19, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    2b8c:	80 81       	ld	r24, Z
    2b8e:	8e bd       	out	0x2e, r24	; 46
    2b90:	0d b4       	in	r0, 0x2d	; 45
    2b92:	07 fe       	sbrs	r0, 7
    2b94:	fd cf       	rjmp	.-6      	; 0x2b90 <xmit_datablock+0x3c>
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    2b96:	81 81       	ldd	r24, Z+1	; 0x01
    2b98:	8e bd       	out	0x2e, r24	; 46
    2b9a:	0d b4       	in	r0, 0x2d	; 45
    2b9c:	07 fe       	sbrs	r0, 7
    2b9e:	fd cf       	rjmp	.-6      	; 0x2b9a <xmit_datablock+0x46>
    2ba0:	32 96       	adiw	r30, 0x02	; 2
	} while (cnt -= 2);
    2ba2:	e2 17       	cp	r30, r18
    2ba4:	f3 07       	cpc	r31, r19
    2ba6:	91 f7       	brne	.-28     	; 0x2b8c <xmit_datablock+0x38>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2ba8:	8f ef       	ldi	r24, 0xFF	; 255
    2baa:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2bac:	0d b4       	in	r0, 0x2d	; 45
    2bae:	07 fe       	sbrs	r0, 7
    2bb0:	fd cf       	rjmp	.-6      	; 0x2bac <xmit_datablock+0x58>
	return SPDR;
    2bb2:	8e b5       	in	r24, 0x2e	; 46
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2bb4:	8f ef       	ldi	r24, 0xFF	; 255
    2bb6:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2bb8:	0d b4       	in	r0, 0x2d	; 45
    2bba:	07 fe       	sbrs	r0, 7
    2bbc:	fd cf       	rjmp	.-6      	; 0x2bb8 <xmit_datablock+0x64>
	return SPDR;
    2bbe:	8e b5       	in	r24, 0x2e	; 46
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2bc0:	8f ef       	ldi	r24, 0xFF	; 255
    2bc2:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2bc4:	0d b4       	in	r0, 0x2d	; 45
    2bc6:	07 fe       	sbrs	r0, 7
    2bc8:	fd cf       	rjmp	.-6      	; 0x2bc4 <xmit_datablock+0x70>
	return SPDR;
    2bca:	2e b5       	in	r18, 0x2e	; 46
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    2bcc:	2f 71       	andi	r18, 0x1F	; 31
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	25 30       	cpi	r18, 0x05	; 5
    2bd4:	11 f0       	breq	.+4      	; 0x2bda <xmit_datablock+0x86>
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	08 95       	ret
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
}
    2bda:	08 95       	ret
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	08 95       	ret

00002be2 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    2be2:	ef 92       	push	r14
    2be4:	ff 92       	push	r15
    2be6:	0f 93       	push	r16
    2be8:	1f 93       	push	r17
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	00 d0       	rcall	.+0      	; 0x2bf0 <disk_initialize+0xe>
    2bf0:	00 d0       	rcall	.+0      	; 0x2bf2 <disk_initialize+0x10>
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    2bf6:	81 11       	cpse	r24, r1
    2bf8:	49 c0       	rjmp	.+146    	; 0x2c8c <disk_initialize+0xaa>
}

static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
    2bfa:	1c bc       	out	0x2c, r1	; 44

	// HACK 
	DDRB &= ~(1<<PINB0); // Restore SS to Hi-Z
    2bfc:	20 98       	cbi	0x04, 0	; 4

	DDRB  &= ~((1<<PINB1) | (1<<PINB2) | (1<<PINB7));	/* Set SCK/MOSI/CS as hi-z */
    2bfe:	84 b1       	in	r24, 0x04	; 4
    2c00:	89 77       	andi	r24, 0x79	; 121
    2c02:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1<<PINB1) | (1<<PINB2));
    2c04:	85 b1       	in	r24, 0x05	; 5
    2c06:	89 7f       	andi	r24, 0xF9	; 249
    2c08:	85 b9       	out	0x05, r24	; 5
	PORTB |=  (1<<PINB7);								/* Pull-up on CS */
    2c0a:	2f 9a       	sbi	0x05, 7	; 5
{
	BYTE n, cmd, ty, ocr[4];

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    2c0c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
    2c10:	81 fd       	sbrc	r24, 1
    2c12:	2f c0       	rjmp	.+94     	; 0x2c72 <disk_initialize+0x90>

static
void power_on (void)
{
	// HACK
	DDRB |= (1<<PINB0); // Set SS as output to avoid bus contention....
    2c14:	20 9a       	sbi	0x04, 0	; 4
	
	PORTB |= (1<<PINB1) | (1<<PINB7);				/* Clock idles low */
    2c16:	85 b1       	in	r24, 0x05	; 5
    2c18:	82 68       	ori	r24, 0x82	; 130
    2c1a:	85 b9       	out	0x05, r24	; 5
	DDRB  |= (1<<PINB1) | (1<<PINB2) | (1<<PINB7);	/* Configure SCK/MOSI/CS as output */
    2c1c:	84 b1       	in	r24, 0x04	; 4
    2c1e:	86 68       	ori	r24, 0x86	; 134
    2c20:	84 b9       	out	0x04, r24	; 4

	SPCR = 0x52;			/* Enable SPI function in mode 0 */
    2c22:	82 e5       	ldi	r24, 0x52	; 82
    2c24:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0x01;			/* SPI 2x mode */
    2c26:	91 e0       	ldi	r25, 0x01	; 1
    2c28:	9d bd       	out	0x2d, r25	; 45

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    2c2a:	8c bd       	out	0x2c, r24	; 44
    2c2c:	8a e0       	ldi	r24, 0x0A	; 10
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2c2e:	9f ef       	ldi	r25, 0xFF	; 255
    2c30:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2c32:	0d b4       	in	r0, 0x2d	; 45
    2c34:	07 fe       	sbrs	r0, 7
    2c36:	fd cf       	rjmp	.-6      	; 0x2c32 <disk_initialize+0x50>
	return SPDR;
    2c38:	2e b5       	in	r18, 0x2e	; 46
    2c3a:	81 50       	subi	r24, 0x01	; 1
	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    2c3c:	c9 f7       	brne	.-14     	; 0x2c30 <disk_initialize+0x4e>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    2c3e:	40 e0       	ldi	r20, 0x00	; 0
    2c40:	50 e0       	ldi	r21, 0x00	; 0
    2c42:	ba 01       	movw	r22, r20
    2c44:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
    2c48:	81 30       	cpi	r24, 0x01	; 1
    2c4a:	61 f1       	breq	.+88     	; 0x2ca4 <disk_initialize+0xc2>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    2c4c:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	CardType = ty;
    2c4e:	10 93 dc 02 	sts	0x02DC, r17	; 0x8002dc <CardType>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    2c52:	2f 9a       	sbi	0x05, 7	; 5
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2c54:	8f ef       	ldi	r24, 0xFF	; 255
    2c56:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2c58:	0d b4       	in	r0, 0x2d	; 45
    2c5a:	07 fe       	sbrs	r0, 7
    2c5c:	fd cf       	rjmp	.-6      	; 0x2c58 <disk_initialize+0x76>
	return SPDR;
    2c5e:	8e b5       	in	r24, 0x2e	; 46
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
    2c60:	11 23       	and	r17, r17
    2c62:	b1 f0       	breq	.+44     	; 0x2c90 <disk_initialize+0xae>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    2c64:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
    2c68:	8e 7f       	andi	r24, 0xFE	; 254
    2c6a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Stat>
		FCLK_FAST();
    2c6e:	80 e5       	ldi	r24, 0x50	; 80
    2c70:	8c bd       	out	0x2c, r24	; 44
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    2c72:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
}
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	df 91       	pop	r29
    2c80:	cf 91       	pop	r28
    2c82:	1f 91       	pop	r17
    2c84:	0f 91       	pop	r16
    2c86:	ff 90       	pop	r15
    2c88:	ef 90       	pop	r14
    2c8a:	08 95       	ret
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	BYTE n, cmd, ty, ocr[4];

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	f3 cf       	rjmp	.-26     	; 0x2c76 <disk_initialize+0x94>
}

static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
    2c90:	1c bc       	out	0x2c, r1	; 44

	// HACK 
	DDRB &= ~(1<<PINB0); // Restore SS to Hi-Z
    2c92:	20 98       	cbi	0x04, 0	; 4

	DDRB  &= ~((1<<PINB1) | (1<<PINB2) | (1<<PINB7));	/* Set SCK/MOSI/CS as hi-z */
    2c94:	84 b1       	in	r24, 0x04	; 4
    2c96:	89 77       	andi	r24, 0x79	; 121
    2c98:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1<<PINB1) | (1<<PINB2));
    2c9a:	85 b1       	in	r24, 0x05	; 5
    2c9c:	89 7f       	andi	r24, 0xF9	; 249
    2c9e:	85 b9       	out	0x05, r24	; 5
	PORTB |=  (1<<PINB7);								/* Pull-up on CS */
    2ca0:	2f 9a       	sbi	0x05, 7	; 5
    2ca2:	e7 cf       	rjmp	.-50     	; 0x2c72 <disk_initialize+0x90>
	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    2ca4:	84 e6       	ldi	r24, 0x64	; 100
    2ca6:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <Timer1>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    2caa:	4a ea       	ldi	r20, 0xAA	; 170
    2cac:	51 e0       	ldi	r21, 0x01	; 1
    2cae:	60 e0       	ldi	r22, 0x00	; 0
    2cb0:	70 e0       	ldi	r23, 0x00	; 0
    2cb2:	88 e0       	ldi	r24, 0x08	; 8
    2cb4:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
    2cb8:	81 30       	cpi	r24, 0x01	; 1
    2cba:	41 f1       	breq	.+80     	; 0x2d0c <disk_initialize+0x12a>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    2cbc:	40 e0       	ldi	r20, 0x00	; 0
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	ba 01       	movw	r22, r20
    2cc2:	89 ea       	ldi	r24, 0xA9	; 169
    2cc4:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
    2cc8:	82 30       	cpi	r24, 0x02	; 2
    2cca:	08 f4       	brcc	.+2      	; 0x2cce <disk_initialize+0xec>
    2ccc:	65 c0       	rjmp	.+202    	; 0x2d98 <disk_initialize+0x1b6>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    2cce:	11 e0       	ldi	r17, 0x01	; 1
    2cd0:	01 e0       	ldi	r16, 0x01	; 1
    2cd2:	08 c0       	rjmp	.+16     	; 0x2ce4 <disk_initialize+0x102>
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    2cd4:	40 e0       	ldi	r20, 0x00	; 0
    2cd6:	50 e0       	ldi	r21, 0x00	; 0
    2cd8:	ba 01       	movw	r22, r20
    2cda:	80 2f       	mov	r24, r16
    2cdc:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
    2ce0:	88 23       	and	r24, r24
    2ce2:	21 f0       	breq	.+8      	; 0x2cec <disk_initialize+0x10a>
    2ce4:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <Timer1>
    2ce8:	81 11       	cpse	r24, r1
    2cea:	f4 cf       	rjmp	.-24     	; 0x2cd4 <disk_initialize+0xf2>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    2cec:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <Timer1>
    2cf0:	88 23       	and	r24, r24
    2cf2:	09 f4       	brne	.+2      	; 0x2cf6 <disk_initialize+0x114>
    2cf4:	ab cf       	rjmp	.-170    	; 0x2c4c <disk_initialize+0x6a>
    2cf6:	40 e0       	ldi	r20, 0x00	; 0
    2cf8:	52 e0       	ldi	r21, 0x02	; 2
    2cfa:	60 e0       	ldi	r22, 0x00	; 0
    2cfc:	70 e0       	ldi	r23, 0x00	; 0
    2cfe:	80 e1       	ldi	r24, 0x10	; 16
    2d00:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
    2d04:	88 23       	and	r24, r24
    2d06:	09 f4       	brne	.+2      	; 0x2d0a <disk_initialize+0x128>
    2d08:	a2 cf       	rjmp	.-188    	; 0x2c4e <disk_initialize+0x6c>
    2d0a:	a0 cf       	rjmp	.-192    	; 0x2c4c <disk_initialize+0x6a>
    2d0c:	8e 01       	movw	r16, r28
    2d0e:	0f 5f       	subi	r16, 0xFF	; 255
    2d10:	1f 4f       	sbci	r17, 0xFF	; 255
    2d12:	7e 01       	movw	r14, r28
    2d14:	85 e0       	ldi	r24, 0x05	; 5
    2d16:	e8 0e       	add	r14, r24
    2d18:	f1 1c       	adc	r15, r1
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    2d1a:	f8 01       	movw	r30, r16
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2d1c:	9f ef       	ldi	r25, 0xFF	; 255
    2d1e:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2d20:	0d b4       	in	r0, 0x2d	; 45
    2d22:	07 fe       	sbrs	r0, 7
    2d24:	fd cf       	rjmp	.-6      	; 0x2d20 <disk_initialize+0x13e>
	return SPDR;
    2d26:	8e b5       	in	r24, 0x2e	; 46

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    2d28:	81 93       	st	Z+, r24
    2d2a:	ee 16       	cp	r14, r30
    2d2c:	ff 06       	cpc	r15, r31
    2d2e:	b9 f7       	brne	.-18     	; 0x2d1e <disk_initialize+0x13c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    2d30:	8b 81       	ldd	r24, Y+3	; 0x03
    2d32:	81 30       	cpi	r24, 0x01	; 1
    2d34:	09 f0       	breq	.+2      	; 0x2d38 <disk_initialize+0x156>
    2d36:	8a cf       	rjmp	.-236    	; 0x2c4c <disk_initialize+0x6a>
    2d38:	8c 81       	ldd	r24, Y+4	; 0x04
    2d3a:	8a 3a       	cpi	r24, 0xAA	; 170
    2d3c:	09 f0       	breq	.+2      	; 0x2d40 <disk_initialize+0x15e>
    2d3e:	86 cf       	rjmp	.-244    	; 0x2c4c <disk_initialize+0x6a>
    2d40:	09 c0       	rjmp	.+18     	; 0x2d54 <disk_initialize+0x172>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    2d42:	40 e0       	ldi	r20, 0x00	; 0
    2d44:	50 e0       	ldi	r21, 0x00	; 0
    2d46:	60 e0       	ldi	r22, 0x00	; 0
    2d48:	70 e4       	ldi	r23, 0x40	; 64
    2d4a:	89 ea       	ldi	r24, 0xA9	; 169
    2d4c:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
    2d50:	88 23       	and	r24, r24
    2d52:	21 f0       	breq	.+8      	; 0x2d5c <disk_initialize+0x17a>
    2d54:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <Timer1>
    2d58:	81 11       	cpse	r24, r1
    2d5a:	f3 cf       	rjmp	.-26     	; 0x2d42 <disk_initialize+0x160>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    2d5c:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <Timer1>
    2d60:	88 23       	and	r24, r24
    2d62:	09 f4       	brne	.+2      	; 0x2d66 <disk_initialize+0x184>
    2d64:	73 cf       	rjmp	.-282    	; 0x2c4c <disk_initialize+0x6a>
    2d66:	40 e0       	ldi	r20, 0x00	; 0
    2d68:	50 e0       	ldi	r21, 0x00	; 0
    2d6a:	ba 01       	movw	r22, r20
    2d6c:	8a e3       	ldi	r24, 0x3A	; 58
    2d6e:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
    2d72:	81 11       	cpse	r24, r1
    2d74:	6b cf       	rjmp	.-298    	; 0x2c4c <disk_initialize+0x6a>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2d76:	8f ef       	ldi	r24, 0xFF	; 255
    2d78:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2d7a:	0d b4       	in	r0, 0x2d	; 45
    2d7c:	07 fe       	sbrs	r0, 7
    2d7e:	fd cf       	rjmp	.-6      	; 0x2d7a <disk_initialize+0x198>
	return SPDR;
    2d80:	9e b5       	in	r25, 0x2e	; 46
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    2d82:	f8 01       	movw	r30, r16
    2d84:	91 93       	st	Z+, r25
    2d86:	8f 01       	movw	r16, r30
    2d88:	ee 16       	cp	r14, r30
    2d8a:	ff 06       	cpc	r15, r31
    2d8c:	a9 f7       	brne	.-22     	; 0x2d78 <disk_initialize+0x196>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	86 fd       	sbrc	r24, 6
    2d92:	05 c0       	rjmp	.+10     	; 0x2d9e <disk_initialize+0x1bc>
    2d94:	14 e0       	ldi	r17, 0x04	; 4
    2d96:	5b cf       	rjmp	.-330    	; 0x2c4e <disk_initialize+0x6c>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    2d98:	12 e0       	ldi	r17, 0x02	; 2
    2d9a:	09 ea       	ldi	r16, 0xA9	; 169
    2d9c:	a3 cf       	rjmp	.-186    	; 0x2ce4 <disk_initialize+0x102>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    2d9e:	1c e0       	ldi	r17, 0x0C	; 12
    2da0:	56 cf       	rjmp	.-340    	; 0x2c4e <disk_initialize+0x6c>

00002da2 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    2da2:	81 11       	cpse	r24, r1
    2da4:	03 c0       	rjmp	.+6      	; 0x2dac <disk_status+0xa>
	return Stat;
    2da6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
    2daa:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    2dac:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    2dae:	08 95       	ret

00002db0 <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    2db0:	ff 92       	push	r15
    2db2:	0f 93       	push	r16
    2db4:	1f 93       	push	r17
    2db6:	cf 93       	push	r28
    2db8:	df 93       	push	r29
    2dba:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    2dbc:	88 23       	and	r24, r24
    2dbe:	41 f0       	breq	.+16     	; 0x2dd0 <disk_read+0x20>
    2dc0:	c4 e0       	ldi	r28, 0x04	; 4
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    2dc2:	8c 2f       	mov	r24, r28
    2dc4:	df 91       	pop	r29
    2dc6:	cf 91       	pop	r28
    2dc8:	1f 91       	pop	r17
    2dca:	0f 91       	pop	r16
    2dcc:	ff 90       	pop	r15
    2dce:	08 95       	ret
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    2dd0:	01 15       	cp	r16, r1
    2dd2:	11 05       	cpc	r17, r1
    2dd4:	a9 f3       	breq	.-22     	; 0x2dc0 <disk_read+0x10>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2dd6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
    2dda:	80 ff       	sbrs	r24, 0
    2ddc:	02 c0       	rjmp	.+4      	; 0x2de2 <disk_read+0x32>
    2dde:	c3 e0       	ldi	r28, 0x03	; 3
    2de0:	f0 cf       	rjmp	.-32     	; 0x2dc2 <disk_read+0x12>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    2de2:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <CardType>
    2de6:	83 fd       	sbrc	r24, 3
    2de8:	07 c0       	rjmp	.+14     	; 0x2df8 <disk_read+0x48>
    2dea:	69 e0       	ldi	r22, 0x09	; 9
    2dec:	22 0f       	add	r18, r18
    2dee:	33 1f       	adc	r19, r19
    2df0:	44 1f       	adc	r20, r20
    2df2:	55 1f       	adc	r21, r21
    2df4:	6a 95       	dec	r22
    2df6:	d1 f7       	brne	.-12     	; 0x2dec <disk_read+0x3c>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    2df8:	02 30       	cpi	r16, 0x02	; 2
    2dfa:	11 05       	cpc	r17, r1
    2dfc:	40 f1       	brcs	.+80     	; 0x2e4e <disk_read+0x9e>
    2dfe:	92 e1       	ldi	r25, 0x12	; 18
    2e00:	f9 2e       	mov	r15, r25
	if (send_cmd(cmd, sector) == 0) {
    2e02:	ba 01       	movw	r22, r20
    2e04:	a9 01       	movw	r20, r18
    2e06:	8f 2d       	mov	r24, r15
    2e08:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
    2e0c:	88 23       	and	r24, r24
    2e0e:	69 f0       	breq	.+26     	; 0x2e2a <disk_read+0x7a>
    2e10:	c1 e0       	ldi	r28, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    2e12:	2f 9a       	sbi	0x05, 7	; 5
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2e14:	8f ef       	ldi	r24, 0xFF	; 255
    2e16:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2e18:	0d b4       	in	r0, 0x2d	; 45
    2e1a:	07 fe       	sbrs	r0, 7
    2e1c:	fd cf       	rjmp	.-6      	; 0x2e18 <disk_read+0x68>
	return SPDR;
    2e1e:	8e b5       	in	r24, 0x2e	; 46
		} while (--count);
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
    2e20:	d0 cf       	rjmp	.-96     	; 0x2dc2 <disk_read+0x12>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
	if (send_cmd(cmd, sector) == 0) {
		do {
			if (!rcvr_datablock(buff, 512)) break;
			buff += 512;
    2e22:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    2e24:	01 50       	subi	r16, 0x01	; 1
    2e26:	11 09       	sbc	r17, r1
    2e28:	a9 f0       	breq	.+42     	; 0x2e54 <disk_read+0xa4>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
	if (send_cmd(cmd, sector) == 0) {
		do {
			if (!rcvr_datablock(buff, 512)) break;
    2e2a:	60 e0       	ldi	r22, 0x00	; 0
    2e2c:	72 e0       	ldi	r23, 0x02	; 2
    2e2e:	ce 01       	movw	r24, r28
    2e30:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <rcvr_datablock>
    2e34:	89 2b       	or	r24, r25
    2e36:	a9 f7       	brne	.-22     	; 0x2e22 <disk_read+0x72>
    2e38:	c1 e0       	ldi	r28, 0x01	; 1
			buff += 512;
		} while (--count);
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    2e3a:	82 e1       	ldi	r24, 0x12	; 18
    2e3c:	f8 12       	cpse	r15, r24
    2e3e:	e9 cf       	rjmp	.-46     	; 0x2e12 <disk_read+0x62>
    2e40:	40 e0       	ldi	r20, 0x00	; 0
    2e42:	50 e0       	ldi	r21, 0x00	; 0
    2e44:	ba 01       	movw	r22, r20
    2e46:	8c e0       	ldi	r24, 0x0C	; 12
    2e48:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
    2e4c:	e2 cf       	rjmp	.-60     	; 0x2e12 <disk_read+0x62>
	if (pdrv || !count) return RES_PARERR;
	if (Stat & STA_NOINIT) return RES_NOTRDY;

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    2e4e:	81 e1       	ldi	r24, 0x11	; 17
    2e50:	f8 2e       	mov	r15, r24
    2e52:	d7 cf       	rjmp	.-82     	; 0x2e02 <disk_read+0x52>
    2e54:	c0 e0       	ldi	r28, 0x00	; 0
    2e56:	f1 cf       	rjmp	.-30     	; 0x2e3a <disk_read+0x8a>

00002e58 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    2e58:	cf 92       	push	r12
    2e5a:	df 92       	push	r13
    2e5c:	ef 92       	push	r14
    2e5e:	ff 92       	push	r15
    2e60:	0f 93       	push	r16
    2e62:	1f 93       	push	r17
    2e64:	cf 93       	push	r28
    2e66:	df 93       	push	r29
    2e68:	eb 01       	movw	r28, r22
    2e6a:	69 01       	movw	r12, r18
    2e6c:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    2e6e:	88 23       	and	r24, r24
    2e70:	59 f0       	breq	.+22     	; 0x2e88 <disk_write+0x30>
    2e72:	24 e0       	ldi	r18, 0x04	; 4
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    2e74:	82 2f       	mov	r24, r18
    2e76:	df 91       	pop	r29
    2e78:	cf 91       	pop	r28
    2e7a:	1f 91       	pop	r17
    2e7c:	0f 91       	pop	r16
    2e7e:	ff 90       	pop	r15
    2e80:	ef 90       	pop	r14
    2e82:	df 90       	pop	r13
    2e84:	cf 90       	pop	r12
    2e86:	08 95       	ret
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    2e88:	01 15       	cp	r16, r1
    2e8a:	11 05       	cpc	r17, r1
    2e8c:	91 f3       	breq	.-28     	; 0x2e72 <disk_write+0x1a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2e8e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
    2e92:	80 ff       	sbrs	r24, 0
    2e94:	02 c0       	rjmp	.+4      	; 0x2e9a <disk_write+0x42>
    2e96:	23 e0       	ldi	r18, 0x03	; 3
    2e98:	ed cf       	rjmp	.-38     	; 0x2e74 <disk_write+0x1c>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    2e9a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
    2e9e:	82 ff       	sbrs	r24, 2
    2ea0:	02 c0       	rjmp	.+4      	; 0x2ea6 <disk_write+0x4e>
    2ea2:	22 e0       	ldi	r18, 0x02	; 2
    2ea4:	e7 cf       	rjmp	.-50     	; 0x2e74 <disk_write+0x1c>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    2ea6:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <CardType>
    2eaa:	83 fd       	sbrc	r24, 3
    2eac:	07 c0       	rjmp	.+14     	; 0x2ebc <disk_write+0x64>
    2eae:	99 e0       	ldi	r25, 0x09	; 9
    2eb0:	cc 0c       	add	r12, r12
    2eb2:	dd 1c       	adc	r13, r13
    2eb4:	ee 1c       	adc	r14, r14
    2eb6:	ff 1c       	adc	r15, r15
    2eb8:	9a 95       	dec	r25
    2eba:	d1 f7       	brne	.-12     	; 0x2eb0 <disk_write+0x58>

	if (count == 1) {	/* Single block write */
    2ebc:	01 30       	cpi	r16, 0x01	; 1
    2ebe:	11 05       	cpc	r17, r1
    2ec0:	79 f1       	breq	.+94     	; 0x2f20 <disk_write+0xc8>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    2ec2:	86 70       	andi	r24, 0x06	; 6
    2ec4:	31 f5       	brne	.+76     	; 0x2f12 <disk_write+0xba>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    2ec6:	b7 01       	movw	r22, r14
    2ec8:	a6 01       	movw	r20, r12
    2eca:	89 e1       	ldi	r24, 0x19	; 25
    2ecc:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
    2ed0:	88 23       	and	r24, r24
    2ed2:	69 f0       	breq	.+26     	; 0x2eee <disk_write+0x96>
    2ed4:	21 e0       	ldi	r18, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    2ed6:	2f 9a       	sbi	0x05, 7	; 5
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2ed8:	8f ef       	ldi	r24, 0xFF	; 255
    2eda:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2edc:	0d b4       	in	r0, 0x2d	; 45
    2ede:	07 fe       	sbrs	r0, 7
    2ee0:	fd cf       	rjmp	.-6      	; 0x2edc <disk_write+0x84>
	return SPDR;
    2ee2:	8e b5       	in	r24, 0x2e	; 46
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
    2ee4:	c7 cf       	rjmp	.-114    	; 0x2e74 <disk_write+0x1c>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
    2ee6:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    2ee8:	01 50       	subi	r16, 0x01	; 1
    2eea:	11 09       	sbc	r17, r1
    2eec:	31 f0       	breq	.+12     	; 0x2efa <disk_write+0xa2>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    2eee:	6c ef       	ldi	r22, 0xFC	; 252
    2ef0:	ce 01       	movw	r24, r28
    2ef2:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <xmit_datablock>
    2ef6:	89 2b       	or	r24, r25
    2ef8:	b1 f7       	brne	.-20     	; 0x2ee6 <disk_write+0x8e>
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    2efa:	6d ef       	ldi	r22, 0xFD	; 253
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <xmit_datablock>
    2f04:	89 2b       	or	r24, r25
    2f06:	31 f3       	breq	.-52     	; 0x2ed4 <disk_write+0x7c>
    2f08:	21 e0       	ldi	r18, 0x01	; 1
    2f0a:	01 2b       	or	r16, r17
    2f0c:	21 f7       	brne	.-56     	; 0x2ed6 <disk_write+0x7e>
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	e2 cf       	rjmp	.-60     	; 0x2ed6 <disk_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    2f12:	a8 01       	movw	r20, r16
    2f14:	60 e0       	ldi	r22, 0x00	; 0
    2f16:	70 e0       	ldi	r23, 0x00	; 0
    2f18:	87 e9       	ldi	r24, 0x97	; 151
    2f1a:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
    2f1e:	d3 cf       	rjmp	.-90     	; 0x2ec6 <disk_write+0x6e>
	if (Stat & STA_PROTECT) return RES_WRPRT;

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    2f20:	b7 01       	movw	r22, r14
    2f22:	a6 01       	movw	r20, r12
    2f24:	88 e1       	ldi	r24, 0x18	; 24
    2f26:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
    2f2a:	81 11       	cpse	r24, r1
    2f2c:	d3 cf       	rjmp	.-90     	; 0x2ed4 <disk_write+0x7c>
			&& xmit_datablock(buff, 0xFE))
    2f2e:	6e ef       	ldi	r22, 0xFE	; 254
    2f30:	ce 01       	movw	r24, r28
    2f32:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <xmit_datablock>
    2f36:	21 e0       	ldi	r18, 0x01	; 1
    2f38:	89 2b       	or	r24, r25
    2f3a:	69 f2       	breq	.-102    	; 0x2ed6 <disk_write+0x7e>
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	cb cf       	rjmp	.-106    	; 0x2ed6 <disk_write+0x7e>

00002f40 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    2f40:	ff 92       	push	r15
    2f42:	0f 93       	push	r16
    2f44:	1f 93       	push	r17
    2f46:	cf 93       	push	r28
    2f48:	df 93       	push	r29
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
    2f4e:	60 97       	sbiw	r28, 0x10	; 16
    2f50:	0f b6       	in	r0, 0x3f	; 63
    2f52:	f8 94       	cli
    2f54:	de bf       	out	0x3e, r29	; 62
    2f56:	0f be       	out	0x3f, r0	; 63
    2f58:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    2f5a:	88 23       	and	r24, r24
    2f5c:	69 f0       	breq	.+26     	; 0x2f78 <disk_ioctl+0x38>
    2f5e:	84 e0       	ldi	r24, 0x04	; 4
	}

	deselect();

	return res;
}
    2f60:	60 96       	adiw	r28, 0x10	; 16
    2f62:	0f b6       	in	r0, 0x3f	; 63
    2f64:	f8 94       	cli
    2f66:	de bf       	out	0x3e, r29	; 62
    2f68:	0f be       	out	0x3f, r0	; 63
    2f6a:	cd bf       	out	0x3d, r28	; 61
    2f6c:	df 91       	pop	r29
    2f6e:	cf 91       	pop	r28
    2f70:	1f 91       	pop	r17
    2f72:	0f 91       	pop	r16
    2f74:	ff 90       	pop	r15
    2f76:	08 95       	ret

	if (pdrv) return RES_PARERR;

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2f78:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
    2f7c:	80 ff       	sbrs	r24, 0
    2f7e:	02 c0       	rjmp	.+4      	; 0x2f84 <disk_ioctl+0x44>
    2f80:	83 e0       	ldi	r24, 0x03	; 3
    2f82:	ee cf       	rjmp	.-36     	; 0x2f60 <disk_ioctl+0x20>

	switch (cmd) {
    2f84:	86 2f       	mov	r24, r22
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	87 33       	cpi	r24, 0x37	; 55
    2f8a:	91 05       	cpc	r25, r1
    2f8c:	50 f0       	brcs	.+20     	; 0x2fa2 <disk_ioctl+0x62>
		Stat |= STA_NOINIT;
		res = RES_OK;
		break;

	default:
		res = RES_PARERR;
    2f8e:	24 e0       	ldi	r18, 0x04	; 4
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    2f90:	2f 9a       	sbi	0x05, 7	; 5
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2f92:	8f ef       	ldi	r24, 0xFF	; 255
    2f94:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2f96:	0d b4       	in	r0, 0x2d	; 45
    2f98:	07 fe       	sbrs	r0, 7
    2f9a:	fd cf       	rjmp	.-6      	; 0x2f96 <disk_ioctl+0x56>
	return SPDR;
    2f9c:	8e b5       	in	r24, 0x2e	; 46
		res = RES_PARERR;
	}

	deselect();

	return res;
    2f9e:	82 2f       	mov	r24, r18
    2fa0:	df cf       	rjmp	.-66     	; 0x2f60 <disk_ioctl+0x20>
    2fa2:	8a 01       	movw	r16, r20

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	ea 5a       	subi	r30, 0xAA	; 170
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	0c 94 e3 21 	jmp	0x43c6	; 0x43c6 <__tablejump2__>
			res = RES_OK;
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    2fae:	40 e0       	ldi	r20, 0x00	; 0
    2fb0:	50 e0       	ldi	r21, 0x00	; 0
    2fb2:	ba 01       	movw	r22, r20
    2fb4:	8d e8       	ldi	r24, 0x8D	; 141
    2fb6:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
    2fba:	81 11       	cpse	r24, r1
    2fbc:	2a c0       	rjmp	.+84     	; 0x3012 <disk_ioctl+0xd2>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2fbe:	8f ef       	ldi	r24, 0xFF	; 255
    2fc0:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2fc2:	0d b4       	in	r0, 0x2d	; 45
    2fc4:	07 fe       	sbrs	r0, 7
    2fc6:	fd cf       	rjmp	.-6      	; 0x2fc2 <disk_ioctl+0x82>
	return SPDR;
    2fc8:	8e b5       	in	r24, 0x2e	; 46
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
			xchg_spi(0xFF);
			if (rcvr_datablock(ptr, 64))
    2fca:	60 e4       	ldi	r22, 0x40	; 64
    2fcc:	70 e0       	ldi	r23, 0x00	; 0
    2fce:	ca c0       	rjmp	.+404    	; 0x3164 <disk_ioctl+0x224>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    2fd0:	40 e0       	ldi	r20, 0x00	; 0
    2fd2:	50 e0       	ldi	r21, 0x00	; 0
    2fd4:	ba 01       	movw	r22, r20
    2fd6:	8a e3       	ldi	r24, 0x3A	; 58
    2fd8:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
    2fdc:	81 11       	cpse	r24, r1
    2fde:	19 c0       	rjmp	.+50     	; 0x3012 <disk_ioctl+0xd2>
    2fe0:	f8 01       	movw	r30, r16
    2fe2:	98 01       	movw	r18, r16
    2fe4:	2c 5f       	subi	r18, 0xFC	; 252
    2fe6:	3f 4f       	sbci	r19, 0xFF	; 255
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    2fe8:	9f ef       	ldi	r25, 0xFF	; 255
    2fea:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    2fec:	0d b4       	in	r0, 0x2d	; 45
    2fee:	07 fe       	sbrs	r0, 7
    2ff0:	fd cf       	rjmp	.-6      	; 0x2fec <disk_ioctl+0xac>
	return SPDR;
    2ff2:	8e b5       	in	r24, 0x2e	; 46
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    2ff4:	81 93       	st	Z+, r24
    2ff6:	e2 17       	cp	r30, r18
    2ff8:	f3 07       	cpc	r31, r19
    2ffa:	b9 f7       	brne	.-18     	; 0x2fea <disk_ioctl+0xaa>
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	c8 cf       	rjmp	.-112    	; 0x2f90 <disk_ioctl+0x50>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    3000:	40 e0       	ldi	r20, 0x00	; 0
    3002:	50 e0       	ldi	r21, 0x00	; 0
    3004:	ba 01       	movw	r22, r20
    3006:	8a e0       	ldi	r24, 0x0A	; 10
    3008:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
    300c:	88 23       	and	r24, r24
    300e:	09 f4       	brne	.+2      	; 0x3012 <disk_ioctl+0xd2>
    3010:	a7 c0       	rjmp	.+334    	; 0x3160 <disk_ioctl+0x220>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    3012:	21 e0       	ldi	r18, 0x01	; 1
    3014:	bd cf       	rjmp	.-134    	; 0x2f90 <disk_ioctl+0x50>
}

static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
    3016:	1c bc       	out	0x2c, r1	; 44

	// HACK 
	DDRB &= ~(1<<PINB0); // Restore SS to Hi-Z
    3018:	20 98       	cbi	0x04, 0	; 4

	DDRB  &= ~((1<<PINB1) | (1<<PINB2) | (1<<PINB7));	/* Set SCK/MOSI/CS as hi-z */
    301a:	84 b1       	in	r24, 0x04	; 4
    301c:	89 77       	andi	r24, 0x79	; 121
    301e:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1<<PINB1) | (1<<PINB2));
    3020:	85 b1       	in	r24, 0x05	; 5
    3022:	89 7f       	andi	r24, 0xF9	; 249
    3024:	85 b9       	out	0x05, r24	; 5
	PORTB |=  (1<<PINB7);								/* Pull-up on CS */
    3026:	2f 9a       	sbi	0x05, 7	; 5
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
		Stat |= STA_NOINIT;
    3028:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
    302c:	81 60       	ori	r24, 0x01	; 1
    302e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Stat>
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	ad cf       	rjmp	.-166    	; 0x2f90 <disk_ioctl+0x50>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    3036:	f0 90 dc 02 	lds	r15, 0x02DC	; 0x8002dc <CardType>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    303a:	40 e0       	ldi	r20, 0x00	; 0
    303c:	50 e0       	ldi	r21, 0x00	; 0
    303e:	ba 01       	movw	r22, r20
			res = RES_OK;
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    3040:	f2 fe       	sbrs	r15, 2
    3042:	9f c0       	rjmp	.+318    	; 0x3182 <disk_ioctl+0x242>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    3044:	8d e8       	ldi	r24, 0x8D	; 141
    3046:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
    304a:	81 11       	cpse	r24, r1
    304c:	e2 cf       	rjmp	.-60     	; 0x3012 <disk_ioctl+0xd2>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    304e:	8f ef       	ldi	r24, 0xFF	; 255
    3050:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3052:	0d b4       	in	r0, 0x2d	; 45
    3054:	07 fe       	sbrs	r0, 7
    3056:	fd cf       	rjmp	.-6      	; 0x3052 <disk_ioctl+0x112>
	return SPDR;
    3058:	8e b5       	in	r24, 0x2e	; 46

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
				xchg_spi(0xFF);
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    305a:	60 e1       	ldi	r22, 0x10	; 16
    305c:	70 e0       	ldi	r23, 0x00	; 0
    305e:	ce 01       	movw	r24, r28
    3060:	01 96       	adiw	r24, 0x01	; 1
    3062:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <rcvr_datablock>
    3066:	89 2b       	or	r24, r25
    3068:	a1 f2       	breq	.-88     	; 0x3012 <disk_ioctl+0xd2>
    306a:	80 e3       	ldi	r24, 0x30	; 48
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    306c:	9f ef       	ldi	r25, 0xFF	; 255
    306e:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3070:	0d b4       	in	r0, 0x2d	; 45
    3072:	07 fe       	sbrs	r0, 7
    3074:	fd cf       	rjmp	.-6      	; 0x3070 <disk_ioctl+0x130>
	return SPDR;
    3076:	2e b5       	in	r18, 0x2e	; 46
    3078:	81 50       	subi	r24, 0x01	; 1
	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
				xchg_spi(0xFF);
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    307a:	c9 f7       	brne	.-14     	; 0x306e <disk_ioctl+0x12e>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    307c:	2b 85       	ldd	r18, Y+11	; 0x0b
    307e:	22 95       	swap	r18
    3080:	2f 70       	andi	r18, 0x0F	; 15
    3082:	80 e1       	ldi	r24, 0x10	; 16
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	a0 e0       	ldi	r26, 0x00	; 0
    3088:	b0 e0       	ldi	r27, 0x00	; 0
    308a:	04 c0       	rjmp	.+8      	; 0x3094 <disk_ioctl+0x154>
    308c:	88 0f       	add	r24, r24
    308e:	99 1f       	adc	r25, r25
    3090:	aa 1f       	adc	r26, r26
    3092:	bb 1f       	adc	r27, r27
    3094:	2a 95       	dec	r18
    3096:	d2 f7       	brpl	.-12     	; 0x308c <disk_ioctl+0x14c>
    3098:	f8 01       	movw	r30, r16
    309a:	80 83       	st	Z, r24
    309c:	91 83       	std	Z+1, r25	; 0x01
    309e:	a2 83       	std	Z+2, r26	; 0x02
    30a0:	b3 83       	std	Z+3, r27	; 0x03
					res = RES_OK;
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	75 cf       	rjmp	.-278    	; 0x2f90 <disk_ioctl+0x50>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    30a6:	40 e0       	ldi	r20, 0x00	; 0
    30a8:	50 e0       	ldi	r21, 0x00	; 0
    30aa:	ba 01       	movw	r22, r20
    30ac:	89 e0       	ldi	r24, 0x09	; 9
    30ae:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
    30b2:	81 11       	cpse	r24, r1
    30b4:	ae cf       	rjmp	.-164    	; 0x3012 <disk_ioctl+0xd2>
    30b6:	60 e1       	ldi	r22, 0x10	; 16
    30b8:	70 e0       	ldi	r23, 0x00	; 0
    30ba:	ce 01       	movw	r24, r28
    30bc:	01 96       	adiw	r24, 0x01	; 1
    30be:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <rcvr_datablock>
    30c2:	89 2b       	or	r24, r25
    30c4:	09 f4       	brne	.+2      	; 0x30c8 <disk_ioctl+0x188>
    30c6:	a5 cf       	rjmp	.-182    	; 0x3012 <disk_ioctl+0xd2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	82 95       	swap	r24
    30cc:	86 95       	lsr	r24
    30ce:	86 95       	lsr	r24
    30d0:	83 70       	andi	r24, 0x03	; 3
    30d2:	81 30       	cpi	r24, 0x01	; 1
    30d4:	09 f4       	brne	.+2      	; 0x30d8 <disk_ioctl+0x198>
    30d6:	85 c0       	rjmp	.+266    	; 0x31e2 <disk_ioctl+0x2a2>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    30d8:	89 85       	ldd	r24, Y+9	; 0x09
    30da:	82 95       	swap	r24
    30dc:	86 95       	lsr	r24
    30de:	86 95       	lsr	r24
    30e0:	83 70       	andi	r24, 0x03	; 3
    30e2:	28 85       	ldd	r18, Y+8	; 0x08
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	f4 e0       	ldi	r31, 0x04	; 4
    30e8:	2f 9f       	mul	r18, r31
    30ea:	80 0d       	add	r24, r0
    30ec:	91 1d       	adc	r25, r1
    30ee:	11 24       	eor	r1, r1
    30f0:	9c 01       	movw	r18, r24
    30f2:	2f 5f       	subi	r18, 0xFF	; 255
    30f4:	3f 4f       	sbci	r19, 0xFF	; 255
    30f6:	8f 81       	ldd	r24, Y+7	; 0x07
    30f8:	83 70       	andi	r24, 0x03	; 3
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	98 2f       	mov	r25, r24
    30fe:	88 27       	eor	r24, r24
    3100:	99 0f       	add	r25, r25
    3102:	99 0f       	add	r25, r25
    3104:	82 0f       	add	r24, r18
    3106:	93 1f       	adc	r25, r19
    3108:	a0 e0       	ldi	r26, 0x00	; 0
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	3e 81       	ldd	r19, Y+6	; 0x06
    310e:	3f 70       	andi	r19, 0x0F	; 15
    3110:	2b 85       	ldd	r18, Y+11	; 0x0b
    3112:	22 1f       	adc	r18, r18
    3114:	22 27       	eor	r18, r18
    3116:	22 1f       	adc	r18, r18
    3118:	32 0f       	add	r19, r18
    311a:	2a 85       	ldd	r18, Y+10	; 0x0a
    311c:	23 70       	andi	r18, 0x03	; 3
    311e:	22 0f       	add	r18, r18
    3120:	23 0f       	add	r18, r19
    3122:	27 50       	subi	r18, 0x07	; 7
    3124:	04 c0       	rjmp	.+8      	; 0x312e <disk_ioctl+0x1ee>
    3126:	88 0f       	add	r24, r24
    3128:	99 1f       	adc	r25, r25
    312a:	aa 1f       	adc	r26, r26
    312c:	bb 1f       	adc	r27, r27
    312e:	2a 95       	dec	r18
    3130:	d2 f7       	brpl	.-12     	; 0x3126 <disk_ioctl+0x1e6>
    3132:	f8 01       	movw	r30, r16
    3134:	80 83       	st	Z, r24
    3136:	91 83       	std	Z+1, r25	; 0x01
    3138:	a2 83       	std	Z+2, r26	; 0x02
    313a:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	28 cf       	rjmp	.-432    	; 0x2f90 <disk_ioctl+0x50>

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    3140:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <select>
    3144:	21 e0       	ldi	r18, 0x01	; 1
    3146:	89 2b       	or	r24, r25
    3148:	09 f4       	brne	.+2      	; 0x314c <disk_ioctl+0x20c>
    314a:	22 cf       	rjmp	.-444    	; 0x2f90 <disk_ioctl+0x50>
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	20 cf       	rjmp	.-448    	; 0x2f90 <disk_ioctl+0x50>
		*ptr = CardType;
		res = RES_OK;
		break;

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    3150:	40 e0       	ldi	r20, 0x00	; 0
    3152:	50 e0       	ldi	r21, 0x00	; 0
    3154:	ba 01       	movw	r22, r20
    3156:	89 e0       	ldi	r24, 0x09	; 9
    3158:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
    315c:	81 11       	cpse	r24, r1
    315e:	59 cf       	rjmp	.-334    	; 0x3012 <disk_ioctl+0xd2>
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
			&& rcvr_datablock(ptr, 16))
    3160:	60 e1       	ldi	r22, 0x10	; 16
    3162:	70 e0       	ldi	r23, 0x00	; 0
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
			xchg_spi(0xFF);
			if (rcvr_datablock(ptr, 64))
    3164:	c8 01       	movw	r24, r16
    3166:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <rcvr_datablock>

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    316a:	21 e0       	ldi	r18, 0x01	; 1
    316c:	89 2b       	or	r24, r25
    316e:	09 f4       	brne	.+2      	; 0x3172 <disk_ioctl+0x232>
    3170:	0f cf       	rjmp	.-482    	; 0x2f90 <disk_ioctl+0x50>
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	0d cf       	rjmp	.-486    	; 0x2f90 <disk_ioctl+0x50>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    3176:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <CardType>
    317a:	fa 01       	movw	r30, r20
    317c:	80 83       	st	Z, r24
		res = RES_OK;
    317e:	20 e0       	ldi	r18, 0x00	; 0
		break;
    3180:	07 cf       	rjmp	.-498    	; 0x2f90 <disk_ioctl+0x50>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    3182:	89 e0       	ldi	r24, 0x09	; 9
    3184:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <send_cmd>
    3188:	81 11       	cpse	r24, r1
    318a:	43 cf       	rjmp	.-378    	; 0x3012 <disk_ioctl+0xd2>
    318c:	60 e1       	ldi	r22, 0x10	; 16
    318e:	70 e0       	ldi	r23, 0x00	; 0
    3190:	ce 01       	movw	r24, r28
    3192:	01 96       	adiw	r24, 0x01	; 1
    3194:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <rcvr_datablock>
    3198:	89 2b       	or	r24, r25
    319a:	09 f4       	brne	.+2      	; 0x319e <disk_ioctl+0x25e>
    319c:	3a cf       	rjmp	.-396    	; 0x3012 <disk_ioctl+0xd2>
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    319e:	8c 85       	ldd	r24, Y+12	; 0x0c
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
    31a0:	f1 fe       	sbrs	r15, 1
    31a2:	43 c0       	rjmp	.+134    	; 0x322a <disk_ioctl+0x2ea>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    31a4:	88 1f       	adc	r24, r24
    31a6:	88 27       	eor	r24, r24
    31a8:	88 1f       	adc	r24, r24
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	01 96       	adiw	r24, 0x01	; 1
    31ae:	2b 85       	ldd	r18, Y+11	; 0x0b
    31b0:	2f 73       	andi	r18, 0x3F	; 63
    31b2:	82 0f       	add	r24, r18
    31b4:	91 1d       	adc	r25, r1
    31b6:	82 0f       	add	r24, r18
    31b8:	91 1d       	adc	r25, r1
    31ba:	2e 85       	ldd	r18, Y+14	; 0x0e
    31bc:	22 95       	swap	r18
    31be:	26 95       	lsr	r18
    31c0:	26 95       	lsr	r18
    31c2:	23 70       	andi	r18, 0x03	; 3
    31c4:	21 50       	subi	r18, 0x01	; 1
    31c6:	02 c0       	rjmp	.+4      	; 0x31cc <disk_ioctl+0x28c>
    31c8:	88 0f       	add	r24, r24
    31ca:	99 1f       	adc	r25, r25
    31cc:	2a 95       	dec	r18
    31ce:	e2 f7       	brpl	.-8      	; 0x31c8 <disk_ioctl+0x288>
    31d0:	a0 e0       	ldi	r26, 0x00	; 0
    31d2:	b0 e0       	ldi	r27, 0x00	; 0
    31d4:	f8 01       	movw	r30, r16
    31d6:	80 83       	st	Z, r24
    31d8:	91 83       	std	Z+1, r25	; 0x01
    31da:	a2 83       	std	Z+2, r26	; 0x02
    31dc:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	d7 ce       	rjmp	.-594    	; 0x2f90 <disk_ioctl+0x50>

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
    31e2:	29 85       	ldd	r18, Y+9	; 0x09
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	32 2f       	mov	r19, r18
    31e8:	22 27       	eor	r18, r18
    31ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    31ec:	28 0f       	add	r18, r24
    31ee:	31 1d       	adc	r19, r1
    31f0:	88 85       	ldd	r24, Y+8	; 0x08
    31f2:	8f 73       	andi	r24, 0x3F	; 63
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	a0 e0       	ldi	r26, 0x00	; 0
    31f8:	b0 e0       	ldi	r27, 0x00	; 0
    31fa:	dc 01       	movw	r26, r24
    31fc:	99 27       	eor	r25, r25
    31fe:	88 27       	eor	r24, r24
    3200:	01 96       	adiw	r24, 0x01	; 1
    3202:	a1 1d       	adc	r26, r1
    3204:	b1 1d       	adc	r27, r1
    3206:	82 0f       	add	r24, r18
    3208:	93 1f       	adc	r25, r19
    320a:	a1 1d       	adc	r26, r1
    320c:	b1 1d       	adc	r27, r1
    320e:	ea e0       	ldi	r30, 0x0A	; 10
    3210:	88 0f       	add	r24, r24
    3212:	99 1f       	adc	r25, r25
    3214:	aa 1f       	adc	r26, r26
    3216:	bb 1f       	adc	r27, r27
    3218:	ea 95       	dec	r30
    321a:	d1 f7       	brne	.-12     	; 0x3210 <disk_ioctl+0x2d0>
    321c:	f8 01       	movw	r30, r16
    321e:	80 83       	st	Z, r24
    3220:	91 83       	std	Z+1, r25	; 0x01
    3222:	a2 83       	std	Z+2, r26	; 0x02
    3224:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	b3 ce       	rjmp	.-666    	; 0x2f90 <disk_ioctl+0x50>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    322a:	28 2f       	mov	r18, r24
    322c:	23 70       	andi	r18, 0x03	; 3
    322e:	82 95       	swap	r24
    3230:	86 95       	lsr	r24
    3232:	87 70       	andi	r24, 0x07	; 7
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	f8 e0       	ldi	r31, 0x08	; 8
    3238:	2f 9f       	mul	r18, r31
    323a:	80 0d       	add	r24, r0
    323c:	91 1d       	adc	r25, r1
    323e:	11 24       	eor	r1, r1
    3240:	01 96       	adiw	r24, 0x01	; 1
    3242:	2b 85       	ldd	r18, Y+11	; 0x0b
    3244:	2c 77       	andi	r18, 0x7C	; 124
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	35 95       	asr	r19
    324a:	27 95       	ror	r18
    324c:	35 95       	asr	r19
    324e:	27 95       	ror	r18
    3250:	2f 5f       	subi	r18, 0xFF	; 255
    3252:	3f 4f       	sbci	r19, 0xFF	; 255
    3254:	82 9f       	mul	r24, r18
    3256:	a0 01       	movw	r20, r0
    3258:	83 9f       	mul	r24, r19
    325a:	50 0d       	add	r21, r0
    325c:	92 9f       	mul	r25, r18
    325e:	50 0d       	add	r21, r0
    3260:	11 24       	eor	r1, r1
    3262:	ca 01       	movw	r24, r20
    3264:	a0 e0       	ldi	r26, 0x00	; 0
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	f8 01       	movw	r30, r16
    326a:	80 83       	st	Z, r24
    326c:	91 83       	std	Z+1, r25	; 0x01
    326e:	a2 83       	std	Z+2, r26	; 0x02
    3270:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    3272:	20 e0       	ldi	r18, 0x00	; 0
    3274:	8d ce       	rjmp	.-742    	; 0x2f90 <disk_ioctl+0x50>

00003276 <disk_timerproc>:

void disk_timerproc (void)
{
	BYTE n, s;

	n = Timer1;				/* 100Hz decrement timer */
    3276:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <Timer1>
	if (n) Timer1 = --n;
    327a:	88 23       	and	r24, r24
    327c:	19 f0       	breq	.+6      	; 0x3284 <disk_timerproc+0xe>
    327e:	81 50       	subi	r24, 0x01	; 1
    3280:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <Timer1>
	n = Timer2;
    3284:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <Timer2>
	if (n) Timer2 = --n;
    3288:	88 23       	and	r24, r24
    328a:	19 f0       	breq	.+6      	; 0x3292 <disk_timerproc+0x1c>
    328c:	81 50       	subi	r24, 0x01	; 1
    328e:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <Timer2>

	s = Stat;
    3292:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Stat>
		s |= STA_PROTECT;
	else					/* Write enabled */
		s &= ~STA_PROTECT;

	if (MMC_CD)				/* Card inserted */
		s &= ~STA_NODISK;
    3296:	89 7f       	andi	r24, 0xF9	; 249
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);

	Stat = s;				/* Update MMC status */
    3298:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Stat>
    329c:	08 95       	ret

0000329e <usb_init>:
	if (!(UEINTX & (1<<RWAL))) {
		// unable to write
		// TODO; should this try to abort the previously
		// buffered message??
		SREG = intr_state;
		return -1;
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    32a4:	80 ea       	ldi	r24, 0xA0	; 160
    32a6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    32aa:	82 e1       	ldi	r24, 0x12	; 18
    32ac:	89 bd       	out	0x29, r24	; 41
    32ae:	09 b4       	in	r0, 0x29	; 41
    32b0:	00 fe       	sbrs	r0, 0
    32b2:	fd cf       	rjmp	.-6      	; 0x32ae <usb_init+0x10>
    32b4:	80 e9       	ldi	r24, 0x90	; 144
    32b6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    32ba:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    32be:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <usb_configuration>
    32c2:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <cdc_line_rtsdtr>
    32c6:	8c e0       	ldi	r24, 0x0C	; 12
    32c8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    32cc:	78 94       	sei
    32ce:	08 95       	ret

000032d0 <usb_serial_getchar>:
    32d0:	2f b7       	in	r18, 0x3f	; 63
    32d2:	f8 94       	cli
    32d4:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <usb_configuration>
    32d8:	88 23       	and	r24, r24
    32da:	f9 f0       	breq	.+62     	; 0x331a <usb_serial_getchar+0x4a>
    32dc:	83 e0       	ldi	r24, 0x03	; 3
    32de:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    32e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    32e6:	85 fd       	sbrc	r24, 5
    32e8:	0c c0       	rjmp	.+24     	; 0x3302 <usb_serial_getchar+0x32>
    32ea:	82 ff       	sbrs	r24, 2
    32ec:	16 c0       	rjmp	.+44     	; 0x331a <usb_serial_getchar+0x4a>
    32ee:	9b e6       	ldi	r25, 0x6B	; 107
    32f0:	02 c0       	rjmp	.+4      	; 0x32f6 <usb_serial_getchar+0x26>
    32f2:	82 ff       	sbrs	r24, 2
    32f4:	12 c0       	rjmp	.+36     	; 0x331a <usb_serial_getchar+0x4a>
    32f6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    32fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    32fe:	85 ff       	sbrs	r24, 5
    3300:	f8 cf       	rjmp	.-16     	; 0x32f2 <usb_serial_getchar+0x22>
    3302:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3306:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    330a:	95 fd       	sbrc	r25, 5
    330c:	03 c0       	rjmp	.+6      	; 0x3314 <usb_serial_getchar+0x44>
    330e:	9b e6       	ldi	r25, 0x6B	; 107
    3310:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3314:	2f bf       	out	0x3f, r18	; 63
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	08 95       	ret
    331a:	2f bf       	out	0x3f, r18	; 63
    331c:	8f ef       	ldi	r24, 0xFF	; 255
    331e:	9f ef       	ldi	r25, 0xFF	; 255
    3320:	08 95       	ret

00003322 <usb_serial_available>:
    3322:	9f b7       	in	r25, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <usb_configuration>
    332a:	88 23       	and	r24, r24
    332c:	91 f0       	breq	.+36     	; 0x3352 <usb_serial_available+0x30>
    332e:	83 e0       	ldi	r24, 0x03	; 3
    3330:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3334:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    3338:	81 11       	cpse	r24, r1
    333a:	09 c0       	rjmp	.+18     	; 0x334e <usb_serial_available+0x2c>
    333c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3340:	22 ff       	sbrs	r18, 2
    3342:	07 c0       	rjmp	.+14     	; 0x3352 <usb_serial_available+0x30>
    3344:	25 fd       	sbrc	r18, 5
    3346:	05 c0       	rjmp	.+10     	; 0x3352 <usb_serial_available+0x30>
    3348:	2b e6       	ldi	r18, 0x6B	; 107
    334a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    334e:	9f bf       	out	0x3f, r25	; 63
    3350:	08 95       	ret
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	9f bf       	out	0x3f, r25	; 63
    3356:	08 95       	ret

00003358 <usb_serial_putchar>:
    3358:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <usb_configuration>
    335c:	99 23       	and	r25, r25
    335e:	09 f4       	brne	.+2      	; 0x3362 <usb_serial_putchar+0xa>
    3360:	43 c0       	rjmp	.+134    	; 0x33e8 <usb_serial_putchar+0x90>
    3362:	9f b7       	in	r25, 0x3f	; 63
    3364:	f8 94       	cli
    3366:	24 e0       	ldi	r18, 0x04	; 4
    3368:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    336c:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <transmit_previous_timeout>
    3370:	21 11       	cpse	r18, r1
    3372:	32 c0       	rjmp	.+100    	; 0x33d8 <usb_serial_putchar+0x80>
    3374:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    3378:	37 5e       	subi	r19, 0xE7	; 231
    337a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    337e:	25 fd       	sbrc	r18, 5
    3380:	1c c0       	rjmp	.+56     	; 0x33ba <usb_serial_putchar+0x62>
    3382:	9f bf       	out	0x3f, r25	; 63
    3384:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    3388:	39 17       	cp	r19, r25
    338a:	81 f1       	breq	.+96     	; 0x33ec <usb_serial_putchar+0x94>
    338c:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <usb_configuration>
    3390:	99 23       	and	r25, r25
    3392:	51 f1       	breq	.+84     	; 0x33e8 <usb_serial_putchar+0x90>
    3394:	44 e0       	ldi	r20, 0x04	; 4
    3396:	09 c0       	rjmp	.+18     	; 0x33aa <usb_serial_putchar+0x52>
    3398:	9f bf       	out	0x3f, r25	; 63
    339a:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    339e:	39 17       	cp	r19, r25
    33a0:	29 f1       	breq	.+74     	; 0x33ec <usb_serial_putchar+0x94>
    33a2:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <usb_configuration>
    33a6:	99 23       	and	r25, r25
    33a8:	f9 f0       	breq	.+62     	; 0x33e8 <usb_serial_putchar+0x90>
    33aa:	9f b7       	in	r25, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    33b2:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    33b6:	25 ff       	sbrs	r18, 5
    33b8:	ef cf       	rjmp	.-34     	; 0x3398 <usb_serial_putchar+0x40>
    33ba:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    33be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    33c2:	85 fd       	sbrc	r24, 5
    33c4:	03 c0       	rjmp	.+6      	; 0x33cc <usb_serial_putchar+0x74>
    33c6:	8a e3       	ldi	r24, 0x3A	; 58
    33c8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    33cc:	85 e0       	ldi	r24, 0x05	; 5
    33ce:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <transmit_flush_timer>
    33d2:	9f bf       	out	0x3f, r25	; 63
    33d4:	80 e0       	ldi	r24, 0x00	; 0
    33d6:	08 95       	ret
    33d8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    33dc:	25 ff       	sbrs	r18, 5
    33de:	03 c0       	rjmp	.+6      	; 0x33e6 <usb_serial_putchar+0x8e>
    33e0:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <transmit_previous_timeout>
    33e4:	c7 cf       	rjmp	.-114    	; 0x3374 <usb_serial_putchar+0x1c>
    33e6:	9f bf       	out	0x3f, r25	; 63
    33e8:	8f ef       	ldi	r24, 0xFF	; 255
    33ea:	08 95       	ret
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <transmit_previous_timeout>
    33f2:	8f ef       	ldi	r24, 0xFF	; 255
    33f4:	08 95       	ret

000033f6 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    33f6:	1f 92       	push	r1
    33f8:	0f 92       	push	r0
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	0f 92       	push	r0
    33fe:	11 24       	eor	r1, r1
    3400:	8f 93       	push	r24
    3402:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
    3404:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        UDINT = 0;
    3408:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        if (intbits & (1<<EORSTI)) {
    340c:	83 ff       	sbrs	r24, 3
    340e:	11 c0       	rjmp	.+34     	; 0x3432 <__vector_10+0x3c>
		UENUM = 0;
    3410:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
    3414:	91 e0       	ldi	r25, 0x01	; 1
    3416:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
    341a:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    341e:	92 e1       	ldi	r25, 0x12	; 18
    3420:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
    3424:	98 e0       	ldi	r25, 0x08	; 8
    3426:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
    342a:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <usb_configuration>
		cdc_line_rtsdtr = 0;
    342e:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <cdc_line_rtsdtr>
        }
	if (intbits & (1<<SOFI)) {
    3432:	82 ff       	sbrs	r24, 2
    3434:	13 c0       	rjmp	.+38     	; 0x345c <__vector_10+0x66>
		if (usb_configuration) {
    3436:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <usb_configuration>
    343a:	88 23       	and	r24, r24
    343c:	79 f0       	breq	.+30     	; 0x345c <__vector_10+0x66>
			t = transmit_flush_timer;
    343e:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <transmit_flush_timer>
			if (t) {
    3442:	88 23       	and	r24, r24
    3444:	59 f0       	breq	.+22     	; 0x345c <__vector_10+0x66>
				transmit_flush_timer = --t;
    3446:	81 50       	subi	r24, 0x01	; 1
    3448:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <transmit_flush_timer>
				if (!t) {
    344c:	81 11       	cpse	r24, r1
    344e:	06 c0       	rjmp	.+12     	; 0x345c <__vector_10+0x66>
					UENUM = CDC_TX_ENDPOINT;
    3450:	84 e0       	ldi	r24, 0x04	; 4
    3452:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX = 0x3A;
    3456:	8a e3       	ldi	r24, 0x3A	; 58
    3458:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
			}
		}
	}
}
    345c:	9f 91       	pop	r25
    345e:	8f 91       	pop	r24
    3460:	0f 90       	pop	r0
    3462:	0f be       	out	0x3f, r0	; 63
    3464:	0f 90       	pop	r0
    3466:	1f 90       	pop	r1
    3468:	18 95       	reti

0000346a <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    346a:	1f 92       	push	r1
    346c:	0f 92       	push	r0
    346e:	0f b6       	in	r0, 0x3f	; 63
    3470:	0f 92       	push	r0
    3472:	11 24       	eor	r1, r1
    3474:	2f 93       	push	r18
    3476:	3f 93       	push	r19
    3478:	4f 93       	push	r20
    347a:	5f 93       	push	r21
    347c:	6f 93       	push	r22
    347e:	7f 93       	push	r23
    3480:	8f 93       	push	r24
    3482:	9f 93       	push	r25
    3484:	af 93       	push	r26
    3486:	bf 93       	push	r27
    3488:	ef 93       	push	r30
    348a:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    348c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
        intbits = UEINTX;
    3490:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (intbits & (1<<RXSTPI)) {
    3494:	83 ff       	sbrs	r24, 3
    3496:	3f c0       	rjmp	.+126    	; 0x3516 <__vector_11+0xac>
                bmRequestType = UEDATX;
    3498:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                bRequest = UEDATX;
    349c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue = UEDATX;
    34a0:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue |= (UEDATX << 8);
    34a4:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	39 2b       	or	r19, r25
                wIndex = UEDATX;
    34ac:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wIndex |= (UEDATX << 8);
    34b0:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    34b4:	50 e0       	ldi	r21, 0x00	; 0
    34b6:	59 2b       	or	r21, r25
                wLength = UEDATX;
    34b8:	a0 91 f1 00 	lds	r26, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wLength |= (UEDATX << 8);
    34bc:	b0 91 f1 00 	lds	r27, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    34c0:	92 ef       	ldi	r25, 0xF2	; 242
    34c2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
    34c6:	86 30       	cpi	r24, 0x06	; 6
    34c8:	d1 f1       	breq	.+116    	; 0x353e <__vector_11+0xd4>
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
    34ca:	85 30       	cpi	r24, 0x05	; 5
    34cc:	09 f4       	brne	.+2      	; 0x34d0 <__vector_11+0x66>
    34ce:	c7 c0       	rjmp	.+398    	; 0x365e <__vector_11+0x1f4>
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    34d0:	89 30       	cpi	r24, 0x09	; 9
    34d2:	09 f4       	brne	.+2      	; 0x34d6 <__vector_11+0x6c>
    34d4:	43 c0       	rjmp	.+134    	; 0x355c <__vector_11+0xf2>
			}
        		UERST = 0x1E;
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    34d6:	88 30       	cpi	r24, 0x08	; 8
    34d8:	d9 f0       	breq	.+54     	; 0x3510 <__vector_11+0xa6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    34da:	81 32       	cpi	r24, 0x21	; 33
    34dc:	09 f4       	brne	.+2      	; 0x34e0 <__vector_11+0x76>
    34de:	d6 c0       	rjmp	.+428    	; 0x368c <__vector_11+0x222>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    34e0:	80 32       	cpi	r24, 0x20	; 32
    34e2:	09 f4       	brne	.+2      	; 0x34e6 <__vector_11+0x7c>
    34e4:	68 c0       	rjmp	.+208    	; 0x35b6 <__vector_11+0x14c>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    34e6:	82 32       	cpi	r24, 0x22	; 34
    34e8:	09 f4       	brne	.+2      	; 0x34ec <__vector_11+0x82>
    34ea:	e8 c0       	rjmp	.+464    	; 0x36bc <__vector_11+0x252>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    34ec:	81 11       	cpse	r24, r1
    34ee:	fa c0       	rjmp	.+500    	; 0x36e4 <__vector_11+0x27a>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    34f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    34f4:	80 ff       	sbrs	r24, 0
    34f6:	fc cf       	rjmp	.-8      	; 0x34f0 <__vector_11+0x86>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    34f8:	62 38       	cpi	r22, 0x82	; 130
    34fa:	09 f4       	brne	.+2      	; 0x34fe <__vector_11+0x94>
    34fc:	e9 c0       	rjmp	.+466    	; 0x36d0 <__vector_11+0x266>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    34fe:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    3500:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			UEDATX = 0;
    3504:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    3508:	8e ef       	ldi	r24, 0xFE	; 254
    350a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    350e:	06 c0       	rjmp	.+12     	; 0x351c <__vector_11+0xb2>
			}
        		UERST = 0x1E;
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    3510:	60 38       	cpi	r22, 0x80	; 128
    3512:	09 f4       	brne	.+2      	; 0x3516 <__vector_11+0xac>
    3514:	af c0       	rjmp	.+350    	; 0x3674 <__vector_11+0x20a>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    3516:	81 e2       	ldi	r24, 0x21	; 33
    3518:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
}
    351c:	ff 91       	pop	r31
    351e:	ef 91       	pop	r30
    3520:	bf 91       	pop	r27
    3522:	af 91       	pop	r26
    3524:	9f 91       	pop	r25
    3526:	8f 91       	pop	r24
    3528:	7f 91       	pop	r23
    352a:	6f 91       	pop	r22
    352c:	5f 91       	pop	r21
    352e:	4f 91       	pop	r20
    3530:	3f 91       	pop	r19
    3532:	2f 91       	pop	r18
    3534:	0f 90       	pop	r0
    3536:	0f be       	out	0x3f, r0	; 63
    3538:	0f 90       	pop	r0
    353a:	1f 90       	pop	r1
    353c:	18 95       	reti
    353e:	8a e1       	ldi	r24, 0x1A	; 26
    3540:	91 e0       	ldi	r25, 0x01	; 1
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    3542:	fc 01       	movw	r30, r24
    3544:	65 91       	lpm	r22, Z+
    3546:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    3548:	26 17       	cp	r18, r22
    354a:	37 07       	cpc	r19, r23
    354c:	09 f4       	brne	.+2      	; 0x3550 <__vector_11+0xe6>
    354e:	48 c0       	rjmp	.+144    	; 0x35e0 <__vector_11+0x176>
    3550:	07 96       	adiw	r24, 0x07	; 7
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    3552:	61 e0       	ldi	r22, 0x01	; 1
    3554:	84 34       	cpi	r24, 0x44	; 68
    3556:	96 07       	cpc	r25, r22
    3558:	a1 f7       	brne	.-24     	; 0x3542 <__vector_11+0xd8>
    355a:	dd cf       	rjmp	.-70     	; 0x3516 <__vector_11+0xac>
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    355c:	61 11       	cpse	r22, r1
    355e:	db cf       	rjmp	.-74     	; 0x3516 <__vector_11+0xac>
			usb_configuration = wValue;
    3560:	20 93 e2 02 	sts	0x02E2, r18	; 0x8002e2 <usb_configuration>
			cdc_line_rtsdtr = 0;
    3564:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <cdc_line_rtsdtr>
			transmit_flush_timer = 0;
    3568:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <transmit_flush_timer>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    356c:	8e ef       	ldi	r24, 0xFE	; 254
    356e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    3572:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    3574:	29 ed       	ldi	r18, 0xD9	; 217
    3576:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    3578:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				en = pgm_read_byte(cfg++);
    357c:	a9 01       	movw	r20, r18
    357e:	4f 5f       	subi	r20, 0xFF	; 255
    3580:	5f 4f       	sbci	r21, 0xFF	; 255
    3582:	f9 01       	movw	r30, r18
    3584:	94 91       	lpm	r25, Z
				UECONX = en;
    3586:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (en) {
    358a:	99 23       	and	r25, r25
    358c:	09 f4       	brne	.+2      	; 0x3590 <__vector_11+0x126>
    358e:	94 c0       	rjmp	.+296    	; 0x36b8 <__vector_11+0x24e>
					UECFG0X = pgm_read_byte(cfg++);
    3590:	fa 01       	movw	r30, r20
    3592:	44 91       	lpm	r20, Z
    3594:	40 93 ec 00 	sts	0x00EC, r20	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
					UECFG1X = pgm_read_byte(cfg++);
    3598:	31 96       	adiw	r30, 0x01	; 1
    359a:	e4 91       	lpm	r30, Z
    359c:	2d 5f       	subi	r18, 0xFD	; 253
    359e:	3f 4f       	sbci	r19, 0xFF	; 255
    35a0:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    35a4:	8f 5f       	subi	r24, 0xFF	; 255
    35a6:	85 30       	cpi	r24, 0x05	; 5
    35a8:	39 f7       	brne	.-50     	; 0x3578 <__vector_11+0x10e>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    35aa:	8e e1       	ldi	r24, 0x1E	; 30
    35ac:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
        		UERST = 0;
    35b0:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
			return;
    35b4:	b3 cf       	rjmp	.-154    	; 0x351c <__vector_11+0xb2>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    35b6:	61 32       	cpi	r22, 0x21	; 33
    35b8:	09 f0       	breq	.+2      	; 0x35bc <__vector_11+0x152>
    35ba:	ad cf       	rjmp	.-166    	; 0x3516 <__vector_11+0xac>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    35bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    35c0:	82 ff       	sbrs	r24, 2
    35c2:	fc cf       	rjmp	.-8      	; 0x35bc <__vector_11+0x152>
    35c4:	e7 e0       	ldi	r30, 0x07	; 7
    35c6:	f1 e0       	ldi	r31, 0x01	; 1
    35c8:	2e e0       	ldi	r18, 0x0E	; 14
    35ca:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    35cc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    35d0:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    35d2:	2e 17       	cp	r18, r30
    35d4:	3f 07       	cpc	r19, r31
    35d6:	d1 f7       	brne	.-12     	; 0x35cc <__vector_11+0x162>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    35d8:	8b ef       	ldi	r24, 0xFB	; 251
    35da:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    35de:	94 cf       	rjmp	.-216    	; 0x3508 <__vector_11+0x9e>
				if (desc_val != wValue) {
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
    35e0:	fc 01       	movw	r30, r24
    35e2:	32 96       	adiw	r30, 0x02	; 2
    35e4:	65 91       	lpm	r22, Z+
    35e6:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    35e8:	46 17       	cp	r20, r22
    35ea:	57 07       	cpc	r21, r23
    35ec:	09 f0       	breq	.+2      	; 0x35f0 <__vector_11+0x186>
    35ee:	b0 cf       	rjmp	.-160    	; 0x3550 <__vector_11+0xe6>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
    35f0:	fc 01       	movw	r30, r24
    35f2:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    35f4:	45 91       	lpm	r20, Z+
    35f6:	54 91       	lpm	r21, Z
				list += 2;
    35f8:	fc 01       	movw	r30, r24
    35fa:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    35fc:	24 91       	lpm	r18, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    35fe:	8a 2f       	mov	r24, r26
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	9b 2b       	or	r25, r27
    3604:	8f 3f       	cpi	r24, 0xFF	; 255
    3606:	91 05       	cpc	r25, r1
    3608:	19 f0       	breq	.+6      	; 0x3610 <__vector_11+0x1a6>
    360a:	10 f0       	brcs	.+4      	; 0x3610 <__vector_11+0x1a6>
    360c:	8f ef       	ldi	r24, 0xFF	; 255
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	82 17       	cp	r24, r18
    3612:	08 f4       	brcc	.+2      	; 0x3616 <__vector_11+0x1ac>
    3614:	28 2f       	mov	r18, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    3616:	6e ef       	ldi	r22, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    3618:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    361c:	98 2f       	mov	r25, r24
    361e:	95 70       	andi	r25, 0x05	; 5
    3620:	d9 f3       	breq	.-10     	; 0x3618 <__vector_11+0x1ae>
				if (i & (1<<RXOUTI)) return;	// abort
    3622:	82 fd       	sbrc	r24, 2
    3624:	7b cf       	rjmp	.-266    	; 0x351c <__vector_11+0xb2>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    3626:	32 2f       	mov	r19, r18
    3628:	21 31       	cpi	r18, 0x11	; 17
    362a:	08 f4       	brcc	.+2      	; 0x362e <__vector_11+0x1c4>
    362c:	40 c0       	rjmp	.+128    	; 0x36ae <__vector_11+0x244>
    362e:	30 e1       	ldi	r19, 0x10	; 16
				for (i = n; i; i--) {
    3630:	fa 01       	movw	r30, r20
    3632:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
    3634:	94 91       	lpm	r25, Z
    3636:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    363a:	81 50       	subi	r24, 0x01	; 1
    363c:	31 96       	adiw	r30, 0x01	; 1
    363e:	81 11       	cpse	r24, r1
    3640:	f9 cf       	rjmp	.-14     	; 0x3634 <__vector_11+0x1ca>
    3642:	8f ef       	ldi	r24, 0xFF	; 255
    3644:	83 0f       	add	r24, r19
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	01 96       	adiw	r24, 0x01	; 1
    364a:	48 0f       	add	r20, r24
    364c:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    364e:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    3650:	60 93 e8 00 	sts	0x00E8, r22	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    3654:	21 11       	cpse	r18, r1
    3656:	e0 cf       	rjmp	.-64     	; 0x3618 <__vector_11+0x1ae>
    3658:	30 31       	cpi	r19, 0x10	; 16
    365a:	f1 f2       	breq	.-68     	; 0x3618 <__vector_11+0x1ae>
    365c:	5f cf       	rjmp	.-322    	; 0x351c <__vector_11+0xb2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    365e:	8e ef       	ldi	r24, 0xFE	; 254
    3660:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    3664:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3668:	80 ff       	sbrs	r24, 0
    366a:	fc cf       	rjmp	.-8      	; 0x3664 <__vector_11+0x1fa>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    366c:	20 68       	ori	r18, 0x80	; 128
    366e:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
    3672:	54 cf       	rjmp	.-344    	; 0x351c <__vector_11+0xb2>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    3674:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3678:	80 ff       	sbrs	r24, 0
    367a:	fc cf       	rjmp	.-8      	; 0x3674 <__vector_11+0x20a>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    367c:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <usb_configuration>
    3680:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    3684:	8e ef       	ldi	r24, 0xFE	; 254
    3686:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    368a:	48 cf       	rjmp	.-368    	; 0x351c <__vector_11+0xb2>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    368c:	61 3a       	cpi	r22, 0xA1	; 161
    368e:	09 f0       	breq	.+2      	; 0x3692 <__vector_11+0x228>
    3690:	42 cf       	rjmp	.-380    	; 0x3516 <__vector_11+0xac>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    3692:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3696:	80 ff       	sbrs	r24, 0
    3698:	fc cf       	rjmp	.-8      	; 0x3692 <__vector_11+0x228>
    369a:	e7 e0       	ldi	r30, 0x07	; 7
    369c:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    369e:	81 91       	ld	r24, Z+
    36a0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    36a4:	61 e0       	ldi	r22, 0x01	; 1
    36a6:	ee 30       	cpi	r30, 0x0E	; 14
    36a8:	f6 07       	cpc	r31, r22
    36aa:	c9 f7       	brne	.-14     	; 0x369e <__vector_11+0x234>
    36ac:	2d cf       	rjmp	.-422    	; 0x3508 <__vector_11+0x9e>
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    36ae:	21 11       	cpse	r18, r1
    36b0:	bf cf       	rjmp	.-130    	; 0x3630 <__vector_11+0x1c6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    36b2:	60 93 e8 00 	sts	0x00E8, r22	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    36b6:	32 cf       	rjmp	.-412    	; 0x351c <__vector_11+0xb2>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    36b8:	9a 01       	movw	r18, r20
    36ba:	74 cf       	rjmp	.-280    	; 0x35a4 <__vector_11+0x13a>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    36bc:	61 32       	cpi	r22, 0x21	; 33
    36be:	09 f0       	breq	.+2      	; 0x36c2 <__vector_11+0x258>
    36c0:	2a cf       	rjmp	.-428    	; 0x3516 <__vector_11+0xac>
			cdc_line_rtsdtr = wValue;
    36c2:	20 93 df 02 	sts	0x02DF, r18	; 0x8002df <cdc_line_rtsdtr>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    36c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    36ca:	80 ff       	sbrs	r24, 0
    36cc:	fc cf       	rjmp	.-8      	; 0x36c6 <__vector_11+0x25c>
    36ce:	1c cf       	rjmp	.-456    	; 0x3508 <__vector_11+0x9e>
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
				UENUM = wIndex;
    36d0:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (UECONX & (1<<STALLRQ)) i = 1;
    36d4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    36d8:	85 fb       	bst	r24, 5
    36da:	88 27       	eor	r24, r24
    36dc:	80 f9       	bld	r24, 0
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
    36de:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    36e2:	0e cf       	rjmp	.-484    	; 0x3500 <__vector_11+0x96>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    36e4:	98 2f       	mov	r25, r24
    36e6:	9d 7f       	andi	r25, 0xFD	; 253
    36e8:	91 30       	cpi	r25, 0x01	; 1
    36ea:	09 f0       	breq	.+2      	; 0x36ee <__vector_11+0x284>
    36ec:	14 cf       	rjmp	.-472    	; 0x3516 <__vector_11+0xac>
		  && bmRequestType == 0x02 && wValue == 0) {
    36ee:	62 30       	cpi	r22, 0x02	; 2
    36f0:	09 f0       	breq	.+2      	; 0x36f4 <__vector_11+0x28a>
    36f2:	11 cf       	rjmp	.-478    	; 0x3516 <__vector_11+0xac>
    36f4:	23 2b       	or	r18, r19
    36f6:	09 f0       	breq	.+2      	; 0x36fa <__vector_11+0x290>
    36f8:	0e cf       	rjmp	.-484    	; 0x3516 <__vector_11+0xac>
			i = wIndex & 0x7F;
    36fa:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    36fc:	9f ef       	ldi	r25, 0xFF	; 255
    36fe:	94 0f       	add	r25, r20
    3700:	94 30       	cpi	r25, 0x04	; 4
    3702:	08 f0       	brcs	.+2      	; 0x3706 <__vector_11+0x29c>
    3704:	08 cf       	rjmp	.-496    	; 0x3516 <__vector_11+0xac>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    3706:	9e ef       	ldi	r25, 0xFE	; 254
    3708:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    370c:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
    3710:	83 30       	cpi	r24, 0x03	; 3
    3712:	09 f4       	brne	.+2      	; 0x3716 <__vector_11+0x2ac>
    3714:	00 cf       	rjmp	.-512    	; 0x3516 <__vector_11+0xac>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    3716:	89 e1       	ldi	r24, 0x19	; 25
    3718:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	01 c0       	rjmp	.+2      	; 0x3724 <__vector_11+0x2ba>
    3722:	88 0f       	add	r24, r24
    3724:	4a 95       	dec	r20
    3726:	ea f7       	brpl	.-6      	; 0x3722 <__vector_11+0x2b8>
    3728:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UERST = 0;
    372c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    3730:	f5 ce       	rjmp	.-534    	; 0x351c <__vector_11+0xb2>

00003732 <pageEmpty>:
	//debaunce_counter = 0;
		while(PINF & 1 << p);
		//while(~PINF >> p & 0b1);
	//while(debaunce_counter<3200);
	//debaunce_counter = 0;
}
    3732:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <data_amount>
    3736:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <data_amount+0x1>
    373a:	a0 91 ed 02 	lds	r26, 0x02ED	; 0x8002ed <data_amount+0x2>
    373e:	b0 91 ee 02 	lds	r27, 0x02EE	; 0x8002ee <data_amount+0x3>
    3742:	81 30       	cpi	r24, 0x01	; 1
    3744:	9c 40       	sbci	r25, 0x0C	; 12
    3746:	a1 05       	cpc	r26, r1
    3748:	b1 05       	cpc	r27, r1
    374a:	30 f0       	brcs	.+12     	; 0x3758 <pageEmpty+0x26>
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <newPage+0x1>
    3754:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <newPage>
    3758:	08 95       	ret

0000375a <pageFull>:
    375a:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <pageCount>
    375e:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <pageCount+0x1>
    3762:	01 97       	sbiw	r24, 0x01	; 1
    3764:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <pageCount+0x1>
    3768:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <pageCount>
    376c:	89 2b       	or	r24, r25
    376e:	39 f0       	breq	.+14     	; 0x377e <pageFull+0x24>
    3770:	81 e0       	ldi	r24, 0x01	; 1
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <newPage+0x1>
    3778:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <newPage>
    377c:	08 95       	ret
    377e:	0e 94 1c 01 	call	0x238	; 0x238 <adc_stop>
    3782:	81 e0       	ldi	r24, 0x01	; 1
    3784:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <stop>
    3788:	08 95       	ret

0000378a <init>:
    378a:	cf 93       	push	r28
    378c:	f8 94       	cli
    378e:	e1 e6       	ldi	r30, 0x61	; 97
    3790:	f0 e0       	ldi	r31, 0x00	; 0
    3792:	c0 e8       	ldi	r28, 0x80	; 128
    3794:	c0 83       	st	Z, r28
    3796:	10 82       	st	Z, r1
    3798:	8a e6       	ldi	r24, 0x6A	; 106
    379a:	82 bf       	out	0x32, r24	; 50
    379c:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <serial_init>
    37a0:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <timer_init>
    37a4:	8a b1       	in	r24, 0x0a	; 10
    37a6:	80 6f       	ori	r24, 0xF0	; 240
    37a8:	8a b9       	out	0x0a, r24	; 10
    37aa:	80 b3       	in	r24, 0x10	; 16
    37ac:	8f 70       	andi	r24, 0x0F	; 15
    37ae:	80 bb       	out	0x10, r24	; 16
    37b0:	8f ef       	ldi	r24, 0xFF	; 255
    37b2:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
    37b6:	83 e0       	ldi	r24, 0x03	; 3
    37b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    37bc:	80 e2       	ldi	r24, 0x20	; 32
    37be:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    37c2:	c0 93 d0 00 	sts	0x00D0, r28	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
    37c6:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
    37ca:	26 9a       	sbi	0x04, 6	; 4
    37cc:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <__TEXT_REGION_LENGTH__+0x7e00bf>
    37d0:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <__TEXT_REGION_LENGTH__+0x7e00be>
    37d4:	69 e9       	ldi	r22, 0x99	; 153
    37d6:	7b e1       	ldi	r23, 0x1B	; 27
    37d8:	8d ea       	ldi	r24, 0xAD	; 173
    37da:	9b e1       	ldi	r25, 0x1B	; 27
    37dc:	0e 94 45 01 	call	0x28a	; 0x28a <buffer_init>
    37e0:	0e 94 11 01 	call	0x222	; 0x222 <adc_init>
    37e4:	78 94       	sei
    37e6:	cf 91       	pop	r28
    37e8:	0c 94 9c 1f 	jmp	0x3f38	; 0x3f38 <wave_init>

000037ec <dvr_record>:
    37ec:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <buffer_reset>
    37f0:	81 e3       	ldi	r24, 0x31	; 49
    37f2:	91 e0       	ldi	r25, 0x01	; 1
    37f4:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <pageCount+0x1>
    37f8:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <pageCount>
    37fc:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <newPage+0x1>
    3800:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <newPage>
    3804:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <wave_create>
    3808:	0e 94 18 01 	call	0x230	; 0x230 <adc_start>
    380c:	59 9a       	sbi	0x0b, 1	; 11
    380e:	8b b1       	in	r24, 0x0b	; 11
    3810:	8f 70       	andi	r24, 0x0F	; 15
    3812:	8b b9       	out	0x0b, r24	; 11
    3814:	08 95       	ret

00003816 <main>:
/* MAIN LOOP (CODE ENTRY)                                               */
/************************************************************************/
int main(void) {
	uint8_t state = DVR_STOPPED;// Start DVR in stopped state	
	// Initialization
	init();	
    3816:	0e 94 c5 1b 	call	0x378a	; 0x378a <init>
	PORTD &= 0b00001111;		// turn other LEDs off
    381a:	8b b1       	in	r24, 0x0b	; 11
    381c:	8f 70       	andi	r24, 0x0F	; 15
    381e:	8b b9       	out	0x0b, r24	; 11
void start_pwm(){
	TIMSK4 = 0x04;				// Enable interrupt
	TCCR4A = 0x21;				// Set control register for 0C4B On
}
void stop_pwm(){
	TIMSK4 = 0x00;				// Disable interrupt
    3820:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
	TCCR4A = 0x20;				// Set control register for 0C4B Off
    3824:	80 e2       	ldi	r24, 0x20	; 32
    3826:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				PORTD &= 0b00001111;					// Turn all LEDs off
				PORTD |= 0b01000000;					// Turn LED 3				
				if ( BIT_IS_SET (~PINF, PF5 ) ) {			// -----STARTING THE RECORDING----
					PORTD |= 0b10000000;					// Turn LED2 on				
					
					printf("Recording started...");			// Output status to console
    382a:	ce e3       	ldi	r28, 0x3E	; 62
    382c:	d1 e0       	ldi	r29, 0x01	; 1
			case DVR_RECORDING:
				PORTD |= 0b00100000;						// Keeps LED2 turn on
				if ( BIT_IS_SET (~PINF, PF6) ) {			// --- STOP REcording on Button Press--
					PORTD &= 0b00001111;					// Turn all LEDs off
					PORTD |= 0b00010000;					// Turn LED1 on					
					pageCount = 1;							// Finish recording last page									
    382e:	01 e0       	ldi	r16, 0x01	; 1
    3830:	10 e0       	ldi	r17, 0x00	; 0
	TIMSK4 = 0x00;				// Disable interrupt	
	DDRB |= 0b01000000;			// Set pin B6 to output(JOUT)
	TCNT4 = 0x00;				// Reset counter
}
void start_pwm(){
	TIMSK4 = 0x04;				// Enable interrupt
    3832:	34 e0       	ldi	r19, 0x04	; 4
    3834:	a3 2e       	mov	r10, r19
	TCCR4A = 0x21;				// Set control register for 0C4B On
    3836:	41 e2       	ldi	r20, 0x21	; 33
    3838:	b4 2e       	mov	r11, r20
}
void stop_pwm(){
	TIMSK4 = 0x00;				// Disable interrupt
	TCCR4A = 0x20;				// Set control register for 0C4B Off
    383a:	50 e2       	ldi	r21, 0x20	; 32
    383c:	c5 2e       	mov	r12, r21
				}											//---------------------------
				else if(stop) {								//---- Finalize Playback------
					
					stop = 0;					
					wave_close ();							// close the file after reading
					printf("DONE!");
    383e:	67 e6       	ldi	r22, 0x67	; 103
    3840:	e6 2e       	mov	r14, r22
    3842:	61 e0       	ldi	r22, 0x01	; 1
    3844:	f6 2e       	mov	r15, r22
				
				if ( BIT_IS_SET (~PINF, PF6) ) {			// ---- Stops PLayback------
					PORTD &= 0b00001111;					// turn other LEDs off
					PORTD |= 0b00010000;					// turn LED1 on
					
					stop = 1;								// Sets stop flag
    3846:	dd 24       	eor	r13, r13
    3848:	d3 94       	inc	r13
	stop_pwm();
    for(;;) {		
		// Switch depending on state
		switch (state) {
			case DVR_STOPPED:
				PORTD &= 0b00001111;					// Turn all LEDs off
    384a:	8b b1       	in	r24, 0x0b	; 11
    384c:	8f 70       	andi	r24, 0x0F	; 15
    384e:	8b b9       	out	0x0b, r24	; 11
				PORTD |= 0b01000000;					// Turn LED 3				
    3850:	5e 9a       	sbi	0x0b, 6	; 11
				if ( BIT_IS_SET (~PINF, PF5 ) ) {			// -----STARTING THE RECORDING----
    3852:	7d 9b       	sbis	0x0f, 5	; 15
    3854:	65 c0       	rjmp	.+202    	; 0x3920 <main+0x10a>
					
					printf("Recording started...");			// Output status to console
					dvr_record();							// Initiate recording
					state = DVR_RECORDING;					// Transition to "recording" state
				 }											// -------------------------------
				 if ( BIT_IS_SET (~PINF, PF4 ) ) {			// -------STARTING PLAYBACK-------
    3856:	7c 99       	sbic	0x0f, 4	; 15
    3858:	f8 cf       	rjmp	.-16     	; 0x384a <main+0x34>
				 	 PORTD &= 0b00001111;					// Turn all LEDs off
    385a:	8b b1       	in	r24, 0x0b	; 11
    385c:	8f 70       	andi	r24, 0x0F	; 15
    385e:	8b b9       	out	0x0b, r24	; 11
					 //PORTD |= 0b01000000;					// turn LED3 on
					 PORTD |= 0b00010000;					// turn LED1 on
    3860:	5c 9a       	sbi	0x0b, 4	; 11
					 printf("Preparing file\n");			// Output status to console
    3862:	8f e2       	ldi	r24, 0x2F	; 47
    3864:	91 e0       	ldi	r25, 0x01	; 1
    3866:	0e 94 19 22 	call	0x4432	; 0x4432 <puts>
					 buffer_reset();
    386a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <buffer_reset>
					 newPage = 0;
    386e:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <newPage+0x1>
    3872:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <newPage>
					 data_amount = wave_open ()*4+1;		// Open the file to read not VOID function
    3876:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <wave_open>
    387a:	dc 01       	movw	r26, r24
    387c:	cb 01       	movw	r24, r22
    387e:	88 0f       	add	r24, r24
    3880:	99 1f       	adc	r25, r25
    3882:	aa 1f       	adc	r26, r26
    3884:	bb 1f       	adc	r27, r27
    3886:	88 0f       	add	r24, r24
    3888:	99 1f       	adc	r25, r25
    388a:	aa 1f       	adc	r26, r26
    388c:	bb 1f       	adc	r27, r27
    388e:	01 96       	adiw	r24, 0x01	; 1
    3890:	a1 1d       	adc	r26, r1
    3892:	b1 1d       	adc	r27, r1
    3894:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <data_amount>
    3898:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <data_amount+0x1>
    389c:	a0 93 ed 02 	sts	0x02ED, r26	; 0x8002ed <data_amount+0x2>
    38a0:	b0 93 ee 02 	sts	0x02EE, r27	; 0x8002ee <data_amount+0x3>
					 
					 wave_read (buffer_writePage(),
    38a4:	0e 94 df 01 	call	0x3be	; 0x3be <buffer_writePage>
    38a8:	60 e0       	ldi	r22, 0x00	; 0
    38aa:	72 e0       	ldi	r23, 0x02	; 2
    38ac:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <wave_read>
											   pageSize);   // Feel first page with samples
					 wave_read (buffer_writePage(),
    38b0:	0e 94 df 01 	call	0x3be	; 0x3be <buffer_writePage>
    38b4:	60 e0       	ldi	r22, 0x00	; 0
    38b6:	72 e0       	ldi	r23, 0x02	; 2
    38b8:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <wave_read>
	TIMSK4 = 0x00;				// Disable interrupt	
	DDRB |= 0b01000000;			// Set pin B6 to output(JOUT)
	TCNT4 = 0x00;				// Reset counter
}
void start_pwm(){
	TIMSK4 = 0x04;				// Enable interrupt
    38bc:	a0 92 72 00 	sts	0x0072, r10	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
	TCCR4A = 0x21;				// Set control register for 0C4B On
    38c0:	b0 92 c0 00 	sts	0x00C0, r11	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
					while(BIT_IS_SET (~PINF, PF5 ));
					state = DVR_STOPPED;					// Transition to stopped state
				}											// --------------------------------------------------------
				break;
			case DVR_PLAYING:
				PORTB |= 0b01000000;						// Keeps LED3 turn on
    38c4:	2e 9a       	sbi	0x05, 6	; 5
				
				if ( BIT_IS_SET (~PINF, PF6) ) {			// ---- Stops PLayback------
    38c6:	7e 99       	sbic	0x0f, 6	; 15
    38c8:	0e c0       	rjmp	.+28     	; 0x38e6 <main+0xd0>
					PORTD &= 0b00001111;					// turn other LEDs off
    38ca:	8b b1       	in	r24, 0x0b	; 11
    38cc:	8f 70       	andi	r24, 0x0F	; 15
    38ce:	8b b9       	out	0x0b, r24	; 11
					PORTD |= 0b00010000;					// turn LED1 on
    38d0:	5c 9a       	sbi	0x0b, 4	; 11
					
					stop = 1;								// Sets stop flag
    38d2:	d0 92 ef 02 	sts	0x02EF, r13	; 0x8002ef <stop>
					newPage = 0;							// Finalize page
    38d6:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <newPage+0x1>
    38da:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <newPage>
void start_pwm(){
	TIMSK4 = 0x04;				// Enable interrupt
	TCCR4A = 0x21;				// Set control register for 0C4B On
}
void stop_pwm(){
	TIMSK4 = 0x00;				// Disable interrupt
    38de:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
	TCCR4A = 0x20;				// Set control register for 0C4B Off
    38e2:	c0 92 c0 00 	sts	0x00C0, r12	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
					
					stop = 1;								// Sets stop flag
					newPage = 0;							// Finalize page
					stop_pwm();								// Stops PWM
				}											// --------------------------				
				if(newPage){								// ------Page is reeded
    38e6:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <newPage>
    38ea:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <newPage+0x1>
    38ee:	89 2b       	or	r24, r25
    38f0:	09 f0       	breq	.+2      	; 0x38f4 <main+0xde>
    38f2:	47 c0       	rjmp	.+142    	; 0x3982 <main+0x16c>
					newPage = 0;					
					wave_read (buffer_writePage(), 
												pageSize);  // Writes next page
				}											//---------------------------
				else if(stop) {								//---- Finalize Playback------
    38f4:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <stop>
    38f8:	88 23       	and	r24, r24
    38fa:	21 f3       	breq	.-56     	; 0x38c4 <main+0xae>
					
					stop = 0;					
    38fc:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <stop>
					wave_close ();							// close the file after reading
    3900:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <wave_close>
					printf("DONE!");
    3904:	ff 92       	push	r15
    3906:	ef 92       	push	r14
    3908:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
					//debounce(5);				//===========Test debouncing=======================
					while(BIT_IS_SET (~PINF, PF4 ));
    390c:	0f 90       	pop	r0
    390e:	0f 90       	pop	r0
    3910:	7c 9b       	sbis	0x0f, 4	; 15
    3912:	fe cf       	rjmp	.-4      	; 0x3910 <main+0xfa>
	stop_pwm();
    for(;;) {		
		// Switch depending on state
		switch (state) {
			case DVR_STOPPED:
				PORTD &= 0b00001111;					// Turn all LEDs off
    3914:	8b b1       	in	r24, 0x0b	; 11
    3916:	8f 70       	andi	r24, 0x0F	; 15
    3918:	8b b9       	out	0x0b, r24	; 11
				PORTD |= 0b01000000;					// Turn LED 3				
    391a:	5e 9a       	sbi	0x0b, 6	; 11
				if ( BIT_IS_SET (~PINF, PF5 ) ) {			// -----STARTING THE RECORDING----
    391c:	7d 99       	sbic	0x0f, 5	; 15
    391e:	9b cf       	rjmp	.-202    	; 0x3856 <main+0x40>
					PORTD |= 0b10000000;					// Turn LED2 on				
    3920:	5f 9a       	sbi	0x0b, 7	; 11
					
					printf("Recording started...");			// Output status to console
    3922:	df 93       	push	r29
    3924:	cf 93       	push	r28
    3926:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
					dvr_record();							// Initiate recording
    392a:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <dvr_record>
					state = DVR_RECORDING;					// Transition to "recording" state
				 }											// -------------------------------
				 if ( BIT_IS_SET (~PINF, PF4 ) ) {			// -------STARTING PLAYBACK-------
    392e:	0f 90       	pop	r0
    3930:	0f 90       	pop	r0
    3932:	7c 9b       	sbis	0x0f, 4	; 15
    3934:	92 cf       	rjmp	.-220    	; 0x385a <main+0x44>
					 start_pwm();							// Start PWM					 
					 state = DVR_PLAYING;					// Transition to "Playing" state
				 }											// ----------------------------------
				break;
			case DVR_RECORDING:
				PORTD |= 0b00100000;						// Keeps LED2 turn on
    3936:	5d 9a       	sbi	0x0b, 5	; 11
				if ( BIT_IS_SET (~PINF, PF6) ) {			// --- STOP REcording on Button Press--
    3938:	7e 99       	sbic	0x0f, 6	; 15
    393a:	08 c0       	rjmp	.+16     	; 0x394c <main+0x136>
					PORTD &= 0b00001111;					// Turn all LEDs off
    393c:	8b b1       	in	r24, 0x0b	; 11
    393e:	8f 70       	andi	r24, 0x0F	; 15
    3940:	8b b9       	out	0x0b, r24	; 11
					PORTD |= 0b00010000;					// Turn LED1 on					
    3942:	5c 9a       	sbi	0x0b, 4	; 11
					pageCount = 1;							// Finish recording last page									
    3944:	10 93 f3 02 	sts	0x02F3, r17	; 0x8002f3 <pageCount+0x1>
    3948:	00 93 f2 02 	sts	0x02F2, r16	; 0x8002f2 <pageCount>
				}											// ----------------------------------
			
				if (newPage) {								// ---Write samples to SD card when buffer page is full---
    394c:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <newPage>
    3950:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <newPage+0x1>
    3954:	89 2b       	or	r24, r25
    3956:	01 f5       	brne	.+64     	; 0x3998 <main+0x182>
					newPage = 0;							// Acknowledge new page flag
					wave_write(buffer_readPage(), pageSize);
				} else if (stop) {							// ---Stop is flagged when the last page has been recorded---
    3958:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <stop>
    395c:	88 23       	and	r24, r24
    395e:	59 f3       	breq	.-42     	; 0x3936 <main+0x120>
					stop = 0;								// Acknowledge stop flag
    3960:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <stop>
					wave_write(buffer_readPage(),
    3964:	0e 94 c0 01 	call	0x380	; 0x380 <buffer_readPage>
    3968:	60 e0       	ldi	r22, 0x00	; 0
    396a:	72 e0       	ldi	r23, 0x02	; 2
    396c:	0e 94 07 20 	call	0x400e	; 0x400e <wave_write>
												 pageSize);	// Write final page
					wave_close();							// Finalize WAVE file 
    3970:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <wave_close>
					printf("Recording COMPLETE!\n");		// Print status to console
    3974:	83 e5       	ldi	r24, 0x53	; 83
    3976:	91 e0       	ldi	r25, 0x01	; 1
    3978:	0e 94 19 22 	call	0x4432	; 0x4432 <puts>
					//debounce(5);				//===========Test debouncing=======================
					while(BIT_IS_SET (~PINF, PF5 ));
    397c:	7d 9b       	sbis	0x0f, 5	; 15
    397e:	fe cf       	rjmp	.-4      	; 0x397c <main+0x166>
    3980:	64 cf       	rjmp	.-312    	; 0x384a <main+0x34>
					stop = 1;								// Sets stop flag
					newPage = 0;							// Finalize page
					stop_pwm();								// Stops PWM
				}											// --------------------------				
				if(newPage){								// ------Page is reeded
					newPage = 0;					
    3982:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <newPage+0x1>
    3986:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <newPage>
					wave_read (buffer_writePage(), 
    398a:	0e 94 df 01 	call	0x3be	; 0x3be <buffer_writePage>
    398e:	60 e0       	ldi	r22, 0x00	; 0
    3990:	72 e0       	ldi	r23, 0x02	; 2
    3992:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <wave_read>
    3996:	96 cf       	rjmp	.-212    	; 0x38c4 <main+0xae>
					PORTD |= 0b00010000;					// Turn LED1 on					
					pageCount = 1;							// Finish recording last page									
				}											// ----------------------------------
			
				if (newPage) {								// ---Write samples to SD card when buffer page is full---
					newPage = 0;							// Acknowledge new page flag
    3998:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <newPage+0x1>
    399c:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <newPage>
					wave_write(buffer_readPage(), pageSize);
    39a0:	0e 94 c0 01 	call	0x380	; 0x380 <buffer_readPage>
    39a4:	60 e0       	ldi	r22, 0x00	; 0
    39a6:	72 e0       	ldi	r23, 0x02	; 2
    39a8:	0e 94 07 20 	call	0x400e	; 0x400e <wave_write>
    39ac:	c4 cf       	rjmp	.-120    	; 0x3936 <main+0x120>

000039ae <__vector_41>:
/**
 * ISR: PWM conversion complete
 * 
 * Creates an average value to fill space. (var1+var2)/2 RUns per 3 sample
 */
ISR(TIMER4_OVF_vect) {
    39ae:	1f 92       	push	r1
    39b0:	0f 92       	push	r0
    39b2:	0f b6       	in	r0, 0x3f	; 63
    39b4:	0f 92       	push	r0
    39b6:	11 24       	eor	r1, r1
    39b8:	2f 93       	push	r18
    39ba:	3f 93       	push	r19
    39bc:	4f 93       	push	r20
    39be:	5f 93       	push	r21
    39c0:	6f 93       	push	r22
    39c2:	7f 93       	push	r23
    39c4:	8f 93       	push	r24
    39c6:	9f 93       	push	r25
    39c8:	af 93       	push	r26
    39ca:	bf 93       	push	r27
    39cc:	ef 93       	push	r30
    39ce:	ff 93       	push	r31
	debaunce_counter++;
    39d0:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <debaunce_counter>
    39d4:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <debaunce_counter+0x1>
    39d8:	01 96       	adiw	r24, 0x01	; 1
    39da:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <debaunce_counter+0x1>
    39de:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <debaunce_counter>
	if(--data_amount > 0){
    39e2:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <data_amount>
    39e6:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <data_amount+0x1>
    39ea:	a0 91 ed 02 	lds	r26, 0x02ED	; 0x8002ed <data_amount+0x2>
    39ee:	b0 91 ee 02 	lds	r27, 0x02EE	; 0x8002ee <data_amount+0x3>
    39f2:	01 97       	sbiw	r24, 0x01	; 1
    39f4:	a1 09       	sbc	r26, r1
    39f6:	b1 09       	sbc	r27, r1
    39f8:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <data_amount>
    39fc:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <data_amount+0x1>
    3a00:	a0 93 ed 02 	sts	0x02ED, r26	; 0x8002ed <data_amount+0x2>
    3a04:	b0 93 ee 02 	sts	0x02EE, r27	; 0x8002ee <data_amount+0x3>
    3a08:	89 2b       	or	r24, r25
    3a0a:	8a 2b       	or	r24, r26
    3a0c:	8b 2b       	or	r24, r27
    3a0e:	09 f4       	brne	.+2      	; 0x3a12 <__vector_41+0x64>
    3a10:	4a c0       	rjmp	.+148    	; 0x3aa6 <__vector_41+0xf8>
		count++;
    3a12:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <count>
    3a16:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <count+0x1>
    3a1a:	01 96       	adiw	r24, 0x01	; 1
    3a1c:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <count+0x1>
    3a20:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <count>
		if(count >=2) {
    3a24:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <count>
    3a28:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <count+0x1>
    3a2c:	02 97       	sbiw	r24, 0x02	; 2
    3a2e:	54 f1       	brlt	.+84     	; 0x3a84 <__vector_41+0xd6>
			count = 0;
    3a30:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <count+0x1>
    3a34:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <count>
			if(played){										// True if 2 samples has not been played yet.
    3a38:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <played>
    3a3c:	81 11       	cpse	r24, r1
    3a3e:	50 c0       	rjmp	.+160    	; 0x3ae0 <__vector_41+0x132>
				second_que = buffer_dequeue();				// Stores second value
				first_played = 0;							// Sets flag for first
				second_played = 0;							// Sets flag for second
				played = 0;									// Values are stored, start play
				} else {										// ------Plays samples of creates one--------
				if(!first_played) {							// ------Play first sample-------------------
    3a40:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <first_played>
    3a44:	88 23       	and	r24, r24
    3a46:	e1 f1       	breq	.+120    	; 0x3ac0 <__vector_41+0x112>
					OCR4B = first_que;
					first_played = 1;
				} else if(!second_played) {					// ------Play average sample-----------------
    3a48:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <second_played>
    3a4c:	81 11       	cpse	r24, r1
    3a4e:	40 c0       	rjmp	.+128    	; 0x3ad0 <__vector_41+0x122>
					OCR4B = (first_que+second_que)/2.0;
    3a50:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <first_que>
    3a54:	60 91 e9 02 	lds	r22, 0x02E9	; 0x8002e9 <second_que>
    3a58:	70 e0       	ldi	r23, 0x00	; 0
    3a5a:	68 0f       	add	r22, r24
    3a5c:	71 1d       	adc	r23, r1
    3a5e:	07 2e       	mov	r0, r23
    3a60:	00 0c       	add	r0, r0
    3a62:	88 0b       	sbc	r24, r24
    3a64:	99 0b       	sbc	r25, r25
    3a66:	0e 94 c8 20 	call	0x4190	; 0x4190 <__floatsisf>
    3a6a:	20 e0       	ldi	r18, 0x00	; 0
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	40 e0       	ldi	r20, 0x00	; 0
    3a70:	5f e3       	ldi	r21, 0x3F	; 63
    3a72:	0e 94 2c 21 	call	0x4258	; 0x4258 <__mulsf3>
    3a76:	0e 94 97 20 	call	0x412e	; 0x412e <__fixunssfsi>
    3a7a:	60 93 d0 00 	sts	0x00D0, r22	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
					second_played = 1;
    3a7e:	81 e0       	ldi	r24, 0x01	; 1
    3a80:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <second_played>
		newPage = 0;									// Empties the page
		stop = 1;										// Stops playback run
		stop_pwm();										// Stops PWM
	} // END data_amount								// --------------------------------------------
	
} // END Interrupt
    3a84:	ff 91       	pop	r31
    3a86:	ef 91       	pop	r30
    3a88:	bf 91       	pop	r27
    3a8a:	af 91       	pop	r26
    3a8c:	9f 91       	pop	r25
    3a8e:	8f 91       	pop	r24
    3a90:	7f 91       	pop	r23
    3a92:	6f 91       	pop	r22
    3a94:	5f 91       	pop	r21
    3a96:	4f 91       	pop	r20
    3a98:	3f 91       	pop	r19
    3a9a:	2f 91       	pop	r18
    3a9c:	0f 90       	pop	r0
    3a9e:	0f be       	out	0x3f, r0	; 63
    3aa0:	0f 90       	pop	r0
    3aa2:	1f 90       	pop	r1
    3aa4:	18 95       	reti
				}											// --------------------------------------------
			}
		}								// -----Runs until all samples were played
														// --------------------------------------------
	} else {											// ----- File has been played------------------
		newPage = 0;									// Empties the page
    3aa6:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <newPage+0x1>
    3aaa:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <newPage>
		stop = 1;										// Stops playback run
    3aae:	81 e0       	ldi	r24, 0x01	; 1
    3ab0:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <stop>
void start_pwm(){
	TIMSK4 = 0x04;				// Enable interrupt
	TCCR4A = 0x21;				// Set control register for 0C4B On
}
void stop_pwm(){
	TIMSK4 = 0x00;				// Disable interrupt
    3ab4:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__TEXT_REGION_LENGTH__+0x7e0072>
	TCCR4A = 0x20;				// Set control register for 0C4B Off
    3ab8:	80 e2       	ldi	r24, 0x20	; 32
    3aba:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		newPage = 0;									// Empties the page
		stop = 1;										// Stops playback run
		stop_pwm();										// Stops PWM
	} // END data_amount								// --------------------------------------------
	
} // END Interrupt
    3abe:	e2 cf       	rjmp	.-60     	; 0x3a84 <__vector_41+0xd6>
				first_played = 0;							// Sets flag for first
				second_played = 0;							// Sets flag for second
				played = 0;									// Values are stored, start play
				} else {										// ------Plays samples of creates one--------
				if(!first_played) {							// ------Play first sample-------------------
					OCR4B = first_que;
    3ac0:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <first_que>
    3ac4:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
					first_played = 1;
    3ac8:	81 e0       	ldi	r24, 0x01	; 1
    3aca:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <first_played>
    3ace:	da cf       	rjmp	.-76     	; 0x3a84 <__vector_41+0xd6>
				} else if(!second_played) {					// ------Play average sample-----------------
					OCR4B = (first_que+second_que)/2.0;
					second_played = 1;
				} else {									// ------Play second sample-------------------
					OCR4B = second_que;
    3ad0:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <second_que>
    3ad4:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
					played = 1;
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <played>
    3ade:	d2 cf       	rjmp	.-92     	; 0x3a84 <__vector_41+0xd6>
	if(--data_amount > 0){
		count++;
		if(count >=2) {
			count = 0;
			if(played){										// True if 2 samples has not been played yet.
				first_que = buffer_dequeue();				// Stores first value
    3ae0:	0e 94 93 01 	call	0x326	; 0x326 <buffer_dequeue>
    3ae4:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <first_que>
				second_que = buffer_dequeue();				// Stores second value
    3ae8:	0e 94 93 01 	call	0x326	; 0x326 <buffer_dequeue>
    3aec:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <second_que>
				first_played = 0;							// Sets flag for first
    3af0:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <first_played>
				second_played = 0;							// Sets flag for second
    3af4:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <second_played>
				played = 0;									// Values are stored, start play
    3af8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <played>
    3afc:	c3 cf       	rjmp	.-122    	; 0x3a84 <__vector_41+0xd6>

00003afe <serial_getchar>:
	return usb_serial_putchar(c);
}

static uint8_t serial_getchar(FILE *stream) {
	//wait for character (blocking)
	while(!usb_serial_available());
    3afe:	0e 94 91 19 	call	0x3322	; 0x3322 <usb_serial_available>
    3b02:	88 23       	and	r24, r24
    3b04:	e1 f3       	breq	.-8      	; 0x3afe <serial_getchar>
	//read a character from the USB serial interface 
	return usb_serial_getchar();
    3b06:	0e 94 68 19 	call	0x32d0	; 0x32d0 <usb_serial_getchar>
}
    3b0a:	08 95       	ret

00003b0c <serial_putchar>:
/************************************************************************/
/* PRIVATE/UTILLITY FUNCTIONS                                           */
/************************************************************************/
static uint8_t serial_putchar(char c, FILE *stream) {
	//outputs a character via the USB serial interface
	return usb_serial_putchar(c);
    3b0c:	0c 94 ac 19 	jmp	0x3358	; 0x3358 <usb_serial_putchar>

00003b10 <serial_init>:
 * Initialises the serial module for use. This function must be called
 * prior to using any IO functions. This function initialises the USB
 * interface and creates the input and output serial streams.
 */
void serial_init() {
	usb_init();			  // Initialise USB serial
    3b10:	0e 94 4f 19 	call	0x329e	; 0x329e <usb_init>
	stdin = &stdinout;
    3b14:	eb e7       	ldi	r30, 0x7B	; 123
    3b16:	f9 e0       	ldi	r31, 0x09	; 9
    3b18:	8f e0       	ldi	r24, 0x0F	; 15
    3b1a:	91 e0       	ldi	r25, 0x01	; 1
    3b1c:	91 83       	std	Z+1, r25	; 0x01
    3b1e:	80 83       	st	Z, r24
	stdout = &stdinout;
    3b20:	93 83       	std	Z+3, r25	; 0x03
    3b22:	82 83       	std	Z+2, r24	; 0x02
    3b24:	08 95       	ret

00003b26 <timer_init>:
 * 
 * Initialises and starts Timer0 with a 64 us period (15.625 kHz).
 * Assumes a 16 MHz system clock. Interrupts at counter top.
 */
void timer_init() {
	OCR0A = 128;	// 15.625 kHz (64 us period)
    3b26:	80 e8       	ldi	r24, 0x80	; 128
    3b28:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0x02;	// CTC mode
    3b2a:	82 e0       	ldi	r24, 0x02	; 2
    3b2c:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = 0x02;  // Interrupt on CMPA (top)
    3b2e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	TCCR0B = 0x02;  // Start timer, /8 prescaler
    3b32:	85 bd       	out	0x25, r24	; 37

	DDRD |= (1<<PIND7);		// Set PORTD7 (LED4) as output
    3b34:	57 9a       	sbi	0x0a, 7	; 10
    3b36:	08 95       	ret

00003b38 <__vector_21>:
 * Interrupt service routine for Timer0 CompareA vector.
 * Corresponds to top of timer for CTC mode.
 *
 * Used to generate regular, timed events.
 */
ISR(TIMER0_COMPA_vect) {
    3b38:	1f 92       	push	r1
    3b3a:	0f 92       	push	r0
    3b3c:	0f b6       	in	r0, 0x3f	; 63
    3b3e:	0f 92       	push	r0
    3b40:	11 24       	eor	r1, r1
    3b42:	2f 93       	push	r18
    3b44:	3f 93       	push	r19
    3b46:	4f 93       	push	r20
    3b48:	5f 93       	push	r21
    3b4a:	6f 93       	push	r22
    3b4c:	7f 93       	push	r23
    3b4e:	8f 93       	push	r24
    3b50:	9f 93       	push	r25
    3b52:	af 93       	push	r26
    3b54:	bf 93       	push	r27
    3b56:	ef 93       	push	r30
    3b58:	ff 93       	push	r31
	
	// Timer to service FatFs module (~10 ms interval)
	if (!(--timer_fatfs)) {
    3b5a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <timer_fatfs>
    3b5e:	81 50       	subi	r24, 0x01	; 1
    3b60:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <timer_fatfs>
    3b64:	88 23       	and	r24, r24
    3b66:	29 f1       	breq	.+74     	; 0x3bb2 <__vector_21+0x7a>
		//timer_fatfs = TIMER_INTERVAL_FATFS;
		//disk_timerproc();
	//}
	
	// Timer to flash debug LED (1 Hz, 50% duty cycle flash)
	if (!(--timer_led)) {
    3b68:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <timer_led>
    3b6c:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <timer_led+0x1>
    3b70:	01 97       	sbiw	r24, 0x01	; 1
    3b72:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <timer_led+0x1>
    3b76:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <timer_led>
    3b7a:	89 2b       	or	r24, r25
    3b7c:	49 f4       	brne	.+18     	; 0x3b90 <__vector_21+0x58>
		timer_led = TIMER_INTERVAL_LED;
    3b7e:	85 e8       	ldi	r24, 0x85	; 133
    3b80:	9e e1       	ldi	r25, 0x1E	; 30
    3b82:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <timer_led+0x1>
    3b86:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <timer_led>
		PORTD ^= (1<<PIND7);
    3b8a:	8b b1       	in	r24, 0x0b	; 11
    3b8c:	80 58       	subi	r24, 0x80	; 128
    3b8e:	8b b9       	out	0x0b, r24	; 11
	}
	
    3b90:	ff 91       	pop	r31
    3b92:	ef 91       	pop	r30
    3b94:	bf 91       	pop	r27
    3b96:	af 91       	pop	r26
    3b98:	9f 91       	pop	r25
    3b9a:	8f 91       	pop	r24
    3b9c:	7f 91       	pop	r23
    3b9e:	6f 91       	pop	r22
    3ba0:	5f 91       	pop	r21
    3ba2:	4f 91       	pop	r20
    3ba4:	3f 91       	pop	r19
    3ba6:	2f 91       	pop	r18
    3ba8:	0f 90       	pop	r0
    3baa:	0f be       	out	0x3f, r0	; 63
    3bac:	0f 90       	pop	r0
    3bae:	1f 90       	pop	r1
    3bb0:	18 95       	reti
 */
ISR(TIMER0_COMPA_vect) {
	
	// Timer to service FatFs module (~10 ms interval)
	if (!(--timer_fatfs)) {
		timer_fatfs = TIMER_INTERVAL_FATFS;
    3bb2:	8c e9       	ldi	r24, 0x9C	; 156
    3bb4:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <timer_fatfs>
		disk_timerproc();
    3bb8:	0e 94 3b 19 	call	0x3276	; 0x3276 <disk_timerproc>
    3bbc:	d5 cf       	rjmp	.-86     	; 0x3b68 <__vector_21+0x30>

00003bbe <initialise_header>:
 * Parameters:
 *   samplerate - Sample rate of the WAVE file.
 *   bps - Bits per sample.
 *   channels - Number of audio channels (1 = mono, 2 = stereo, ...).
 */
void initialise_header(uint32_t samplerate, uint8_t bps, uint8_t channels) {
    3bbe:	cf 92       	push	r12
    3bc0:	df 92       	push	r13
    3bc2:	ef 92       	push	r14
    3bc4:	ff 92       	push	r15
    3bc6:	0f 93       	push	r16
    3bc8:	1f 93       	push	r17
    3bca:	cf 93       	push	r28
    3bcc:	df 93       	push	r29
    3bce:	d4 2f       	mov	r29, r20
    3bd0:	c2 2f       	mov	r28, r18
 *   array - Destination array.
 *   string - Source string.
 */
void set_char_array(char* array, char* string) {
	for (int i = 0; i < 4; i++) {
		array[i] = string[i];
    3bd2:	ef e4       	ldi	r30, 0x4F	; 79
    3bd4:	f9 e0       	ldi	r31, 0x09	; 9
    3bd6:	22 e5       	ldi	r18, 0x52	; 82
    3bd8:	20 83       	st	Z, r18
    3bda:	29 e4       	ldi	r18, 0x49	; 73
    3bdc:	21 83       	std	Z+1, r18	; 0x01
    3bde:	26 e4       	ldi	r18, 0x46	; 70
    3be0:	22 83       	std	Z+2, r18	; 0x02
    3be2:	23 83       	std	Z+3, r18	; 0x03
 *   bps - Bits per sample.
 *   channels - Number of audio channels (1 = mono, 2 = stereo, ...).
 */
void initialise_header(uint32_t samplerate, uint8_t bps, uint8_t channels) {
	set_char_array(waveHeader.fields.ChunkID, "RIFF");
	waveHeader.fields.ChunkSize = 0;	// placeholder, update when number of samples is known (36 + dataSize)
    3be4:	14 82       	std	Z+4, r1	; 0x04
    3be6:	15 82       	std	Z+5, r1	; 0x05
    3be8:	16 82       	std	Z+6, r1	; 0x06
    3bea:	17 82       	std	Z+7, r1	; 0x07
 *   array - Destination array.
 *   string - Source string.
 */
void set_char_array(char* array, char* string) {
	for (int i = 0; i < 4; i++) {
		array[i] = string[i];
    3bec:	27 e5       	ldi	r18, 0x57	; 87
    3bee:	20 87       	std	Z+8, r18	; 0x08
    3bf0:	21 e4       	ldi	r18, 0x41	; 65
    3bf2:	21 87       	std	Z+9, r18	; 0x09
    3bf4:	26 e5       	ldi	r18, 0x56	; 86
    3bf6:	22 87       	std	Z+10, r18	; 0x0a
    3bf8:	25 e4       	ldi	r18, 0x45	; 69
    3bfa:	23 87       	std	Z+11, r18	; 0x0b
    3bfc:	26 e6       	ldi	r18, 0x66	; 102
    3bfe:	24 87       	std	Z+12, r18	; 0x0c
    3c00:	2d e6       	ldi	r18, 0x6D	; 109
    3c02:	25 87       	std	Z+13, r18	; 0x0d
    3c04:	14 e7       	ldi	r17, 0x74	; 116
    3c06:	16 87       	std	Z+14, r17	; 0x0e
    3c08:	20 e2       	ldi	r18, 0x20	; 32
    3c0a:	27 87       	std	Z+15, r18	; 0x0f
	set_char_array(waveHeader.fields.ChunkID, "RIFF");
	waveHeader.fields.ChunkSize = 0;	// placeholder, update when number of samples is known (36 + dataSize)
	set_char_array(waveHeader.fields.Format, "WAVE");
	
	set_char_array(waveHeader.fields.fmtID, "fmt ");	
	waveHeader.fields.fmtSize = 16;		// for PCM
    3c0c:	20 e1       	ldi	r18, 0x10	; 16
    3c0e:	c2 2e       	mov	r12, r18
    3c10:	d1 2c       	mov	r13, r1
    3c12:	e1 2c       	mov	r14, r1
    3c14:	f1 2c       	mov	r15, r1
    3c16:	c0 8a       	std	Z+16, r12	; 0x10
    3c18:	d1 8a       	std	Z+17, r13	; 0x11
    3c1a:	e2 8a       	std	Z+18, r14	; 0x12
    3c1c:	f3 8a       	std	Z+19, r15	; 0x13
	waveHeader.fields.AudioFormat = 1;	// PCM
    3c1e:	21 e0       	ldi	r18, 0x01	; 1
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	35 8b       	std	Z+21, r19	; 0x15
    3c24:	24 8b       	std	Z+20, r18	; 0x14
	waveHeader.fields.NumChannels = channels;
    3c26:	2c 2f       	mov	r18, r28
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	37 8b       	std	Z+23, r19	; 0x17
    3c2c:	26 8b       	std	Z+22, r18	; 0x16
	waveHeader.fields.SampleRate = samplerate;
    3c2e:	60 8f       	std	Z+24, r22	; 0x18
    3c30:	71 8f       	std	Z+25, r23	; 0x19
    3c32:	82 8f       	std	Z+26, r24	; 0x1a
    3c34:	93 8f       	std	Z+27, r25	; 0x1b
	waveHeader.fields.ByteRate = samplerate*channels*(bps>>3);
    3c36:	04 2f       	mov	r16, r20
    3c38:	06 95       	lsr	r16
    3c3a:	06 95       	lsr	r16
    3c3c:	06 95       	lsr	r16
    3c3e:	a0 2f       	mov	r26, r16
    3c40:	b0 e0       	ldi	r27, 0x00	; 0
    3c42:	9b 01       	movw	r18, r22
    3c44:	ac 01       	movw	r20, r24
    3c46:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__muluhisi3>
    3c4a:	9b 01       	movw	r18, r22
    3c4c:	ac 01       	movw	r20, r24
    3c4e:	ac 2f       	mov	r26, r28
    3c50:	b0 e0       	ldi	r27, 0x00	; 0
    3c52:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__muluhisi3>
    3c56:	64 8f       	std	Z+28, r22	; 0x1c
    3c58:	75 8f       	std	Z+29, r23	; 0x1d
    3c5a:	86 8f       	std	Z+30, r24	; 0x1e
    3c5c:	97 8f       	std	Z+31, r25	; 0x1f
	waveHeader.fields.BlockAlign = channels*(bps>>3);
    3c5e:	c0 9f       	mul	r28, r16
    3c60:	90 01       	movw	r18, r0
    3c62:	11 24       	eor	r1, r1
    3c64:	31 a3       	std	Z+33, r19	; 0x21
    3c66:	20 a3       	std	Z+32, r18	; 0x20
	waveHeader.fields.BitsPerSample = bps;
    3c68:	4d 2f       	mov	r20, r29
    3c6a:	50 e0       	ldi	r21, 0x00	; 0
    3c6c:	53 a3       	std	Z+35, r21	; 0x23
    3c6e:	42 a3       	std	Z+34, r20	; 0x22
 *   array - Destination array.
 *   string - Source string.
 */
void set_char_array(char* array, char* string) {
	for (int i = 0; i < 4; i++) {
		array[i] = string[i];
    3c70:	84 e6       	ldi	r24, 0x64	; 100
    3c72:	84 a3       	std	Z+36, r24	; 0x24
    3c74:	81 e6       	ldi	r24, 0x61	; 97
    3c76:	85 a3       	std	Z+37, r24	; 0x25
    3c78:	16 a3       	std	Z+38, r17	; 0x26
    3c7a:	87 a3       	std	Z+39, r24	; 0x27
	waveHeader.fields.ByteRate = samplerate*channels*(bps>>3);
	waveHeader.fields.BlockAlign = channels*(bps>>3);
	waveHeader.fields.BitsPerSample = bps;
	
	set_char_array(waveHeader.fields.dataID, "data");
	waveHeader.fields.dataSize = 0;		// placeholder, update with NumSamples * BlockAlign
    3c7c:	10 a6       	std	Z+40, r1	; 0x28
    3c7e:	11 a6       	std	Z+41, r1	; 0x29
    3c80:	12 a6       	std	Z+42, r1	; 0x2a
    3c82:	13 a6       	std	Z+43, r1	; 0x2b
}
    3c84:	df 91       	pop	r29
    3c86:	cf 91       	pop	r28
    3c88:	1f 91       	pop	r17
    3c8a:	0f 91       	pop	r16
    3c8c:	ff 90       	pop	r15
    3c8e:	ef 90       	pop	r14
    3c90:	df 90       	pop	r13
    3c92:	cf 90       	pop	r12
    3c94:	08 95       	ret

00003c96 <write_wave_header>:
 * Function: write_wave_header
 * 
 * Writes a WAVE header structure into an open file.
 * Wave configuration is hardcoded to 15625 samples per second, 8 bits per sample, mono.
 */
void write_wave_header() {
    3c96:	cf 93       	push	r28
    3c98:	df 93       	push	r29
    3c9a:	00 d0       	rcall	.+0      	; 0x3c9c <write_wave_header+0x6>
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
	FRESULT result;
	uint16_t bw;
	
	initialise_header(15625, 8, 1);	// Create header for 15.625 kHz, 8-bit per sample, mono WAVE file
    3ca0:	21 e0       	ldi	r18, 0x01	; 1
    3ca2:	48 e0       	ldi	r20, 0x08	; 8
    3ca4:	69 e0       	ldi	r22, 0x09	; 9
    3ca6:	7d e3       	ldi	r23, 0x3D	; 61
    3ca8:	80 e0       	ldi	r24, 0x00	; 0
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <initialise_header>
	result = f_write(&file, &(waveHeader.bytes), 44, &bw); // Write header to file
    3cb0:	9e 01       	movw	r18, r28
    3cb2:	2f 5f       	subi	r18, 0xFF	; 255
    3cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    3cb6:	4c e2       	ldi	r20, 0x2C	; 44
    3cb8:	50 e0       	ldi	r21, 0x00	; 0
    3cba:	6f e4       	ldi	r22, 0x4F	; 79
    3cbc:	79 e0       	ldi	r23, 0x09	; 9
    3cbe:	8f e2       	ldi	r24, 0x2F	; 47
    3cc0:	99 e0       	ldi	r25, 0x09	; 9
    3cc2:	0e 94 36 10 	call	0x206c	; 0x206c <f_write>

	// If error has occurred, write status to console
	if (result) printf("f_write returned error code: %d\n", result);
    3cc6:	81 11       	cpse	r24, r1
    3cc8:	19 c0       	rjmp	.+50     	; 0x3cfc <write_wave_header+0x66>
	if (bw != 44) printf("f_write wrote %d of 44 bytes to file.", bw);
    3cca:	89 81       	ldd	r24, Y+1	; 0x01
    3ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cce:	8c 32       	cpi	r24, 0x2C	; 44
    3cd0:	91 05       	cpc	r25, r1
    3cd2:	61 f0       	breq	.+24     	; 0x3cec <write_wave_header+0x56>
    3cd4:	9f 93       	push	r25
    3cd6:	8f 93       	push	r24
    3cd8:	8e e8       	ldi	r24, 0x8E	; 142
    3cda:	91 e0       	ldi	r25, 0x01	; 1
    3cdc:	9f 93       	push	r25
    3cde:	8f 93       	push	r24
    3ce0:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
    3ce4:	0f 90       	pop	r0
    3ce6:	0f 90       	pop	r0
    3ce8:	0f 90       	pop	r0
    3cea:	0f 90       	pop	r0
	
	// Flag that header requires finalisation
	finaliseHeader = 1;
    3cec:	81 e0       	ldi	r24, 0x01	; 1
    3cee:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <finaliseHeader>
}
    3cf2:	0f 90       	pop	r0
    3cf4:	0f 90       	pop	r0
    3cf6:	df 91       	pop	r29
    3cf8:	cf 91       	pop	r28
    3cfa:	08 95       	ret
	
	initialise_header(15625, 8, 1);	// Create header for 15.625 kHz, 8-bit per sample, mono WAVE file
	result = f_write(&file, &(waveHeader.bytes), 44, &bw); // Write header to file

	// If error has occurred, write status to console
	if (result) printf("f_write returned error code: %d\n", result);
    3cfc:	1f 92       	push	r1
    3cfe:	8f 93       	push	r24
    3d00:	8d e6       	ldi	r24, 0x6D	; 109
    3d02:	91 e0       	ldi	r25, 0x01	; 1
    3d04:	9f 93       	push	r25
    3d06:	8f 93       	push	r24
    3d08:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
    3d0c:	0f 90       	pop	r0
    3d0e:	0f 90       	pop	r0
    3d10:	0f 90       	pop	r0
    3d12:	0f 90       	pop	r0
    3d14:	da cf       	rjmp	.-76     	; 0x3cca <write_wave_header+0x34>

00003d16 <read_wave_header>:
 * 
 * Reads a WAVE header from an open file into a structure.
 * 
 * Returns: The number of samples in the opened wave file (as reported in the header)
 */
uint32_t read_wave_header() {
    3d16:	0f 93       	push	r16
    3d18:	1f 93       	push	r17
    3d1a:	cf 93       	push	r28
    3d1c:	df 93       	push	r29
    3d1e:	00 d0       	rcall	.+0      	; 0x3d20 <read_wave_header+0xa>
    3d20:	cd b7       	in	r28, 0x3d	; 61
    3d22:	de b7       	in	r29, 0x3e	; 62
	FRESULT result;
	uint16_t br;
	
	// Read header from WAVE file into structure
	result = f_read(&file, &(waveHeader.bytes), 44, &br);
    3d24:	9e 01       	movw	r18, r28
    3d26:	2f 5f       	subi	r18, 0xFF	; 255
    3d28:	3f 4f       	sbci	r19, 0xFF	; 255
    3d2a:	4c e2       	ldi	r20, 0x2C	; 44
    3d2c:	50 e0       	ldi	r21, 0x00	; 0
    3d2e:	6f e4       	ldi	r22, 0x4F	; 79
    3d30:	79 e0       	ldi	r23, 0x09	; 9
    3d32:	8f e2       	ldi	r24, 0x2F	; 47
    3d34:	99 e0       	ldi	r25, 0x09	; 9
    3d36:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <f_read>

	// If error has occurred, write status to console
	if (result) printf("f_read returned error code: %d\n", result);
    3d3a:	81 11       	cpse	r24, r1
    3d3c:	2d c0       	rjmp	.+90     	; 0x3d98 <read_wave_header+0x82>
	if (br != 44) printf("f_read read %d of 44 bytes from file.", br);
    3d3e:	89 81       	ldd	r24, Y+1	; 0x01
    3d40:	9a 81       	ldd	r25, Y+2	; 0x02
    3d42:	8c 32       	cpi	r24, 0x2C	; 44
    3d44:	91 05       	cpc	r25, r1
    3d46:	c9 f0       	breq	.+50     	; 0x3d7a <read_wave_header+0x64>
    3d48:	00 e0       	ldi	r16, 0x00	; 0
    3d4a:	10 e0       	ldi	r17, 0x00	; 0
    3d4c:	9f 93       	push	r25
    3d4e:	8f 93       	push	r24
    3d50:	84 ed       	ldi	r24, 0xD4	; 212
    3d52:	91 e0       	ldi	r25, 0x01	; 1
    3d54:	9f 93       	push	r25
    3d56:	8f 93       	push	r24
    3d58:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
	
	
	if (result | (br != 44)) {
    3d5c:	81 e0       	ldi	r24, 0x01	; 1
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	0f 90       	pop	r0
    3d62:	0f 90       	pop	r0
    3d64:	0f 90       	pop	r0
    3d66:	0f 90       	pop	r0
    3d68:	29 81       	ldd	r18, Y+1	; 0x01
    3d6a:	3a 81       	ldd	r19, Y+2	; 0x02
    3d6c:	2c 32       	cpi	r18, 0x2C	; 44
    3d6e:	31 05       	cpc	r19, r1
    3d70:	81 f1       	breq	.+96     	; 0x3dd2 <read_wave_header+0xbc>
    3d72:	08 2b       	or	r16, r24
    3d74:	19 2b       	or	r17, r25
    3d76:	01 2b       	or	r16, r17
    3d78:	11 f5       	brne	.+68     	; 0x3dbe <read_wave_header+0xa8>
		// Return "empty" wave file if read is unsuccessful
		return 0;
	} else {
		return waveHeader.fields.dataSize;
    3d7a:	60 91 77 09 	lds	r22, 0x0977	; 0x800977 <waveHeader+0x28>
    3d7e:	70 91 78 09 	lds	r23, 0x0978	; 0x800978 <waveHeader+0x29>
    3d82:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <waveHeader+0x2a>
    3d86:	90 91 7a 09 	lds	r25, 0x097A	; 0x80097a <waveHeader+0x2b>
	}
}
    3d8a:	0f 90       	pop	r0
    3d8c:	0f 90       	pop	r0
    3d8e:	df 91       	pop	r29
    3d90:	cf 91       	pop	r28
    3d92:	1f 91       	pop	r17
    3d94:	0f 91       	pop	r16
    3d96:	08 95       	ret
	
	// Read header from WAVE file into structure
	result = f_read(&file, &(waveHeader.bytes), 44, &br);

	// If error has occurred, write status to console
	if (result) printf("f_read returned error code: %d\n", result);
    3d98:	08 2f       	mov	r16, r24
    3d9a:	10 e0       	ldi	r17, 0x00	; 0
    3d9c:	1f 92       	push	r1
    3d9e:	8f 93       	push	r24
    3da0:	84 eb       	ldi	r24, 0xB4	; 180
    3da2:	91 e0       	ldi	r25, 0x01	; 1
    3da4:	9f 93       	push	r25
    3da6:	8f 93       	push	r24
    3da8:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
	if (br != 44) printf("f_read read %d of 44 bytes from file.", br);
    3dac:	89 81       	ldd	r24, Y+1	; 0x01
    3dae:	9a 81       	ldd	r25, Y+2	; 0x02
    3db0:	0f 90       	pop	r0
    3db2:	0f 90       	pop	r0
    3db4:	0f 90       	pop	r0
    3db6:	0f 90       	pop	r0
    3db8:	8c 32       	cpi	r24, 0x2C	; 44
    3dba:	91 05       	cpc	r25, r1
    3dbc:	39 f6       	brne	.-114    	; 0x3d4c <read_wave_header+0x36>
	
	
	if (result | (br != 44)) {
		// Return "empty" wave file if read is unsuccessful
		return 0;
    3dbe:	60 e0       	ldi	r22, 0x00	; 0
    3dc0:	70 e0       	ldi	r23, 0x00	; 0
    3dc2:	cb 01       	movw	r24, r22
	} else {
		return waveHeader.fields.dataSize;
	}
}
    3dc4:	0f 90       	pop	r0
    3dc6:	0f 90       	pop	r0
    3dc8:	df 91       	pop	r29
    3dca:	cf 91       	pop	r28
    3dcc:	1f 91       	pop	r17
    3dce:	0f 91       	pop	r16
    3dd0:	08 95       	ret
	// If error has occurred, write status to console
	if (result) printf("f_read returned error code: %d\n", result);
	if (br != 44) printf("f_read read %d of 44 bytes from file.", br);
	
	
	if (result | (br != 44)) {
    3dd2:	80 e0       	ldi	r24, 0x00	; 0
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	08 2b       	or	r16, r24
    3dd8:	19 2b       	or	r17, r25
    3dda:	01 2b       	or	r16, r17
    3ddc:	71 f2       	breq	.-100    	; 0x3d7a <read_wave_header+0x64>
    3dde:	ef cf       	rjmp	.-34     	; 0x3dbe <read_wave_header+0xa8>

00003de0 <finalise_wave_header>:
/**
 * Function: finalise_wave_header
 * 
 * Finalises the header of an open WAVE file on the basis of the number of samples written to the file.
 */
void finalise_wave_header() {
    3de0:	cf 93       	push	r28
    3de2:	df 93       	push	r29
    3de4:	cd b7       	in	r28, 0x3d	; 61
    3de6:	de b7       	in	r29, 0x3e	; 62
    3de8:	2a 97       	sbiw	r28, 0x0a	; 10
    3dea:	0f b6       	in	r0, 0x3f	; 63
    3dec:	f8 94       	cli
    3dee:	de bf       	out	0x3e, r29	; 62
    3df0:	0f be       	out	0x3f, r0	; 63
    3df2:	cd bf       	out	0x3d, r28	; 61
	FRESULT result;
	uint16_t bw;
	
	// Calculate header fields to update
	uint32_t dataSize = sampleCount;
    3df4:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <sampleCount>
    3df8:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <sampleCount+0x1>
    3dfc:	a0 91 f7 02 	lds	r26, 0x02F7	; 0x8002f7 <sampleCount+0x2>
    3e00:	b0 91 f8 02 	lds	r27, 0x02F8	; 0x8002f8 <sampleCount+0x3>
    3e04:	8d 83       	std	Y+5, r24	; 0x05
    3e06:	9e 83       	std	Y+6, r25	; 0x06
    3e08:	af 83       	std	Y+7, r26	; 0x07
    3e0a:	b8 87       	std	Y+8, r27	; 0x08
	uint32_t chunkSize = 36 + dataSize;
    3e0c:	84 96       	adiw	r24, 0x24	; 36
    3e0e:	a1 1d       	adc	r26, r1
    3e10:	b1 1d       	adc	r27, r1
    3e12:	89 83       	std	Y+1, r24	; 0x01
    3e14:	9a 83       	std	Y+2, r25	; 0x02
    3e16:	ab 83       	std	Y+3, r26	; 0x03
    3e18:	bc 83       	std	Y+4, r27	; 0x04
	
	// Finalise wave file header
	// Where errors occur, print to console
	result = f_lseek(&file, 4);						// Seek to dataSize location
    3e1a:	44 e0       	ldi	r20, 0x04	; 4
    3e1c:	50 e0       	ldi	r21, 0x00	; 0
    3e1e:	60 e0       	ldi	r22, 0x00	; 0
    3e20:	70 e0       	ldi	r23, 0x00	; 0
    3e22:	8f e2       	ldi	r24, 0x2F	; 47
    3e24:	99 e0       	ldi	r25, 0x09	; 9
    3e26:	0e 94 d6 12 	call	0x25ac	; 0x25ac <f_lseek>
	if (result) printf("f_lseek returned error code: %d\n", result);
    3e2a:	81 11       	cpse	r24, r1
    3e2c:	51 c0       	rjmp	.+162    	; 0x3ed0 <finalise_wave_header+0xf0>
	result = f_write(&file, &chunkSize, 4, &bw);	// Write dataSize field to file
    3e2e:	9e 01       	movw	r18, r28
    3e30:	27 5f       	subi	r18, 0xF7	; 247
    3e32:	3f 4f       	sbci	r19, 0xFF	; 255
    3e34:	44 e0       	ldi	r20, 0x04	; 4
    3e36:	50 e0       	ldi	r21, 0x00	; 0
    3e38:	be 01       	movw	r22, r28
    3e3a:	6f 5f       	subi	r22, 0xFF	; 255
    3e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e3e:	8f e2       	ldi	r24, 0x2F	; 47
    3e40:	99 e0       	ldi	r25, 0x09	; 9
    3e42:	0e 94 36 10 	call	0x206c	; 0x206c <f_write>
	if (result) printf("f_write returned error code: %d\n", result);
    3e46:	81 11       	cpse	r24, r1
    3e48:	6a c0       	rjmp	.+212    	; 0x3f1e <finalise_wave_header+0x13e>
	if (bw != 4) printf("f_write wrote %d of 4 bytes to file.", bw);
    3e4a:	89 85       	ldd	r24, Y+9	; 0x09
    3e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e4e:	84 30       	cpi	r24, 0x04	; 4
    3e50:	91 05       	cpc	r25, r1
    3e52:	61 f0       	breq	.+24     	; 0x3e6c <finalise_wave_header+0x8c>
    3e54:	9f 93       	push	r25
    3e56:	8f 93       	push	r24
    3e58:	8b e1       	ldi	r24, 0x1B	; 27
    3e5a:	92 e0       	ldi	r25, 0x02	; 2
    3e5c:	9f 93       	push	r25
    3e5e:	8f 93       	push	r24
    3e60:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
    3e64:	0f 90       	pop	r0
    3e66:	0f 90       	pop	r0
    3e68:	0f 90       	pop	r0
    3e6a:	0f 90       	pop	r0
	
	result = f_lseek(&file, 40);					// Seek to chunkSize location
    3e6c:	48 e2       	ldi	r20, 0x28	; 40
    3e6e:	50 e0       	ldi	r21, 0x00	; 0
    3e70:	60 e0       	ldi	r22, 0x00	; 0
    3e72:	70 e0       	ldi	r23, 0x00	; 0
    3e74:	8f e2       	ldi	r24, 0x2F	; 47
    3e76:	99 e0       	ldi	r25, 0x09	; 9
    3e78:	0e 94 d6 12 	call	0x25ac	; 0x25ac <f_lseek>
	if (result) printf("f_lseek returned error code: %d\n", result);
    3e7c:	81 11       	cpse	r24, r1
    3e7e:	42 c0       	rjmp	.+132    	; 0x3f04 <finalise_wave_header+0x124>
	result = f_write(&file, &dataSize, 4, &bw);		// Write chuckSize field to file
    3e80:	9e 01       	movw	r18, r28
    3e82:	27 5f       	subi	r18, 0xF7	; 247
    3e84:	3f 4f       	sbci	r19, 0xFF	; 255
    3e86:	44 e0       	ldi	r20, 0x04	; 4
    3e88:	50 e0       	ldi	r21, 0x00	; 0
    3e8a:	be 01       	movw	r22, r28
    3e8c:	6b 5f       	subi	r22, 0xFB	; 251
    3e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e90:	8f e2       	ldi	r24, 0x2F	; 47
    3e92:	99 e0       	ldi	r25, 0x09	; 9
    3e94:	0e 94 36 10 	call	0x206c	; 0x206c <f_write>
	if (result) printf("f_write returned error code: %d\n", result);
    3e98:	81 11       	cpse	r24, r1
    3e9a:	27 c0       	rjmp	.+78     	; 0x3eea <finalise_wave_header+0x10a>
	if (bw != 4) printf("f_write wrote %d of 4 bytes to file.", bw);
    3e9c:	89 85       	ldd	r24, Y+9	; 0x09
    3e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ea0:	84 30       	cpi	r24, 0x04	; 4
    3ea2:	91 05       	cpc	r25, r1
    3ea4:	61 f0       	breq	.+24     	; 0x3ebe <finalise_wave_header+0xde>
    3ea6:	9f 93       	push	r25
    3ea8:	8f 93       	push	r24
    3eaa:	8b e1       	ldi	r24, 0x1B	; 27
    3eac:	92 e0       	ldi	r25, 0x02	; 2
    3eae:	9f 93       	push	r25
    3eb0:	8f 93       	push	r24
    3eb2:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
    3eb6:	0f 90       	pop	r0
    3eb8:	0f 90       	pop	r0
    3eba:	0f 90       	pop	r0
    3ebc:	0f 90       	pop	r0
}
    3ebe:	2a 96       	adiw	r28, 0x0a	; 10
    3ec0:	0f b6       	in	r0, 0x3f	; 63
    3ec2:	f8 94       	cli
    3ec4:	de bf       	out	0x3e, r29	; 62
    3ec6:	0f be       	out	0x3f, r0	; 63
    3ec8:	cd bf       	out	0x3d, r28	; 61
    3eca:	df 91       	pop	r29
    3ecc:	cf 91       	pop	r28
    3ece:	08 95       	ret
	uint32_t chunkSize = 36 + dataSize;
	
	// Finalise wave file header
	// Where errors occur, print to console
	result = f_lseek(&file, 4);						// Seek to dataSize location
	if (result) printf("f_lseek returned error code: %d\n", result);
    3ed0:	1f 92       	push	r1
    3ed2:	8f 93       	push	r24
    3ed4:	8a ef       	ldi	r24, 0xFA	; 250
    3ed6:	91 e0       	ldi	r25, 0x01	; 1
    3ed8:	9f 93       	push	r25
    3eda:	8f 93       	push	r24
    3edc:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
    3ee0:	0f 90       	pop	r0
    3ee2:	0f 90       	pop	r0
    3ee4:	0f 90       	pop	r0
    3ee6:	0f 90       	pop	r0
    3ee8:	a2 cf       	rjmp	.-188    	; 0x3e2e <finalise_wave_header+0x4e>
	if (bw != 4) printf("f_write wrote %d of 4 bytes to file.", bw);
	
	result = f_lseek(&file, 40);					// Seek to chunkSize location
	if (result) printf("f_lseek returned error code: %d\n", result);
	result = f_write(&file, &dataSize, 4, &bw);		// Write chuckSize field to file
	if (result) printf("f_write returned error code: %d\n", result);
    3eea:	1f 92       	push	r1
    3eec:	8f 93       	push	r24
    3eee:	8d e6       	ldi	r24, 0x6D	; 109
    3ef0:	91 e0       	ldi	r25, 0x01	; 1
    3ef2:	9f 93       	push	r25
    3ef4:	8f 93       	push	r24
    3ef6:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
    3efa:	0f 90       	pop	r0
    3efc:	0f 90       	pop	r0
    3efe:	0f 90       	pop	r0
    3f00:	0f 90       	pop	r0
    3f02:	cc cf       	rjmp	.-104    	; 0x3e9c <finalise_wave_header+0xbc>
	result = f_write(&file, &chunkSize, 4, &bw);	// Write dataSize field to file
	if (result) printf("f_write returned error code: %d\n", result);
	if (bw != 4) printf("f_write wrote %d of 4 bytes to file.", bw);
	
	result = f_lseek(&file, 40);					// Seek to chunkSize location
	if (result) printf("f_lseek returned error code: %d\n", result);
    3f04:	1f 92       	push	r1
    3f06:	8f 93       	push	r24
    3f08:	8a ef       	ldi	r24, 0xFA	; 250
    3f0a:	91 e0       	ldi	r25, 0x01	; 1
    3f0c:	9f 93       	push	r25
    3f0e:	8f 93       	push	r24
    3f10:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
    3f14:	0f 90       	pop	r0
    3f16:	0f 90       	pop	r0
    3f18:	0f 90       	pop	r0
    3f1a:	0f 90       	pop	r0
    3f1c:	b1 cf       	rjmp	.-158    	; 0x3e80 <finalise_wave_header+0xa0>
	// Finalise wave file header
	// Where errors occur, print to console
	result = f_lseek(&file, 4);						// Seek to dataSize location
	if (result) printf("f_lseek returned error code: %d\n", result);
	result = f_write(&file, &chunkSize, 4, &bw);	// Write dataSize field to file
	if (result) printf("f_write returned error code: %d\n", result);
    3f1e:	1f 92       	push	r1
    3f20:	8f 93       	push	r24
    3f22:	8d e6       	ldi	r24, 0x6D	; 109
    3f24:	91 e0       	ldi	r25, 0x01	; 1
    3f26:	9f 93       	push	r25
    3f28:	8f 93       	push	r24
    3f2a:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
    3f2e:	0f 90       	pop	r0
    3f30:	0f 90       	pop	r0
    3f32:	0f 90       	pop	r0
    3f34:	0f 90       	pop	r0
    3f36:	89 cf       	rjmp	.-238    	; 0x3e4a <finalise_wave_header+0x6a>

00003f38 <wave_init>:
 * Must be called prior to calling any other function in the WAVE module.
 */
void wave_init() {
	FRESULT result;
	
	result = f_mount(&fs, "/", 1);	// force mount SD card root directory
    3f38:	41 e0       	ldi	r20, 0x01	; 1
    3f3a:	60 e4       	ldi	r22, 0x40	; 64
    3f3c:	72 e0       	ldi	r23, 0x02	; 2
    3f3e:	81 e0       	ldi	r24, 0x01	; 1
    3f40:	97 e0       	ldi	r25, 0x07	; 7
    3f42:	0e 94 35 0b 	call	0x166a	; 0x166a <f_mount>

	// If error occurs, write status to console
	if (result) printf("f_mount returned error code: %d\n", result);
    3f46:	81 11       	cpse	r24, r1
    3f48:	01 c0       	rjmp	.+2      	; 0x3f4c <wave_init+0x14>
    3f4a:	08 95       	ret
    3f4c:	1f 92       	push	r1
    3f4e:	8f 93       	push	r24
    3f50:	82 e4       	ldi	r24, 0x42	; 66
    3f52:	92 e0       	ldi	r25, 0x02	; 2
    3f54:	9f 93       	push	r25
    3f56:	8f 93       	push	r24
    3f58:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
    3f5c:	0f 90       	pop	r0
    3f5e:	0f 90       	pop	r0
    3f60:	0f 90       	pop	r0
    3f62:	0f 90       	pop	r0
    3f64:	08 95       	ret

00003f66 <wave_create>:
 */
void wave_create() {
	FRESULT result;
	
	// Create new WAVE file with read/write access (force overwrite if file exists)
	result = f_open(&file, "EGB240.WAV", FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
    3f66:	4b e0       	ldi	r20, 0x0B	; 11
    3f68:	63 e6       	ldi	r22, 0x63	; 99
    3f6a:	72 e0       	ldi	r23, 0x02	; 2
    3f6c:	8f e2       	ldi	r24, 0x2F	; 47
    3f6e:	99 e0       	ldi	r25, 0x09	; 9
    3f70:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <f_open>

	// If error occurs, write status to console
	if (result) printf("f_open returned error code: %d\n", result);
    3f74:	88 23       	and	r24, r24
    3f76:	61 f0       	breq	.+24     	; 0x3f90 <wave_create+0x2a>
    3f78:	1f 92       	push	r1
    3f7a:	8f 93       	push	r24
    3f7c:	8e e6       	ldi	r24, 0x6E	; 110
    3f7e:	92 e0       	ldi	r25, 0x02	; 2
    3f80:	9f 93       	push	r25
    3f82:	8f 93       	push	r24
    3f84:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
    3f88:	0f 90       	pop	r0
    3f8a:	0f 90       	pop	r0
    3f8c:	0f 90       	pop	r0
    3f8e:	0f 90       	pop	r0
	
	// Write WAVE file header to file
	write_wave_header();
    3f90:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <write_wave_header>
	
	// Reset sample counter
	sampleCount = 0;
    3f94:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <sampleCount>
    3f98:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <sampleCount+0x1>
    3f9c:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <sampleCount+0x2>
    3fa0:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <sampleCount+0x3>
    3fa4:	08 95       	ret

00003fa6 <wave_open>:
 */
uint32_t wave_open() {
	FRESULT result;
	
	// Open an existing WAVE file with read only access
	result = f_open(&file, "EGB240.WAV", FA_READ);
    3fa6:	41 e0       	ldi	r20, 0x01	; 1
    3fa8:	63 e6       	ldi	r22, 0x63	; 99
    3faa:	72 e0       	ldi	r23, 0x02	; 2
    3fac:	8f e2       	ldi	r24, 0x2F	; 47
    3fae:	99 e0       	ldi	r25, 0x09	; 9
    3fb0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <f_open>

	// If error occurs, write status to console
	if (result) printf("f_open returned error code: %d\n", result);
    3fb4:	88 23       	and	r24, r24
    3fb6:	61 f0       	breq	.+24     	; 0x3fd0 <wave_open+0x2a>
    3fb8:	1f 92       	push	r1
    3fba:	8f 93       	push	r24
    3fbc:	8e e6       	ldi	r24, 0x6E	; 110
    3fbe:	92 e0       	ldi	r25, 0x02	; 2
    3fc0:	9f 93       	push	r25
    3fc2:	8f 93       	push	r24
    3fc4:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
    3fc8:	0f 90       	pop	r0
    3fca:	0f 90       	pop	r0
    3fcc:	0f 90       	pop	r0
    3fce:	0f 90       	pop	r0
	
	// Read the WAVE file header and return the number of samples reported
	return read_wave_header();
    3fd0:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <read_wave_header>

00003fd4 <wave_close>:
 * Closes an open WAVE file. If required, the WAVE file header is finalised prior to closing.
 */
void wave_close() {
	FRESULT result;
	
	if (finaliseHeader) {
    3fd4:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <finaliseHeader>
    3fd8:	81 11       	cpse	r24, r1
    3fda:	14 c0       	rjmp	.+40     	; 0x4004 <wave_close+0x30>
		finaliseHeader = 0;
		finalise_wave_header();
	}
	
	// Close WAVE file
	result = f_close(&file);
    3fdc:	8f e2       	ldi	r24, 0x2F	; 47
    3fde:	99 e0       	ldi	r25, 0x09	; 9
    3fe0:	0e 94 c2 12 	call	0x2584	; 0x2584 <f_close>

	// If error occurs, write status to console
	if (result) printf("f_close returned error code: %d\n", result);
    3fe4:	81 11       	cpse	r24, r1
    3fe6:	01 c0       	rjmp	.+2      	; 0x3fea <wave_close+0x16>
    3fe8:	08 95       	ret
    3fea:	1f 92       	push	r1
    3fec:	8f 93       	push	r24
    3fee:	8e e8       	ldi	r24, 0x8E	; 142
    3ff0:	92 e0       	ldi	r25, 0x02	; 2
    3ff2:	9f 93       	push	r25
    3ff4:	8f 93       	push	r24
    3ff6:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
    3ffa:	0f 90       	pop	r0
    3ffc:	0f 90       	pop	r0
    3ffe:	0f 90       	pop	r0
    4000:	0f 90       	pop	r0
    4002:	08 95       	ret
void wave_close() {
	FRESULT result;
	
	if (finaliseHeader) {
		// Only finalise header where WAVE file is newly created 
		finaliseHeader = 0;
    4004:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <finaliseHeader>
		finalise_wave_header();
    4008:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <finalise_wave_header>
    400c:	e7 cf       	rjmp	.-50     	; 0x3fdc <wave_close+0x8>

0000400e <wave_write>:
 *
 * Parameters:
 *    pSamples - Pointer to array of 8-bit audio samples to write to WAVE file.
 *    count - Number of samples to write from array into WAVE file.
 */
void wave_write(uint8_t* pSamples, uint16_t count) {
    400e:	0f 93       	push	r16
    4010:	1f 93       	push	r17
    4012:	cf 93       	push	r28
    4014:	df 93       	push	r29
    4016:	00 d0       	rcall	.+0      	; 0x4018 <wave_write+0xa>
    4018:	cd b7       	in	r28, 0x3d	; 61
    401a:	de b7       	in	r29, 0x3e	; 62
    401c:	8b 01       	movw	r16, r22
	FRESULT result;
	uint16_t bw;
	
	result = f_write(&file, pSamples, count, &bw); // Write samples to file
    401e:	9e 01       	movw	r18, r28
    4020:	2f 5f       	subi	r18, 0xFF	; 255
    4022:	3f 4f       	sbci	r19, 0xFF	; 255
    4024:	ab 01       	movw	r20, r22
    4026:	bc 01       	movw	r22, r24
    4028:	8f e2       	ldi	r24, 0x2F	; 47
    402a:	99 e0       	ldi	r25, 0x09	; 9
    402c:	0e 94 36 10 	call	0x206c	; 0x206c <f_write>

	// If error occurs, write status to console
	if (result) printf("f_write returned error code: %d\n", result);
    4030:	81 11       	cpse	r24, r1
    4032:	34 c0       	rjmp	.+104    	; 0x409c <wave_write+0x8e>
	if (bw != count) printf("f_write wrote %d of %d bytes to file.", bw, count);
    4034:	89 81       	ldd	r24, Y+1	; 0x01
    4036:	9a 81       	ldd	r25, Y+2	; 0x02
    4038:	08 17       	cp	r16, r24
    403a:	19 07       	cpc	r17, r25
    403c:	91 f0       	breq	.+36     	; 0x4062 <wave_write+0x54>
    403e:	1f 93       	push	r17
    4040:	0f 93       	push	r16
    4042:	9f 93       	push	r25
    4044:	8f 93       	push	r24
    4046:	8f ea       	ldi	r24, 0xAF	; 175
    4048:	92 e0       	ldi	r25, 0x02	; 2
    404a:	9f 93       	push	r25
    404c:	8f 93       	push	r24
    404e:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
    4052:	89 81       	ldd	r24, Y+1	; 0x01
    4054:	9a 81       	ldd	r25, Y+2	; 0x02
    4056:	0f 90       	pop	r0
    4058:	0f 90       	pop	r0
    405a:	0f 90       	pop	r0
    405c:	0f 90       	pop	r0
    405e:	0f 90       	pop	r0
    4060:	0f 90       	pop	r0

	// Increment sample count by number of samples written to file
	sampleCount += bw;
    4062:	40 91 f5 02 	lds	r20, 0x02F5	; 0x8002f5 <sampleCount>
    4066:	50 91 f6 02 	lds	r21, 0x02F6	; 0x8002f6 <sampleCount+0x1>
    406a:	60 91 f7 02 	lds	r22, 0x02F7	; 0x8002f7 <sampleCount+0x2>
    406e:	70 91 f8 02 	lds	r23, 0x02F8	; 0x8002f8 <sampleCount+0x3>
    4072:	8a 01       	movw	r16, r20
    4074:	9b 01       	movw	r18, r22
    4076:	08 0f       	add	r16, r24
    4078:	19 1f       	adc	r17, r25
    407a:	21 1d       	adc	r18, r1
    407c:	31 1d       	adc	r19, r1
    407e:	00 93 f5 02 	sts	0x02F5, r16	; 0x8002f5 <sampleCount>
    4082:	10 93 f6 02 	sts	0x02F6, r17	; 0x8002f6 <sampleCount+0x1>
    4086:	20 93 f7 02 	sts	0x02F7, r18	; 0x8002f7 <sampleCount+0x2>
    408a:	30 93 f8 02 	sts	0x02F8, r19	; 0x8002f8 <sampleCount+0x3>
}
    408e:	0f 90       	pop	r0
    4090:	0f 90       	pop	r0
    4092:	df 91       	pop	r29
    4094:	cf 91       	pop	r28
    4096:	1f 91       	pop	r17
    4098:	0f 91       	pop	r16
    409a:	08 95       	ret
	uint16_t bw;
	
	result = f_write(&file, pSamples, count, &bw); // Write samples to file

	// If error occurs, write status to console
	if (result) printf("f_write returned error code: %d\n", result);
    409c:	1f 92       	push	r1
    409e:	8f 93       	push	r24
    40a0:	8d e6       	ldi	r24, 0x6D	; 109
    40a2:	91 e0       	ldi	r25, 0x01	; 1
    40a4:	9f 93       	push	r25
    40a6:	8f 93       	push	r24
    40a8:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
    40ac:	0f 90       	pop	r0
    40ae:	0f 90       	pop	r0
    40b0:	0f 90       	pop	r0
    40b2:	0f 90       	pop	r0
    40b4:	bf cf       	rjmp	.-130    	; 0x4034 <wave_write+0x26>

000040b6 <wave_read>:
 *
 * Parameters:
 *    pSamples - Pointer to array of 8-bit audio samples into which samples will be read.
 *    count - Number of samples to read into array from WAVE file.
 */
void wave_read(uint8_t* pSamples, uint16_t count) {
    40b6:	0f 93       	push	r16
    40b8:	1f 93       	push	r17
    40ba:	cf 93       	push	r28
    40bc:	df 93       	push	r29
    40be:	00 d0       	rcall	.+0      	; 0x40c0 <wave_read+0xa>
    40c0:	cd b7       	in	r28, 0x3d	; 61
    40c2:	de b7       	in	r29, 0x3e	; 62
    40c4:	8b 01       	movw	r16, r22
	FRESULT result;
	uint16_t br;
	
	result = f_read(&file, pSamples, count, &br); // Read samples from file
    40c6:	9e 01       	movw	r18, r28
    40c8:	2f 5f       	subi	r18, 0xFF	; 255
    40ca:	3f 4f       	sbci	r19, 0xFF	; 255
    40cc:	ab 01       	movw	r20, r22
    40ce:	bc 01       	movw	r22, r24
    40d0:	8f e2       	ldi	r24, 0x2F	; 47
    40d2:	99 e0       	ldi	r25, 0x09	; 9
    40d4:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <f_read>

	// If error occurs, write status to console
	if (result) printf("f_write returned error code: %d\n", result);
    40d8:	81 11       	cpse	r24, r1
    40da:	1c c0       	rjmp	.+56     	; 0x4114 <wave_read+0x5e>
	if (br != count) printf("f_write wrote %d of %d bytes to file.", br, count);
    40dc:	89 81       	ldd	r24, Y+1	; 0x01
    40de:	9a 81       	ldd	r25, Y+2	; 0x02
    40e0:	08 17       	cp	r16, r24
    40e2:	19 07       	cpc	r17, r25
    40e4:	81 f0       	breq	.+32     	; 0x4106 <wave_read+0x50>
    40e6:	1f 93       	push	r17
    40e8:	0f 93       	push	r16
    40ea:	9f 93       	push	r25
    40ec:	8f 93       	push	r24
    40ee:	8f ea       	ldi	r24, 0xAF	; 175
    40f0:	92 e0       	ldi	r25, 0x02	; 2
    40f2:	9f 93       	push	r25
    40f4:	8f 93       	push	r24
    40f6:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
    40fa:	0f 90       	pop	r0
    40fc:	0f 90       	pop	r0
    40fe:	0f 90       	pop	r0
    4100:	0f 90       	pop	r0
    4102:	0f 90       	pop	r0
    4104:	0f 90       	pop	r0
    4106:	0f 90       	pop	r0
    4108:	0f 90       	pop	r0
    410a:	df 91       	pop	r29
    410c:	cf 91       	pop	r28
    410e:	1f 91       	pop	r17
    4110:	0f 91       	pop	r16
    4112:	08 95       	ret
	uint16_t br;
	
	result = f_read(&file, pSamples, count, &br); // Read samples from file

	// If error occurs, write status to console
	if (result) printf("f_write returned error code: %d\n", result);
    4114:	1f 92       	push	r1
    4116:	8f 93       	push	r24
    4118:	8d e6       	ldi	r24, 0x6D	; 109
    411a:	91 e0       	ldi	r25, 0x01	; 1
    411c:	9f 93       	push	r25
    411e:	8f 93       	push	r24
    4120:	0e 94 03 22 	call	0x4406	; 0x4406 <printf>
    4124:	0f 90       	pop	r0
    4126:	0f 90       	pop	r0
    4128:	0f 90       	pop	r0
    412a:	0f 90       	pop	r0
    412c:	d7 cf       	rjmp	.-82     	; 0x40dc <wave_read+0x26>

0000412e <__fixunssfsi>:
    412e:	0e 94 0b 21 	call	0x4216	; 0x4216 <__fp_splitA>
    4132:	88 f0       	brcs	.+34     	; 0x4156 <__fixunssfsi+0x28>
    4134:	9f 57       	subi	r25, 0x7F	; 127
    4136:	98 f0       	brcs	.+38     	; 0x415e <__fixunssfsi+0x30>
    4138:	b9 2f       	mov	r27, r25
    413a:	99 27       	eor	r25, r25
    413c:	b7 51       	subi	r27, 0x17	; 23
    413e:	b0 f0       	brcs	.+44     	; 0x416c <__fixunssfsi+0x3e>
    4140:	e1 f0       	breq	.+56     	; 0x417a <__fixunssfsi+0x4c>
    4142:	66 0f       	add	r22, r22
    4144:	77 1f       	adc	r23, r23
    4146:	88 1f       	adc	r24, r24
    4148:	99 1f       	adc	r25, r25
    414a:	1a f0       	brmi	.+6      	; 0x4152 <__fixunssfsi+0x24>
    414c:	ba 95       	dec	r27
    414e:	c9 f7       	brne	.-14     	; 0x4142 <__fixunssfsi+0x14>
    4150:	14 c0       	rjmp	.+40     	; 0x417a <__fixunssfsi+0x4c>
    4152:	b1 30       	cpi	r27, 0x01	; 1
    4154:	91 f0       	breq	.+36     	; 0x417a <__fixunssfsi+0x4c>
    4156:	0e 94 25 21 	call	0x424a	; 0x424a <__fp_zero>
    415a:	b1 e0       	ldi	r27, 0x01	; 1
    415c:	08 95       	ret
    415e:	0c 94 25 21 	jmp	0x424a	; 0x424a <__fp_zero>
    4162:	67 2f       	mov	r22, r23
    4164:	78 2f       	mov	r23, r24
    4166:	88 27       	eor	r24, r24
    4168:	b8 5f       	subi	r27, 0xF8	; 248
    416a:	39 f0       	breq	.+14     	; 0x417a <__fixunssfsi+0x4c>
    416c:	b9 3f       	cpi	r27, 0xF9	; 249
    416e:	cc f3       	brlt	.-14     	; 0x4162 <__fixunssfsi+0x34>
    4170:	86 95       	lsr	r24
    4172:	77 95       	ror	r23
    4174:	67 95       	ror	r22
    4176:	b3 95       	inc	r27
    4178:	d9 f7       	brne	.-10     	; 0x4170 <__fixunssfsi+0x42>
    417a:	3e f4       	brtc	.+14     	; 0x418a <__fixunssfsi+0x5c>
    417c:	90 95       	com	r25
    417e:	80 95       	com	r24
    4180:	70 95       	com	r23
    4182:	61 95       	neg	r22
    4184:	7f 4f       	sbci	r23, 0xFF	; 255
    4186:	8f 4f       	sbci	r24, 0xFF	; 255
    4188:	9f 4f       	sbci	r25, 0xFF	; 255
    418a:	08 95       	ret

0000418c <__floatunsisf>:
    418c:	e8 94       	clt
    418e:	09 c0       	rjmp	.+18     	; 0x41a2 <__floatsisf+0x12>

00004190 <__floatsisf>:
    4190:	97 fb       	bst	r25, 7
    4192:	3e f4       	brtc	.+14     	; 0x41a2 <__floatsisf+0x12>
    4194:	90 95       	com	r25
    4196:	80 95       	com	r24
    4198:	70 95       	com	r23
    419a:	61 95       	neg	r22
    419c:	7f 4f       	sbci	r23, 0xFF	; 255
    419e:	8f 4f       	sbci	r24, 0xFF	; 255
    41a0:	9f 4f       	sbci	r25, 0xFF	; 255
    41a2:	99 23       	and	r25, r25
    41a4:	a9 f0       	breq	.+42     	; 0x41d0 <__floatsisf+0x40>
    41a6:	f9 2f       	mov	r31, r25
    41a8:	96 e9       	ldi	r25, 0x96	; 150
    41aa:	bb 27       	eor	r27, r27
    41ac:	93 95       	inc	r25
    41ae:	f6 95       	lsr	r31
    41b0:	87 95       	ror	r24
    41b2:	77 95       	ror	r23
    41b4:	67 95       	ror	r22
    41b6:	b7 95       	ror	r27
    41b8:	f1 11       	cpse	r31, r1
    41ba:	f8 cf       	rjmp	.-16     	; 0x41ac <__floatsisf+0x1c>
    41bc:	fa f4       	brpl	.+62     	; 0x41fc <__floatsisf+0x6c>
    41be:	bb 0f       	add	r27, r27
    41c0:	11 f4       	brne	.+4      	; 0x41c6 <__floatsisf+0x36>
    41c2:	60 ff       	sbrs	r22, 0
    41c4:	1b c0       	rjmp	.+54     	; 0x41fc <__floatsisf+0x6c>
    41c6:	6f 5f       	subi	r22, 0xFF	; 255
    41c8:	7f 4f       	sbci	r23, 0xFF	; 255
    41ca:	8f 4f       	sbci	r24, 0xFF	; 255
    41cc:	9f 4f       	sbci	r25, 0xFF	; 255
    41ce:	16 c0       	rjmp	.+44     	; 0x41fc <__floatsisf+0x6c>
    41d0:	88 23       	and	r24, r24
    41d2:	11 f0       	breq	.+4      	; 0x41d8 <__floatsisf+0x48>
    41d4:	96 e9       	ldi	r25, 0x96	; 150
    41d6:	11 c0       	rjmp	.+34     	; 0x41fa <__floatsisf+0x6a>
    41d8:	77 23       	and	r23, r23
    41da:	21 f0       	breq	.+8      	; 0x41e4 <__floatsisf+0x54>
    41dc:	9e e8       	ldi	r25, 0x8E	; 142
    41de:	87 2f       	mov	r24, r23
    41e0:	76 2f       	mov	r23, r22
    41e2:	05 c0       	rjmp	.+10     	; 0x41ee <__floatsisf+0x5e>
    41e4:	66 23       	and	r22, r22
    41e6:	71 f0       	breq	.+28     	; 0x4204 <__floatsisf+0x74>
    41e8:	96 e8       	ldi	r25, 0x86	; 134
    41ea:	86 2f       	mov	r24, r22
    41ec:	70 e0       	ldi	r23, 0x00	; 0
    41ee:	60 e0       	ldi	r22, 0x00	; 0
    41f0:	2a f0       	brmi	.+10     	; 0x41fc <__floatsisf+0x6c>
    41f2:	9a 95       	dec	r25
    41f4:	66 0f       	add	r22, r22
    41f6:	77 1f       	adc	r23, r23
    41f8:	88 1f       	adc	r24, r24
    41fa:	da f7       	brpl	.-10     	; 0x41f2 <__floatsisf+0x62>
    41fc:	88 0f       	add	r24, r24
    41fe:	96 95       	lsr	r25
    4200:	87 95       	ror	r24
    4202:	97 f9       	bld	r25, 7
    4204:	08 95       	ret

00004206 <__fp_split3>:
    4206:	57 fd       	sbrc	r21, 7
    4208:	90 58       	subi	r25, 0x80	; 128
    420a:	44 0f       	add	r20, r20
    420c:	55 1f       	adc	r21, r21
    420e:	59 f0       	breq	.+22     	; 0x4226 <__fp_splitA+0x10>
    4210:	5f 3f       	cpi	r21, 0xFF	; 255
    4212:	71 f0       	breq	.+28     	; 0x4230 <__fp_splitA+0x1a>
    4214:	47 95       	ror	r20

00004216 <__fp_splitA>:
    4216:	88 0f       	add	r24, r24
    4218:	97 fb       	bst	r25, 7
    421a:	99 1f       	adc	r25, r25
    421c:	61 f0       	breq	.+24     	; 0x4236 <__fp_splitA+0x20>
    421e:	9f 3f       	cpi	r25, 0xFF	; 255
    4220:	79 f0       	breq	.+30     	; 0x4240 <__fp_splitA+0x2a>
    4222:	87 95       	ror	r24
    4224:	08 95       	ret
    4226:	12 16       	cp	r1, r18
    4228:	13 06       	cpc	r1, r19
    422a:	14 06       	cpc	r1, r20
    422c:	55 1f       	adc	r21, r21
    422e:	f2 cf       	rjmp	.-28     	; 0x4214 <__fp_split3+0xe>
    4230:	46 95       	lsr	r20
    4232:	f1 df       	rcall	.-30     	; 0x4216 <__fp_splitA>
    4234:	08 c0       	rjmp	.+16     	; 0x4246 <__fp_splitA+0x30>
    4236:	16 16       	cp	r1, r22
    4238:	17 06       	cpc	r1, r23
    423a:	18 06       	cpc	r1, r24
    423c:	99 1f       	adc	r25, r25
    423e:	f1 cf       	rjmp	.-30     	; 0x4222 <__fp_splitA+0xc>
    4240:	86 95       	lsr	r24
    4242:	71 05       	cpc	r23, r1
    4244:	61 05       	cpc	r22, r1
    4246:	08 94       	sec
    4248:	08 95       	ret

0000424a <__fp_zero>:
    424a:	e8 94       	clt

0000424c <__fp_szero>:
    424c:	bb 27       	eor	r27, r27
    424e:	66 27       	eor	r22, r22
    4250:	77 27       	eor	r23, r23
    4252:	cb 01       	movw	r24, r22
    4254:	97 f9       	bld	r25, 7
    4256:	08 95       	ret

00004258 <__mulsf3>:
    4258:	0e 94 3f 21 	call	0x427e	; 0x427e <__mulsf3x>
    425c:	0c 94 b0 21 	jmp	0x4360	; 0x4360 <__fp_round>
    4260:	0e 94 a2 21 	call	0x4344	; 0x4344 <__fp_pscA>
    4264:	38 f0       	brcs	.+14     	; 0x4274 <__mulsf3+0x1c>
    4266:	0e 94 a9 21 	call	0x4352	; 0x4352 <__fp_pscB>
    426a:	20 f0       	brcs	.+8      	; 0x4274 <__mulsf3+0x1c>
    426c:	95 23       	and	r25, r21
    426e:	11 f0       	breq	.+4      	; 0x4274 <__mulsf3+0x1c>
    4270:	0c 94 99 21 	jmp	0x4332	; 0x4332 <__fp_inf>
    4274:	0c 94 9f 21 	jmp	0x433e	; 0x433e <__fp_nan>
    4278:	11 24       	eor	r1, r1
    427a:	0c 94 26 21 	jmp	0x424c	; 0x424c <__fp_szero>

0000427e <__mulsf3x>:
    427e:	0e 94 03 21 	call	0x4206	; 0x4206 <__fp_split3>
    4282:	70 f3       	brcs	.-36     	; 0x4260 <__mulsf3+0x8>

00004284 <__mulsf3_pse>:
    4284:	95 9f       	mul	r25, r21
    4286:	c1 f3       	breq	.-16     	; 0x4278 <__mulsf3+0x20>
    4288:	95 0f       	add	r25, r21
    428a:	50 e0       	ldi	r21, 0x00	; 0
    428c:	55 1f       	adc	r21, r21
    428e:	62 9f       	mul	r22, r18
    4290:	f0 01       	movw	r30, r0
    4292:	72 9f       	mul	r23, r18
    4294:	bb 27       	eor	r27, r27
    4296:	f0 0d       	add	r31, r0
    4298:	b1 1d       	adc	r27, r1
    429a:	63 9f       	mul	r22, r19
    429c:	aa 27       	eor	r26, r26
    429e:	f0 0d       	add	r31, r0
    42a0:	b1 1d       	adc	r27, r1
    42a2:	aa 1f       	adc	r26, r26
    42a4:	64 9f       	mul	r22, r20
    42a6:	66 27       	eor	r22, r22
    42a8:	b0 0d       	add	r27, r0
    42aa:	a1 1d       	adc	r26, r1
    42ac:	66 1f       	adc	r22, r22
    42ae:	82 9f       	mul	r24, r18
    42b0:	22 27       	eor	r18, r18
    42b2:	b0 0d       	add	r27, r0
    42b4:	a1 1d       	adc	r26, r1
    42b6:	62 1f       	adc	r22, r18
    42b8:	73 9f       	mul	r23, r19
    42ba:	b0 0d       	add	r27, r0
    42bc:	a1 1d       	adc	r26, r1
    42be:	62 1f       	adc	r22, r18
    42c0:	83 9f       	mul	r24, r19
    42c2:	a0 0d       	add	r26, r0
    42c4:	61 1d       	adc	r22, r1
    42c6:	22 1f       	adc	r18, r18
    42c8:	74 9f       	mul	r23, r20
    42ca:	33 27       	eor	r19, r19
    42cc:	a0 0d       	add	r26, r0
    42ce:	61 1d       	adc	r22, r1
    42d0:	23 1f       	adc	r18, r19
    42d2:	84 9f       	mul	r24, r20
    42d4:	60 0d       	add	r22, r0
    42d6:	21 1d       	adc	r18, r1
    42d8:	82 2f       	mov	r24, r18
    42da:	76 2f       	mov	r23, r22
    42dc:	6a 2f       	mov	r22, r26
    42de:	11 24       	eor	r1, r1
    42e0:	9f 57       	subi	r25, 0x7F	; 127
    42e2:	50 40       	sbci	r21, 0x00	; 0
    42e4:	9a f0       	brmi	.+38     	; 0x430c <__mulsf3_pse+0x88>
    42e6:	f1 f0       	breq	.+60     	; 0x4324 <__mulsf3_pse+0xa0>
    42e8:	88 23       	and	r24, r24
    42ea:	4a f0       	brmi	.+18     	; 0x42fe <__mulsf3_pse+0x7a>
    42ec:	ee 0f       	add	r30, r30
    42ee:	ff 1f       	adc	r31, r31
    42f0:	bb 1f       	adc	r27, r27
    42f2:	66 1f       	adc	r22, r22
    42f4:	77 1f       	adc	r23, r23
    42f6:	88 1f       	adc	r24, r24
    42f8:	91 50       	subi	r25, 0x01	; 1
    42fa:	50 40       	sbci	r21, 0x00	; 0
    42fc:	a9 f7       	brne	.-22     	; 0x42e8 <__mulsf3_pse+0x64>
    42fe:	9e 3f       	cpi	r25, 0xFE	; 254
    4300:	51 05       	cpc	r21, r1
    4302:	80 f0       	brcs	.+32     	; 0x4324 <__mulsf3_pse+0xa0>
    4304:	0c 94 99 21 	jmp	0x4332	; 0x4332 <__fp_inf>
    4308:	0c 94 26 21 	jmp	0x424c	; 0x424c <__fp_szero>
    430c:	5f 3f       	cpi	r21, 0xFF	; 255
    430e:	e4 f3       	brlt	.-8      	; 0x4308 <__mulsf3_pse+0x84>
    4310:	98 3e       	cpi	r25, 0xE8	; 232
    4312:	d4 f3       	brlt	.-12     	; 0x4308 <__mulsf3_pse+0x84>
    4314:	86 95       	lsr	r24
    4316:	77 95       	ror	r23
    4318:	67 95       	ror	r22
    431a:	b7 95       	ror	r27
    431c:	f7 95       	ror	r31
    431e:	e7 95       	ror	r30
    4320:	9f 5f       	subi	r25, 0xFF	; 255
    4322:	c1 f7       	brne	.-16     	; 0x4314 <__mulsf3_pse+0x90>
    4324:	fe 2b       	or	r31, r30
    4326:	88 0f       	add	r24, r24
    4328:	91 1d       	adc	r25, r1
    432a:	96 95       	lsr	r25
    432c:	87 95       	ror	r24
    432e:	97 f9       	bld	r25, 7
    4330:	08 95       	ret

00004332 <__fp_inf>:
    4332:	97 f9       	bld	r25, 7
    4334:	9f 67       	ori	r25, 0x7F	; 127
    4336:	80 e8       	ldi	r24, 0x80	; 128
    4338:	70 e0       	ldi	r23, 0x00	; 0
    433a:	60 e0       	ldi	r22, 0x00	; 0
    433c:	08 95       	ret

0000433e <__fp_nan>:
    433e:	9f ef       	ldi	r25, 0xFF	; 255
    4340:	80 ec       	ldi	r24, 0xC0	; 192
    4342:	08 95       	ret

00004344 <__fp_pscA>:
    4344:	00 24       	eor	r0, r0
    4346:	0a 94       	dec	r0
    4348:	16 16       	cp	r1, r22
    434a:	17 06       	cpc	r1, r23
    434c:	18 06       	cpc	r1, r24
    434e:	09 06       	cpc	r0, r25
    4350:	08 95       	ret

00004352 <__fp_pscB>:
    4352:	00 24       	eor	r0, r0
    4354:	0a 94       	dec	r0
    4356:	12 16       	cp	r1, r18
    4358:	13 06       	cpc	r1, r19
    435a:	14 06       	cpc	r1, r20
    435c:	05 06       	cpc	r0, r21
    435e:	08 95       	ret

00004360 <__fp_round>:
    4360:	09 2e       	mov	r0, r25
    4362:	03 94       	inc	r0
    4364:	00 0c       	add	r0, r0
    4366:	11 f4       	brne	.+4      	; 0x436c <__fp_round+0xc>
    4368:	88 23       	and	r24, r24
    436a:	52 f0       	brmi	.+20     	; 0x4380 <__fp_round+0x20>
    436c:	bb 0f       	add	r27, r27
    436e:	40 f4       	brcc	.+16     	; 0x4380 <__fp_round+0x20>
    4370:	bf 2b       	or	r27, r31
    4372:	11 f4       	brne	.+4      	; 0x4378 <__fp_round+0x18>
    4374:	60 ff       	sbrs	r22, 0
    4376:	04 c0       	rjmp	.+8      	; 0x4380 <__fp_round+0x20>
    4378:	6f 5f       	subi	r22, 0xFF	; 255
    437a:	7f 4f       	sbci	r23, 0xFF	; 255
    437c:	8f 4f       	sbci	r24, 0xFF	; 255
    437e:	9f 4f       	sbci	r25, 0xFF	; 255
    4380:	08 95       	ret

00004382 <__udivmodsi4>:
    4382:	a1 e2       	ldi	r26, 0x21	; 33
    4384:	1a 2e       	mov	r1, r26
    4386:	aa 1b       	sub	r26, r26
    4388:	bb 1b       	sub	r27, r27
    438a:	fd 01       	movw	r30, r26
    438c:	0d c0       	rjmp	.+26     	; 0x43a8 <__udivmodsi4_ep>

0000438e <__udivmodsi4_loop>:
    438e:	aa 1f       	adc	r26, r26
    4390:	bb 1f       	adc	r27, r27
    4392:	ee 1f       	adc	r30, r30
    4394:	ff 1f       	adc	r31, r31
    4396:	a2 17       	cp	r26, r18
    4398:	b3 07       	cpc	r27, r19
    439a:	e4 07       	cpc	r30, r20
    439c:	f5 07       	cpc	r31, r21
    439e:	20 f0       	brcs	.+8      	; 0x43a8 <__udivmodsi4_ep>
    43a0:	a2 1b       	sub	r26, r18
    43a2:	b3 0b       	sbc	r27, r19
    43a4:	e4 0b       	sbc	r30, r20
    43a6:	f5 0b       	sbc	r31, r21

000043a8 <__udivmodsi4_ep>:
    43a8:	66 1f       	adc	r22, r22
    43aa:	77 1f       	adc	r23, r23
    43ac:	88 1f       	adc	r24, r24
    43ae:	99 1f       	adc	r25, r25
    43b0:	1a 94       	dec	r1
    43b2:	69 f7       	brne	.-38     	; 0x438e <__udivmodsi4_loop>
    43b4:	60 95       	com	r22
    43b6:	70 95       	com	r23
    43b8:	80 95       	com	r24
    43ba:	90 95       	com	r25
    43bc:	9b 01       	movw	r18, r22
    43be:	ac 01       	movw	r20, r24
    43c0:	bd 01       	movw	r22, r26
    43c2:	cf 01       	movw	r24, r30
    43c4:	08 95       	ret

000043c6 <__tablejump2__>:
    43c6:	ee 0f       	add	r30, r30
    43c8:	ff 1f       	adc	r31, r31
    43ca:	05 90       	lpm	r0, Z+
    43cc:	f4 91       	lpm	r31, Z
    43ce:	e0 2d       	mov	r30, r0
    43d0:	09 94       	ijmp

000043d2 <__muluhisi3>:
    43d2:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__umulhisi3>
    43d6:	a5 9f       	mul	r26, r21
    43d8:	90 0d       	add	r25, r0
    43da:	b4 9f       	mul	r27, r20
    43dc:	90 0d       	add	r25, r0
    43de:	a4 9f       	mul	r26, r20
    43e0:	80 0d       	add	r24, r0
    43e2:	91 1d       	adc	r25, r1
    43e4:	11 24       	eor	r1, r1
    43e6:	08 95       	ret

000043e8 <__umulhisi3>:
    43e8:	a2 9f       	mul	r26, r18
    43ea:	b0 01       	movw	r22, r0
    43ec:	b3 9f       	mul	r27, r19
    43ee:	c0 01       	movw	r24, r0
    43f0:	a3 9f       	mul	r26, r19
    43f2:	70 0d       	add	r23, r0
    43f4:	81 1d       	adc	r24, r1
    43f6:	11 24       	eor	r1, r1
    43f8:	91 1d       	adc	r25, r1
    43fa:	b2 9f       	mul	r27, r18
    43fc:	70 0d       	add	r23, r0
    43fe:	81 1d       	adc	r24, r1
    4400:	11 24       	eor	r1, r1
    4402:	91 1d       	adc	r25, r1
    4404:	08 95       	ret

00004406 <printf>:
    4406:	a0 e0       	ldi	r26, 0x00	; 0
    4408:	b0 e0       	ldi	r27, 0x00	; 0
    440a:	e9 e0       	ldi	r30, 0x09	; 9
    440c:	f2 e2       	ldi	r31, 0x22	; 34
    440e:	0c 94 ea 24 	jmp	0x49d4	; 0x49d4 <__prologue_saves__+0x20>
    4412:	ae 01       	movw	r20, r28
    4414:	4b 5f       	subi	r20, 0xFB	; 251
    4416:	5f 4f       	sbci	r21, 0xFF	; 255
    4418:	fa 01       	movw	r30, r20
    441a:	61 91       	ld	r22, Z+
    441c:	71 91       	ld	r23, Z+
    441e:	af 01       	movw	r20, r30
    4420:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <__iob+0x2>
    4424:	90 91 7e 09 	lds	r25, 0x097E	; 0x80097e <__iob+0x3>
    4428:	0e 94 49 22 	call	0x4492	; 0x4492 <vfprintf>
    442c:	e2 e0       	ldi	r30, 0x02	; 2
    442e:	0c 94 06 25 	jmp	0x4a0c	; 0x4a0c <__epilogue_restores__+0x20>

00004432 <puts>:
    4432:	0f 93       	push	r16
    4434:	1f 93       	push	r17
    4436:	cf 93       	push	r28
    4438:	df 93       	push	r29
    443a:	e0 91 7d 09 	lds	r30, 0x097D	; 0x80097d <__iob+0x2>
    443e:	f0 91 7e 09 	lds	r31, 0x097E	; 0x80097e <__iob+0x3>
    4442:	23 81       	ldd	r18, Z+3	; 0x03
    4444:	21 ff       	sbrs	r18, 1
    4446:	1b c0       	rjmp	.+54     	; 0x447e <puts+0x4c>
    4448:	8c 01       	movw	r16, r24
    444a:	d0 e0       	ldi	r29, 0x00	; 0
    444c:	c0 e0       	ldi	r28, 0x00	; 0
    444e:	f8 01       	movw	r30, r16
    4450:	81 91       	ld	r24, Z+
    4452:	8f 01       	movw	r16, r30
    4454:	60 91 7d 09 	lds	r22, 0x097D	; 0x80097d <__iob+0x2>
    4458:	70 91 7e 09 	lds	r23, 0x097E	; 0x80097e <__iob+0x3>
    445c:	db 01       	movw	r26, r22
    445e:	18 96       	adiw	r26, 0x08	; 8
    4460:	ed 91       	ld	r30, X+
    4462:	fc 91       	ld	r31, X
    4464:	19 97       	sbiw	r26, 0x09	; 9
    4466:	88 23       	and	r24, r24
    4468:	31 f0       	breq	.+12     	; 0x4476 <puts+0x44>
    446a:	09 95       	icall
    446c:	89 2b       	or	r24, r25
    446e:	79 f3       	breq	.-34     	; 0x444e <puts+0x1c>
    4470:	df ef       	ldi	r29, 0xFF	; 255
    4472:	cf ef       	ldi	r28, 0xFF	; 255
    4474:	ec cf       	rjmp	.-40     	; 0x444e <puts+0x1c>
    4476:	8a e0       	ldi	r24, 0x0A	; 10
    4478:	09 95       	icall
    447a:	89 2b       	or	r24, r25
    447c:	19 f0       	breq	.+6      	; 0x4484 <puts+0x52>
    447e:	8f ef       	ldi	r24, 0xFF	; 255
    4480:	9f ef       	ldi	r25, 0xFF	; 255
    4482:	02 c0       	rjmp	.+4      	; 0x4488 <puts+0x56>
    4484:	8d 2f       	mov	r24, r29
    4486:	9c 2f       	mov	r25, r28
    4488:	df 91       	pop	r29
    448a:	cf 91       	pop	r28
    448c:	1f 91       	pop	r17
    448e:	0f 91       	pop	r16
    4490:	08 95       	ret

00004492 <vfprintf>:
    4492:	ab e0       	ldi	r26, 0x0B	; 11
    4494:	b0 e0       	ldi	r27, 0x00	; 0
    4496:	ef e4       	ldi	r30, 0x4F	; 79
    4498:	f2 e2       	ldi	r31, 0x22	; 34
    449a:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__prologue_saves__>
    449e:	6c 01       	movw	r12, r24
    44a0:	7b 01       	movw	r14, r22
    44a2:	8a 01       	movw	r16, r20
    44a4:	fc 01       	movw	r30, r24
    44a6:	17 82       	std	Z+7, r1	; 0x07
    44a8:	16 82       	std	Z+6, r1	; 0x06
    44aa:	83 81       	ldd	r24, Z+3	; 0x03
    44ac:	81 ff       	sbrs	r24, 1
    44ae:	cc c1       	rjmp	.+920    	; 0x4848 <vfprintf+0x3b6>
    44b0:	ce 01       	movw	r24, r28
    44b2:	01 96       	adiw	r24, 0x01	; 1
    44b4:	3c 01       	movw	r6, r24
    44b6:	f6 01       	movw	r30, r12
    44b8:	93 81       	ldd	r25, Z+3	; 0x03
    44ba:	f7 01       	movw	r30, r14
    44bc:	93 fd       	sbrc	r25, 3
    44be:	85 91       	lpm	r24, Z+
    44c0:	93 ff       	sbrs	r25, 3
    44c2:	81 91       	ld	r24, Z+
    44c4:	7f 01       	movw	r14, r30
    44c6:	88 23       	and	r24, r24
    44c8:	09 f4       	brne	.+2      	; 0x44cc <vfprintf+0x3a>
    44ca:	ba c1       	rjmp	.+884    	; 0x4840 <vfprintf+0x3ae>
    44cc:	85 32       	cpi	r24, 0x25	; 37
    44ce:	39 f4       	brne	.+14     	; 0x44de <vfprintf+0x4c>
    44d0:	93 fd       	sbrc	r25, 3
    44d2:	85 91       	lpm	r24, Z+
    44d4:	93 ff       	sbrs	r25, 3
    44d6:	81 91       	ld	r24, Z+
    44d8:	7f 01       	movw	r14, r30
    44da:	85 32       	cpi	r24, 0x25	; 37
    44dc:	29 f4       	brne	.+10     	; 0x44e8 <vfprintf+0x56>
    44de:	b6 01       	movw	r22, r12
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	0e 94 40 24 	call	0x4880	; 0x4880 <fputc>
    44e6:	e7 cf       	rjmp	.-50     	; 0x44b6 <vfprintf+0x24>
    44e8:	91 2c       	mov	r9, r1
    44ea:	21 2c       	mov	r2, r1
    44ec:	31 2c       	mov	r3, r1
    44ee:	ff e1       	ldi	r31, 0x1F	; 31
    44f0:	f3 15       	cp	r31, r3
    44f2:	d8 f0       	brcs	.+54     	; 0x452a <vfprintf+0x98>
    44f4:	8b 32       	cpi	r24, 0x2B	; 43
    44f6:	79 f0       	breq	.+30     	; 0x4516 <vfprintf+0x84>
    44f8:	38 f4       	brcc	.+14     	; 0x4508 <vfprintf+0x76>
    44fa:	80 32       	cpi	r24, 0x20	; 32
    44fc:	79 f0       	breq	.+30     	; 0x451c <vfprintf+0x8a>
    44fe:	83 32       	cpi	r24, 0x23	; 35
    4500:	a1 f4       	brne	.+40     	; 0x452a <vfprintf+0x98>
    4502:	23 2d       	mov	r18, r3
    4504:	20 61       	ori	r18, 0x10	; 16
    4506:	1d c0       	rjmp	.+58     	; 0x4542 <vfprintf+0xb0>
    4508:	8d 32       	cpi	r24, 0x2D	; 45
    450a:	61 f0       	breq	.+24     	; 0x4524 <vfprintf+0x92>
    450c:	80 33       	cpi	r24, 0x30	; 48
    450e:	69 f4       	brne	.+26     	; 0x452a <vfprintf+0x98>
    4510:	23 2d       	mov	r18, r3
    4512:	21 60       	ori	r18, 0x01	; 1
    4514:	16 c0       	rjmp	.+44     	; 0x4542 <vfprintf+0xb0>
    4516:	83 2d       	mov	r24, r3
    4518:	82 60       	ori	r24, 0x02	; 2
    451a:	38 2e       	mov	r3, r24
    451c:	e3 2d       	mov	r30, r3
    451e:	e4 60       	ori	r30, 0x04	; 4
    4520:	3e 2e       	mov	r3, r30
    4522:	2a c0       	rjmp	.+84     	; 0x4578 <vfprintf+0xe6>
    4524:	f3 2d       	mov	r31, r3
    4526:	f8 60       	ori	r31, 0x08	; 8
    4528:	1d c0       	rjmp	.+58     	; 0x4564 <vfprintf+0xd2>
    452a:	37 fc       	sbrc	r3, 7
    452c:	2d c0       	rjmp	.+90     	; 0x4588 <vfprintf+0xf6>
    452e:	20 ed       	ldi	r18, 0xD0	; 208
    4530:	28 0f       	add	r18, r24
    4532:	2a 30       	cpi	r18, 0x0A	; 10
    4534:	40 f0       	brcs	.+16     	; 0x4546 <vfprintf+0xb4>
    4536:	8e 32       	cpi	r24, 0x2E	; 46
    4538:	b9 f4       	brne	.+46     	; 0x4568 <vfprintf+0xd6>
    453a:	36 fc       	sbrc	r3, 6
    453c:	81 c1       	rjmp	.+770    	; 0x4840 <vfprintf+0x3ae>
    453e:	23 2d       	mov	r18, r3
    4540:	20 64       	ori	r18, 0x40	; 64
    4542:	32 2e       	mov	r3, r18
    4544:	19 c0       	rjmp	.+50     	; 0x4578 <vfprintf+0xe6>
    4546:	36 fe       	sbrs	r3, 6
    4548:	06 c0       	rjmp	.+12     	; 0x4556 <vfprintf+0xc4>
    454a:	8a e0       	ldi	r24, 0x0A	; 10
    454c:	98 9e       	mul	r9, r24
    454e:	20 0d       	add	r18, r0
    4550:	11 24       	eor	r1, r1
    4552:	92 2e       	mov	r9, r18
    4554:	11 c0       	rjmp	.+34     	; 0x4578 <vfprintf+0xe6>
    4556:	ea e0       	ldi	r30, 0x0A	; 10
    4558:	2e 9e       	mul	r2, r30
    455a:	20 0d       	add	r18, r0
    455c:	11 24       	eor	r1, r1
    455e:	22 2e       	mov	r2, r18
    4560:	f3 2d       	mov	r31, r3
    4562:	f0 62       	ori	r31, 0x20	; 32
    4564:	3f 2e       	mov	r3, r31
    4566:	08 c0       	rjmp	.+16     	; 0x4578 <vfprintf+0xe6>
    4568:	8c 36       	cpi	r24, 0x6C	; 108
    456a:	21 f4       	brne	.+8      	; 0x4574 <vfprintf+0xe2>
    456c:	83 2d       	mov	r24, r3
    456e:	80 68       	ori	r24, 0x80	; 128
    4570:	38 2e       	mov	r3, r24
    4572:	02 c0       	rjmp	.+4      	; 0x4578 <vfprintf+0xe6>
    4574:	88 36       	cpi	r24, 0x68	; 104
    4576:	41 f4       	brne	.+16     	; 0x4588 <vfprintf+0xf6>
    4578:	f7 01       	movw	r30, r14
    457a:	93 fd       	sbrc	r25, 3
    457c:	85 91       	lpm	r24, Z+
    457e:	93 ff       	sbrs	r25, 3
    4580:	81 91       	ld	r24, Z+
    4582:	7f 01       	movw	r14, r30
    4584:	81 11       	cpse	r24, r1
    4586:	b3 cf       	rjmp	.-154    	; 0x44ee <vfprintf+0x5c>
    4588:	98 2f       	mov	r25, r24
    458a:	9f 7d       	andi	r25, 0xDF	; 223
    458c:	95 54       	subi	r25, 0x45	; 69
    458e:	93 30       	cpi	r25, 0x03	; 3
    4590:	28 f4       	brcc	.+10     	; 0x459c <vfprintf+0x10a>
    4592:	0c 5f       	subi	r16, 0xFC	; 252
    4594:	1f 4f       	sbci	r17, 0xFF	; 255
    4596:	9f e3       	ldi	r25, 0x3F	; 63
    4598:	99 83       	std	Y+1, r25	; 0x01
    459a:	0d c0       	rjmp	.+26     	; 0x45b6 <vfprintf+0x124>
    459c:	83 36       	cpi	r24, 0x63	; 99
    459e:	31 f0       	breq	.+12     	; 0x45ac <vfprintf+0x11a>
    45a0:	83 37       	cpi	r24, 0x73	; 115
    45a2:	71 f0       	breq	.+28     	; 0x45c0 <vfprintf+0x12e>
    45a4:	83 35       	cpi	r24, 0x53	; 83
    45a6:	09 f0       	breq	.+2      	; 0x45aa <vfprintf+0x118>
    45a8:	59 c0       	rjmp	.+178    	; 0x465c <vfprintf+0x1ca>
    45aa:	21 c0       	rjmp	.+66     	; 0x45ee <vfprintf+0x15c>
    45ac:	f8 01       	movw	r30, r16
    45ae:	80 81       	ld	r24, Z
    45b0:	89 83       	std	Y+1, r24	; 0x01
    45b2:	0e 5f       	subi	r16, 0xFE	; 254
    45b4:	1f 4f       	sbci	r17, 0xFF	; 255
    45b6:	88 24       	eor	r8, r8
    45b8:	83 94       	inc	r8
    45ba:	91 2c       	mov	r9, r1
    45bc:	53 01       	movw	r10, r6
    45be:	13 c0       	rjmp	.+38     	; 0x45e6 <vfprintf+0x154>
    45c0:	28 01       	movw	r4, r16
    45c2:	f2 e0       	ldi	r31, 0x02	; 2
    45c4:	4f 0e       	add	r4, r31
    45c6:	51 1c       	adc	r5, r1
    45c8:	f8 01       	movw	r30, r16
    45ca:	a0 80       	ld	r10, Z
    45cc:	b1 80       	ldd	r11, Z+1	; 0x01
    45ce:	36 fe       	sbrs	r3, 6
    45d0:	03 c0       	rjmp	.+6      	; 0x45d8 <vfprintf+0x146>
    45d2:	69 2d       	mov	r22, r9
    45d4:	70 e0       	ldi	r23, 0x00	; 0
    45d6:	02 c0       	rjmp	.+4      	; 0x45dc <vfprintf+0x14a>
    45d8:	6f ef       	ldi	r22, 0xFF	; 255
    45da:	7f ef       	ldi	r23, 0xFF	; 255
    45dc:	c5 01       	movw	r24, r10
    45de:	0e 94 35 24 	call	0x486a	; 0x486a <strnlen>
    45e2:	4c 01       	movw	r8, r24
    45e4:	82 01       	movw	r16, r4
    45e6:	f3 2d       	mov	r31, r3
    45e8:	ff 77       	andi	r31, 0x7F	; 127
    45ea:	3f 2e       	mov	r3, r31
    45ec:	16 c0       	rjmp	.+44     	; 0x461a <vfprintf+0x188>
    45ee:	28 01       	movw	r4, r16
    45f0:	22 e0       	ldi	r18, 0x02	; 2
    45f2:	42 0e       	add	r4, r18
    45f4:	51 1c       	adc	r5, r1
    45f6:	f8 01       	movw	r30, r16
    45f8:	a0 80       	ld	r10, Z
    45fa:	b1 80       	ldd	r11, Z+1	; 0x01
    45fc:	36 fe       	sbrs	r3, 6
    45fe:	03 c0       	rjmp	.+6      	; 0x4606 <vfprintf+0x174>
    4600:	69 2d       	mov	r22, r9
    4602:	70 e0       	ldi	r23, 0x00	; 0
    4604:	02 c0       	rjmp	.+4      	; 0x460a <vfprintf+0x178>
    4606:	6f ef       	ldi	r22, 0xFF	; 255
    4608:	7f ef       	ldi	r23, 0xFF	; 255
    460a:	c5 01       	movw	r24, r10
    460c:	0e 94 2a 24 	call	0x4854	; 0x4854 <strnlen_P>
    4610:	4c 01       	movw	r8, r24
    4612:	f3 2d       	mov	r31, r3
    4614:	f0 68       	ori	r31, 0x80	; 128
    4616:	3f 2e       	mov	r3, r31
    4618:	82 01       	movw	r16, r4
    461a:	33 fc       	sbrc	r3, 3
    461c:	1b c0       	rjmp	.+54     	; 0x4654 <vfprintf+0x1c2>
    461e:	82 2d       	mov	r24, r2
    4620:	90 e0       	ldi	r25, 0x00	; 0
    4622:	88 16       	cp	r8, r24
    4624:	99 06       	cpc	r9, r25
    4626:	b0 f4       	brcc	.+44     	; 0x4654 <vfprintf+0x1c2>
    4628:	b6 01       	movw	r22, r12
    462a:	80 e2       	ldi	r24, 0x20	; 32
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	0e 94 40 24 	call	0x4880	; 0x4880 <fputc>
    4632:	2a 94       	dec	r2
    4634:	f4 cf       	rjmp	.-24     	; 0x461e <vfprintf+0x18c>
    4636:	f5 01       	movw	r30, r10
    4638:	37 fc       	sbrc	r3, 7
    463a:	85 91       	lpm	r24, Z+
    463c:	37 fe       	sbrs	r3, 7
    463e:	81 91       	ld	r24, Z+
    4640:	5f 01       	movw	r10, r30
    4642:	b6 01       	movw	r22, r12
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	0e 94 40 24 	call	0x4880	; 0x4880 <fputc>
    464a:	21 10       	cpse	r2, r1
    464c:	2a 94       	dec	r2
    464e:	21 e0       	ldi	r18, 0x01	; 1
    4650:	82 1a       	sub	r8, r18
    4652:	91 08       	sbc	r9, r1
    4654:	81 14       	cp	r8, r1
    4656:	91 04       	cpc	r9, r1
    4658:	71 f7       	brne	.-36     	; 0x4636 <vfprintf+0x1a4>
    465a:	e8 c0       	rjmp	.+464    	; 0x482c <vfprintf+0x39a>
    465c:	84 36       	cpi	r24, 0x64	; 100
    465e:	11 f0       	breq	.+4      	; 0x4664 <vfprintf+0x1d2>
    4660:	89 36       	cpi	r24, 0x69	; 105
    4662:	41 f5       	brne	.+80     	; 0x46b4 <vfprintf+0x222>
    4664:	f8 01       	movw	r30, r16
    4666:	37 fe       	sbrs	r3, 7
    4668:	07 c0       	rjmp	.+14     	; 0x4678 <vfprintf+0x1e6>
    466a:	60 81       	ld	r22, Z
    466c:	71 81       	ldd	r23, Z+1	; 0x01
    466e:	82 81       	ldd	r24, Z+2	; 0x02
    4670:	93 81       	ldd	r25, Z+3	; 0x03
    4672:	0c 5f       	subi	r16, 0xFC	; 252
    4674:	1f 4f       	sbci	r17, 0xFF	; 255
    4676:	08 c0       	rjmp	.+16     	; 0x4688 <vfprintf+0x1f6>
    4678:	60 81       	ld	r22, Z
    467a:	71 81       	ldd	r23, Z+1	; 0x01
    467c:	07 2e       	mov	r0, r23
    467e:	00 0c       	add	r0, r0
    4680:	88 0b       	sbc	r24, r24
    4682:	99 0b       	sbc	r25, r25
    4684:	0e 5f       	subi	r16, 0xFE	; 254
    4686:	1f 4f       	sbci	r17, 0xFF	; 255
    4688:	f3 2d       	mov	r31, r3
    468a:	ff 76       	andi	r31, 0x6F	; 111
    468c:	3f 2e       	mov	r3, r31
    468e:	97 ff       	sbrs	r25, 7
    4690:	09 c0       	rjmp	.+18     	; 0x46a4 <vfprintf+0x212>
    4692:	90 95       	com	r25
    4694:	80 95       	com	r24
    4696:	70 95       	com	r23
    4698:	61 95       	neg	r22
    469a:	7f 4f       	sbci	r23, 0xFF	; 255
    469c:	8f 4f       	sbci	r24, 0xFF	; 255
    469e:	9f 4f       	sbci	r25, 0xFF	; 255
    46a0:	f0 68       	ori	r31, 0x80	; 128
    46a2:	3f 2e       	mov	r3, r31
    46a4:	2a e0       	ldi	r18, 0x0A	; 10
    46a6:	30 e0       	ldi	r19, 0x00	; 0
    46a8:	a3 01       	movw	r20, r6
    46aa:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <__ultoa_invert>
    46ae:	88 2e       	mov	r8, r24
    46b0:	86 18       	sub	r8, r6
    46b2:	45 c0       	rjmp	.+138    	; 0x473e <vfprintf+0x2ac>
    46b4:	85 37       	cpi	r24, 0x75	; 117
    46b6:	31 f4       	brne	.+12     	; 0x46c4 <vfprintf+0x232>
    46b8:	23 2d       	mov	r18, r3
    46ba:	2f 7e       	andi	r18, 0xEF	; 239
    46bc:	b2 2e       	mov	r11, r18
    46be:	2a e0       	ldi	r18, 0x0A	; 10
    46c0:	30 e0       	ldi	r19, 0x00	; 0
    46c2:	25 c0       	rjmp	.+74     	; 0x470e <vfprintf+0x27c>
    46c4:	93 2d       	mov	r25, r3
    46c6:	99 7f       	andi	r25, 0xF9	; 249
    46c8:	b9 2e       	mov	r11, r25
    46ca:	8f 36       	cpi	r24, 0x6F	; 111
    46cc:	c1 f0       	breq	.+48     	; 0x46fe <vfprintf+0x26c>
    46ce:	18 f4       	brcc	.+6      	; 0x46d6 <vfprintf+0x244>
    46d0:	88 35       	cpi	r24, 0x58	; 88
    46d2:	79 f0       	breq	.+30     	; 0x46f2 <vfprintf+0x260>
    46d4:	b5 c0       	rjmp	.+362    	; 0x4840 <vfprintf+0x3ae>
    46d6:	80 37       	cpi	r24, 0x70	; 112
    46d8:	19 f0       	breq	.+6      	; 0x46e0 <vfprintf+0x24e>
    46da:	88 37       	cpi	r24, 0x78	; 120
    46dc:	21 f0       	breq	.+8      	; 0x46e6 <vfprintf+0x254>
    46de:	b0 c0       	rjmp	.+352    	; 0x4840 <vfprintf+0x3ae>
    46e0:	e9 2f       	mov	r30, r25
    46e2:	e0 61       	ori	r30, 0x10	; 16
    46e4:	be 2e       	mov	r11, r30
    46e6:	b4 fe       	sbrs	r11, 4
    46e8:	0d c0       	rjmp	.+26     	; 0x4704 <vfprintf+0x272>
    46ea:	fb 2d       	mov	r31, r11
    46ec:	f4 60       	ori	r31, 0x04	; 4
    46ee:	bf 2e       	mov	r11, r31
    46f0:	09 c0       	rjmp	.+18     	; 0x4704 <vfprintf+0x272>
    46f2:	34 fe       	sbrs	r3, 4
    46f4:	0a c0       	rjmp	.+20     	; 0x470a <vfprintf+0x278>
    46f6:	29 2f       	mov	r18, r25
    46f8:	26 60       	ori	r18, 0x06	; 6
    46fa:	b2 2e       	mov	r11, r18
    46fc:	06 c0       	rjmp	.+12     	; 0x470a <vfprintf+0x278>
    46fe:	28 e0       	ldi	r18, 0x08	; 8
    4700:	30 e0       	ldi	r19, 0x00	; 0
    4702:	05 c0       	rjmp	.+10     	; 0x470e <vfprintf+0x27c>
    4704:	20 e1       	ldi	r18, 0x10	; 16
    4706:	30 e0       	ldi	r19, 0x00	; 0
    4708:	02 c0       	rjmp	.+4      	; 0x470e <vfprintf+0x27c>
    470a:	20 e1       	ldi	r18, 0x10	; 16
    470c:	32 e0       	ldi	r19, 0x02	; 2
    470e:	f8 01       	movw	r30, r16
    4710:	b7 fe       	sbrs	r11, 7
    4712:	07 c0       	rjmp	.+14     	; 0x4722 <vfprintf+0x290>
    4714:	60 81       	ld	r22, Z
    4716:	71 81       	ldd	r23, Z+1	; 0x01
    4718:	82 81       	ldd	r24, Z+2	; 0x02
    471a:	93 81       	ldd	r25, Z+3	; 0x03
    471c:	0c 5f       	subi	r16, 0xFC	; 252
    471e:	1f 4f       	sbci	r17, 0xFF	; 255
    4720:	06 c0       	rjmp	.+12     	; 0x472e <vfprintf+0x29c>
    4722:	60 81       	ld	r22, Z
    4724:	71 81       	ldd	r23, Z+1	; 0x01
    4726:	80 e0       	ldi	r24, 0x00	; 0
    4728:	90 e0       	ldi	r25, 0x00	; 0
    472a:	0e 5f       	subi	r16, 0xFE	; 254
    472c:	1f 4f       	sbci	r17, 0xFF	; 255
    472e:	a3 01       	movw	r20, r6
    4730:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <__ultoa_invert>
    4734:	88 2e       	mov	r8, r24
    4736:	86 18       	sub	r8, r6
    4738:	fb 2d       	mov	r31, r11
    473a:	ff 77       	andi	r31, 0x7F	; 127
    473c:	3f 2e       	mov	r3, r31
    473e:	36 fe       	sbrs	r3, 6
    4740:	0d c0       	rjmp	.+26     	; 0x475c <vfprintf+0x2ca>
    4742:	23 2d       	mov	r18, r3
    4744:	2e 7f       	andi	r18, 0xFE	; 254
    4746:	a2 2e       	mov	r10, r18
    4748:	89 14       	cp	r8, r9
    474a:	58 f4       	brcc	.+22     	; 0x4762 <vfprintf+0x2d0>
    474c:	34 fe       	sbrs	r3, 4
    474e:	0b c0       	rjmp	.+22     	; 0x4766 <vfprintf+0x2d4>
    4750:	32 fc       	sbrc	r3, 2
    4752:	09 c0       	rjmp	.+18     	; 0x4766 <vfprintf+0x2d4>
    4754:	83 2d       	mov	r24, r3
    4756:	8e 7e       	andi	r24, 0xEE	; 238
    4758:	a8 2e       	mov	r10, r24
    475a:	05 c0       	rjmp	.+10     	; 0x4766 <vfprintf+0x2d4>
    475c:	b8 2c       	mov	r11, r8
    475e:	a3 2c       	mov	r10, r3
    4760:	03 c0       	rjmp	.+6      	; 0x4768 <vfprintf+0x2d6>
    4762:	b8 2c       	mov	r11, r8
    4764:	01 c0       	rjmp	.+2      	; 0x4768 <vfprintf+0x2d6>
    4766:	b9 2c       	mov	r11, r9
    4768:	a4 fe       	sbrs	r10, 4
    476a:	0f c0       	rjmp	.+30     	; 0x478a <vfprintf+0x2f8>
    476c:	fe 01       	movw	r30, r28
    476e:	e8 0d       	add	r30, r8
    4770:	f1 1d       	adc	r31, r1
    4772:	80 81       	ld	r24, Z
    4774:	80 33       	cpi	r24, 0x30	; 48
    4776:	21 f4       	brne	.+8      	; 0x4780 <vfprintf+0x2ee>
    4778:	9a 2d       	mov	r25, r10
    477a:	99 7e       	andi	r25, 0xE9	; 233
    477c:	a9 2e       	mov	r10, r25
    477e:	09 c0       	rjmp	.+18     	; 0x4792 <vfprintf+0x300>
    4780:	a2 fe       	sbrs	r10, 2
    4782:	06 c0       	rjmp	.+12     	; 0x4790 <vfprintf+0x2fe>
    4784:	b3 94       	inc	r11
    4786:	b3 94       	inc	r11
    4788:	04 c0       	rjmp	.+8      	; 0x4792 <vfprintf+0x300>
    478a:	8a 2d       	mov	r24, r10
    478c:	86 78       	andi	r24, 0x86	; 134
    478e:	09 f0       	breq	.+2      	; 0x4792 <vfprintf+0x300>
    4790:	b3 94       	inc	r11
    4792:	a3 fc       	sbrc	r10, 3
    4794:	11 c0       	rjmp	.+34     	; 0x47b8 <vfprintf+0x326>
    4796:	a0 fe       	sbrs	r10, 0
    4798:	06 c0       	rjmp	.+12     	; 0x47a6 <vfprintf+0x314>
    479a:	b2 14       	cp	r11, r2
    479c:	88 f4       	brcc	.+34     	; 0x47c0 <vfprintf+0x32e>
    479e:	28 0c       	add	r2, r8
    47a0:	92 2c       	mov	r9, r2
    47a2:	9b 18       	sub	r9, r11
    47a4:	0e c0       	rjmp	.+28     	; 0x47c2 <vfprintf+0x330>
    47a6:	b2 14       	cp	r11, r2
    47a8:	60 f4       	brcc	.+24     	; 0x47c2 <vfprintf+0x330>
    47aa:	b6 01       	movw	r22, r12
    47ac:	80 e2       	ldi	r24, 0x20	; 32
    47ae:	90 e0       	ldi	r25, 0x00	; 0
    47b0:	0e 94 40 24 	call	0x4880	; 0x4880 <fputc>
    47b4:	b3 94       	inc	r11
    47b6:	f7 cf       	rjmp	.-18     	; 0x47a6 <vfprintf+0x314>
    47b8:	b2 14       	cp	r11, r2
    47ba:	18 f4       	brcc	.+6      	; 0x47c2 <vfprintf+0x330>
    47bc:	2b 18       	sub	r2, r11
    47be:	02 c0       	rjmp	.+4      	; 0x47c4 <vfprintf+0x332>
    47c0:	98 2c       	mov	r9, r8
    47c2:	21 2c       	mov	r2, r1
    47c4:	a4 fe       	sbrs	r10, 4
    47c6:	10 c0       	rjmp	.+32     	; 0x47e8 <vfprintf+0x356>
    47c8:	b6 01       	movw	r22, r12
    47ca:	80 e3       	ldi	r24, 0x30	; 48
    47cc:	90 e0       	ldi	r25, 0x00	; 0
    47ce:	0e 94 40 24 	call	0x4880	; 0x4880 <fputc>
    47d2:	a2 fe       	sbrs	r10, 2
    47d4:	17 c0       	rjmp	.+46     	; 0x4804 <vfprintf+0x372>
    47d6:	a1 fc       	sbrc	r10, 1
    47d8:	03 c0       	rjmp	.+6      	; 0x47e0 <vfprintf+0x34e>
    47da:	88 e7       	ldi	r24, 0x78	; 120
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	02 c0       	rjmp	.+4      	; 0x47e4 <vfprintf+0x352>
    47e0:	88 e5       	ldi	r24, 0x58	; 88
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	b6 01       	movw	r22, r12
    47e6:	0c c0       	rjmp	.+24     	; 0x4800 <vfprintf+0x36e>
    47e8:	8a 2d       	mov	r24, r10
    47ea:	86 78       	andi	r24, 0x86	; 134
    47ec:	59 f0       	breq	.+22     	; 0x4804 <vfprintf+0x372>
    47ee:	a1 fe       	sbrs	r10, 1
    47f0:	02 c0       	rjmp	.+4      	; 0x47f6 <vfprintf+0x364>
    47f2:	8b e2       	ldi	r24, 0x2B	; 43
    47f4:	01 c0       	rjmp	.+2      	; 0x47f8 <vfprintf+0x366>
    47f6:	80 e2       	ldi	r24, 0x20	; 32
    47f8:	a7 fc       	sbrc	r10, 7
    47fa:	8d e2       	ldi	r24, 0x2D	; 45
    47fc:	b6 01       	movw	r22, r12
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	0e 94 40 24 	call	0x4880	; 0x4880 <fputc>
    4804:	89 14       	cp	r8, r9
    4806:	38 f4       	brcc	.+14     	; 0x4816 <vfprintf+0x384>
    4808:	b6 01       	movw	r22, r12
    480a:	80 e3       	ldi	r24, 0x30	; 48
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	0e 94 40 24 	call	0x4880	; 0x4880 <fputc>
    4812:	9a 94       	dec	r9
    4814:	f7 cf       	rjmp	.-18     	; 0x4804 <vfprintf+0x372>
    4816:	8a 94       	dec	r8
    4818:	f3 01       	movw	r30, r6
    481a:	e8 0d       	add	r30, r8
    481c:	f1 1d       	adc	r31, r1
    481e:	80 81       	ld	r24, Z
    4820:	b6 01       	movw	r22, r12
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	0e 94 40 24 	call	0x4880	; 0x4880 <fputc>
    4828:	81 10       	cpse	r8, r1
    482a:	f5 cf       	rjmp	.-22     	; 0x4816 <vfprintf+0x384>
    482c:	22 20       	and	r2, r2
    482e:	09 f4       	brne	.+2      	; 0x4832 <vfprintf+0x3a0>
    4830:	42 ce       	rjmp	.-892    	; 0x44b6 <vfprintf+0x24>
    4832:	b6 01       	movw	r22, r12
    4834:	80 e2       	ldi	r24, 0x20	; 32
    4836:	90 e0       	ldi	r25, 0x00	; 0
    4838:	0e 94 40 24 	call	0x4880	; 0x4880 <fputc>
    483c:	2a 94       	dec	r2
    483e:	f6 cf       	rjmp	.-20     	; 0x482c <vfprintf+0x39a>
    4840:	f6 01       	movw	r30, r12
    4842:	86 81       	ldd	r24, Z+6	; 0x06
    4844:	97 81       	ldd	r25, Z+7	; 0x07
    4846:	02 c0       	rjmp	.+4      	; 0x484c <vfprintf+0x3ba>
    4848:	8f ef       	ldi	r24, 0xFF	; 255
    484a:	9f ef       	ldi	r25, 0xFF	; 255
    484c:	2b 96       	adiw	r28, 0x0b	; 11
    484e:	e2 e1       	ldi	r30, 0x12	; 18
    4850:	0c 94 f6 24 	jmp	0x49ec	; 0x49ec <__epilogue_restores__>

00004854 <strnlen_P>:
    4854:	fc 01       	movw	r30, r24
    4856:	05 90       	lpm	r0, Z+
    4858:	61 50       	subi	r22, 0x01	; 1
    485a:	70 40       	sbci	r23, 0x00	; 0
    485c:	01 10       	cpse	r0, r1
    485e:	d8 f7       	brcc	.-10     	; 0x4856 <strnlen_P+0x2>
    4860:	80 95       	com	r24
    4862:	90 95       	com	r25
    4864:	8e 0f       	add	r24, r30
    4866:	9f 1f       	adc	r25, r31
    4868:	08 95       	ret

0000486a <strnlen>:
    486a:	fc 01       	movw	r30, r24
    486c:	61 50       	subi	r22, 0x01	; 1
    486e:	70 40       	sbci	r23, 0x00	; 0
    4870:	01 90       	ld	r0, Z+
    4872:	01 10       	cpse	r0, r1
    4874:	d8 f7       	brcc	.-10     	; 0x486c <strnlen+0x2>
    4876:	80 95       	com	r24
    4878:	90 95       	com	r25
    487a:	8e 0f       	add	r24, r30
    487c:	9f 1f       	adc	r25, r31
    487e:	08 95       	ret

00004880 <fputc>:
    4880:	0f 93       	push	r16
    4882:	1f 93       	push	r17
    4884:	cf 93       	push	r28
    4886:	df 93       	push	r29
    4888:	fb 01       	movw	r30, r22
    488a:	23 81       	ldd	r18, Z+3	; 0x03
    488c:	21 fd       	sbrc	r18, 1
    488e:	03 c0       	rjmp	.+6      	; 0x4896 <fputc+0x16>
    4890:	8f ef       	ldi	r24, 0xFF	; 255
    4892:	9f ef       	ldi	r25, 0xFF	; 255
    4894:	2c c0       	rjmp	.+88     	; 0x48ee <fputc+0x6e>
    4896:	22 ff       	sbrs	r18, 2
    4898:	16 c0       	rjmp	.+44     	; 0x48c6 <fputc+0x46>
    489a:	46 81       	ldd	r20, Z+6	; 0x06
    489c:	57 81       	ldd	r21, Z+7	; 0x07
    489e:	24 81       	ldd	r18, Z+4	; 0x04
    48a0:	35 81       	ldd	r19, Z+5	; 0x05
    48a2:	42 17       	cp	r20, r18
    48a4:	53 07       	cpc	r21, r19
    48a6:	44 f4       	brge	.+16     	; 0x48b8 <fputc+0x38>
    48a8:	a0 81       	ld	r26, Z
    48aa:	b1 81       	ldd	r27, Z+1	; 0x01
    48ac:	9d 01       	movw	r18, r26
    48ae:	2f 5f       	subi	r18, 0xFF	; 255
    48b0:	3f 4f       	sbci	r19, 0xFF	; 255
    48b2:	31 83       	std	Z+1, r19	; 0x01
    48b4:	20 83       	st	Z, r18
    48b6:	8c 93       	st	X, r24
    48b8:	26 81       	ldd	r18, Z+6	; 0x06
    48ba:	37 81       	ldd	r19, Z+7	; 0x07
    48bc:	2f 5f       	subi	r18, 0xFF	; 255
    48be:	3f 4f       	sbci	r19, 0xFF	; 255
    48c0:	37 83       	std	Z+7, r19	; 0x07
    48c2:	26 83       	std	Z+6, r18	; 0x06
    48c4:	14 c0       	rjmp	.+40     	; 0x48ee <fputc+0x6e>
    48c6:	8b 01       	movw	r16, r22
    48c8:	ec 01       	movw	r28, r24
    48ca:	fb 01       	movw	r30, r22
    48cc:	00 84       	ldd	r0, Z+8	; 0x08
    48ce:	f1 85       	ldd	r31, Z+9	; 0x09
    48d0:	e0 2d       	mov	r30, r0
    48d2:	09 95       	icall
    48d4:	89 2b       	or	r24, r25
    48d6:	e1 f6       	brne	.-72     	; 0x4890 <fputc+0x10>
    48d8:	d8 01       	movw	r26, r16
    48da:	16 96       	adiw	r26, 0x06	; 6
    48dc:	8d 91       	ld	r24, X+
    48de:	9c 91       	ld	r25, X
    48e0:	17 97       	sbiw	r26, 0x07	; 7
    48e2:	01 96       	adiw	r24, 0x01	; 1
    48e4:	17 96       	adiw	r26, 0x07	; 7
    48e6:	9c 93       	st	X, r25
    48e8:	8e 93       	st	-X, r24
    48ea:	16 97       	sbiw	r26, 0x06	; 6
    48ec:	ce 01       	movw	r24, r28
    48ee:	df 91       	pop	r29
    48f0:	cf 91       	pop	r28
    48f2:	1f 91       	pop	r17
    48f4:	0f 91       	pop	r16
    48f6:	08 95       	ret

000048f8 <__ultoa_invert>:
    48f8:	fa 01       	movw	r30, r20
    48fa:	aa 27       	eor	r26, r26
    48fc:	28 30       	cpi	r18, 0x08	; 8
    48fe:	51 f1       	breq	.+84     	; 0x4954 <__ultoa_invert+0x5c>
    4900:	20 31       	cpi	r18, 0x10	; 16
    4902:	81 f1       	breq	.+96     	; 0x4964 <__ultoa_invert+0x6c>
    4904:	e8 94       	clt
    4906:	6f 93       	push	r22
    4908:	6e 7f       	andi	r22, 0xFE	; 254
    490a:	6e 5f       	subi	r22, 0xFE	; 254
    490c:	7f 4f       	sbci	r23, 0xFF	; 255
    490e:	8f 4f       	sbci	r24, 0xFF	; 255
    4910:	9f 4f       	sbci	r25, 0xFF	; 255
    4912:	af 4f       	sbci	r26, 0xFF	; 255
    4914:	b1 e0       	ldi	r27, 0x01	; 1
    4916:	3e d0       	rcall	.+124    	; 0x4994 <__ultoa_invert+0x9c>
    4918:	b4 e0       	ldi	r27, 0x04	; 4
    491a:	3c d0       	rcall	.+120    	; 0x4994 <__ultoa_invert+0x9c>
    491c:	67 0f       	add	r22, r23
    491e:	78 1f       	adc	r23, r24
    4920:	89 1f       	adc	r24, r25
    4922:	9a 1f       	adc	r25, r26
    4924:	a1 1d       	adc	r26, r1
    4926:	68 0f       	add	r22, r24
    4928:	79 1f       	adc	r23, r25
    492a:	8a 1f       	adc	r24, r26
    492c:	91 1d       	adc	r25, r1
    492e:	a1 1d       	adc	r26, r1
    4930:	6a 0f       	add	r22, r26
    4932:	71 1d       	adc	r23, r1
    4934:	81 1d       	adc	r24, r1
    4936:	91 1d       	adc	r25, r1
    4938:	a1 1d       	adc	r26, r1
    493a:	20 d0       	rcall	.+64     	; 0x497c <__ultoa_invert+0x84>
    493c:	09 f4       	brne	.+2      	; 0x4940 <__ultoa_invert+0x48>
    493e:	68 94       	set
    4940:	3f 91       	pop	r19
    4942:	2a e0       	ldi	r18, 0x0A	; 10
    4944:	26 9f       	mul	r18, r22
    4946:	11 24       	eor	r1, r1
    4948:	30 19       	sub	r19, r0
    494a:	30 5d       	subi	r19, 0xD0	; 208
    494c:	31 93       	st	Z+, r19
    494e:	de f6       	brtc	.-74     	; 0x4906 <__ultoa_invert+0xe>
    4950:	cf 01       	movw	r24, r30
    4952:	08 95       	ret
    4954:	46 2f       	mov	r20, r22
    4956:	47 70       	andi	r20, 0x07	; 7
    4958:	40 5d       	subi	r20, 0xD0	; 208
    495a:	41 93       	st	Z+, r20
    495c:	b3 e0       	ldi	r27, 0x03	; 3
    495e:	0f d0       	rcall	.+30     	; 0x497e <__ultoa_invert+0x86>
    4960:	c9 f7       	brne	.-14     	; 0x4954 <__ultoa_invert+0x5c>
    4962:	f6 cf       	rjmp	.-20     	; 0x4950 <__ultoa_invert+0x58>
    4964:	46 2f       	mov	r20, r22
    4966:	4f 70       	andi	r20, 0x0F	; 15
    4968:	40 5d       	subi	r20, 0xD0	; 208
    496a:	4a 33       	cpi	r20, 0x3A	; 58
    496c:	18 f0       	brcs	.+6      	; 0x4974 <__ultoa_invert+0x7c>
    496e:	49 5d       	subi	r20, 0xD9	; 217
    4970:	31 fd       	sbrc	r19, 1
    4972:	40 52       	subi	r20, 0x20	; 32
    4974:	41 93       	st	Z+, r20
    4976:	02 d0       	rcall	.+4      	; 0x497c <__ultoa_invert+0x84>
    4978:	a9 f7       	brne	.-22     	; 0x4964 <__ultoa_invert+0x6c>
    497a:	ea cf       	rjmp	.-44     	; 0x4950 <__ultoa_invert+0x58>
    497c:	b4 e0       	ldi	r27, 0x04	; 4
    497e:	a6 95       	lsr	r26
    4980:	97 95       	ror	r25
    4982:	87 95       	ror	r24
    4984:	77 95       	ror	r23
    4986:	67 95       	ror	r22
    4988:	ba 95       	dec	r27
    498a:	c9 f7       	brne	.-14     	; 0x497e <__ultoa_invert+0x86>
    498c:	00 97       	sbiw	r24, 0x00	; 0
    498e:	61 05       	cpc	r22, r1
    4990:	71 05       	cpc	r23, r1
    4992:	08 95       	ret
    4994:	9b 01       	movw	r18, r22
    4996:	ac 01       	movw	r20, r24
    4998:	0a 2e       	mov	r0, r26
    499a:	06 94       	lsr	r0
    499c:	57 95       	ror	r21
    499e:	47 95       	ror	r20
    49a0:	37 95       	ror	r19
    49a2:	27 95       	ror	r18
    49a4:	ba 95       	dec	r27
    49a6:	c9 f7       	brne	.-14     	; 0x499a <__ultoa_invert+0xa2>
    49a8:	62 0f       	add	r22, r18
    49aa:	73 1f       	adc	r23, r19
    49ac:	84 1f       	adc	r24, r20
    49ae:	95 1f       	adc	r25, r21
    49b0:	a0 1d       	adc	r26, r0
    49b2:	08 95       	ret

000049b4 <__prologue_saves__>:
    49b4:	2f 92       	push	r2
    49b6:	3f 92       	push	r3
    49b8:	4f 92       	push	r4
    49ba:	5f 92       	push	r5
    49bc:	6f 92       	push	r6
    49be:	7f 92       	push	r7
    49c0:	8f 92       	push	r8
    49c2:	9f 92       	push	r9
    49c4:	af 92       	push	r10
    49c6:	bf 92       	push	r11
    49c8:	cf 92       	push	r12
    49ca:	df 92       	push	r13
    49cc:	ef 92       	push	r14
    49ce:	ff 92       	push	r15
    49d0:	0f 93       	push	r16
    49d2:	1f 93       	push	r17
    49d4:	cf 93       	push	r28
    49d6:	df 93       	push	r29
    49d8:	cd b7       	in	r28, 0x3d	; 61
    49da:	de b7       	in	r29, 0x3e	; 62
    49dc:	ca 1b       	sub	r28, r26
    49de:	db 0b       	sbc	r29, r27
    49e0:	0f b6       	in	r0, 0x3f	; 63
    49e2:	f8 94       	cli
    49e4:	de bf       	out	0x3e, r29	; 62
    49e6:	0f be       	out	0x3f, r0	; 63
    49e8:	cd bf       	out	0x3d, r28	; 61
    49ea:	09 94       	ijmp

000049ec <__epilogue_restores__>:
    49ec:	2a 88       	ldd	r2, Y+18	; 0x12
    49ee:	39 88       	ldd	r3, Y+17	; 0x11
    49f0:	48 88       	ldd	r4, Y+16	; 0x10
    49f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    49f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    49f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    49f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    49fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    49fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    49fe:	b9 84       	ldd	r11, Y+9	; 0x09
    4a00:	c8 84       	ldd	r12, Y+8	; 0x08
    4a02:	df 80       	ldd	r13, Y+7	; 0x07
    4a04:	ee 80       	ldd	r14, Y+6	; 0x06
    4a06:	fd 80       	ldd	r15, Y+5	; 0x05
    4a08:	0c 81       	ldd	r16, Y+4	; 0x04
    4a0a:	1b 81       	ldd	r17, Y+3	; 0x03
    4a0c:	aa 81       	ldd	r26, Y+2	; 0x02
    4a0e:	b9 81       	ldd	r27, Y+1	; 0x01
    4a10:	ce 0f       	add	r28, r30
    4a12:	d1 1d       	adc	r29, r1
    4a14:	0f b6       	in	r0, 0x3f	; 63
    4a16:	f8 94       	cli
    4a18:	de bf       	out	0x3e, r29	; 62
    4a1a:	0f be       	out	0x3f, r0	; 63
    4a1c:	cd bf       	out	0x3d, r28	; 61
    4a1e:	ed 01       	movw	r28, r26
    4a20:	08 95       	ret

00004a22 <_exit>:
    4a22:	f8 94       	cli

00004a24 <__stop_program>:
    4a24:	ff cf       	rjmp	.-2      	; 0x4a24 <__stop_program>
